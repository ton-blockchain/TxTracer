{
  "instructions": {
    "PUSHNAN": {
      "category": "arithmetic",
      "subCategory": "int_const",
      "description": {
        "short": "",
        "long": "Pushes a `NaN`.",
        "operands": []
      },
      "layout": {
        "min": 8650496,
        "max": 8650752,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_push_nan",
        "kind": "simple",
        "prefix": 33791,
        "prefix_str": "83FF"
      },
      "signature": {
        "stack_string": "âˆ… -> NaN",
        "outputs": {
          "stack": [
            {
              "type": "const",
              "value_type": "Int",
              "value": "NaN"
            }
          ]
        }
      }
    },
    "ADD": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "Adds two integers and pushes the result back onto the stack.",
        "long": "Pops two integers from the stack, adds them and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 10485760,
        "max": 10551296,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_add(_1, false)",
        "kind": "simple",
        "prefix": 160,
        "prefix_str": "A0"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x + y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SUB": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "Subtracts two integers and pushes the result back onto the stack.",
        "long": "Pops two integers from the stack, subtracts the second one from the first one and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 10551296,
        "max": 10616832,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_sub(_1, false)",
        "kind": "simple",
        "prefix": 161,
        "prefix_str": "A1"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x - y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SUBR": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "Subtracts two integers in reverse order and pushes the result back onto the stack.",
        "long": "Pops two integers from the stack, subtracts the first one from the second one and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top or second element is not an Int."
          }
        ],
        "other_implementations": [
          {
            "exact": true,
            "instructions": ["SWAP", "SUB"]
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 10616832,
        "max": 10682368,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_subr(_1, false)",
        "kind": "simple",
        "prefix": 162,
        "prefix_str": "A2"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "y - x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "NEGATE": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "Negates an integer and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 1 element."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          },
          {
            "errno": "4",
            "condition": "Integer overflow if `x = -2^256`."
          }
        ],
        "other_implementations": [
          {
            "exact": true,
            "instructions": ["MULINT -1", "NEGATE"]
          },
          {
            "exact": true,
            "instructions": ["ZERO", "SUBR"]
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 10682368,
        "max": 10747904,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_negate(_1, false)",
        "kind": "simple",
        "prefix": 163,
        "prefix_str": "A3"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "-x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "INC": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "Increments an integer and pushes the result back onto the stack.",
        "long": "Pops an integer from the stack, increments it by 1 and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 1 element."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 10747904,
        "max": 10813440,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_inc(_1, false)",
        "kind": "simple",
        "prefix": 164,
        "prefix_str": "A4"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x + 1",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DEC": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "Decrements an integer and pushes the result back onto the stack.",
        "long": "Pops an integer from the stack, decrements it by 1 and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 1 element."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 10813440,
        "max": 10878976,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_dec(_1, false)",
        "kind": "simple",
        "prefix": 165,
        "prefix_str": "A5"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x - 1",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MUL": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "Multiplies two integers and pushes the result back onto the stack.",
        "long": "Pops two integers from the stack, multiplies them and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 11010048,
        "max": 11075584,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_mul(_1, false)",
        "kind": "simple",
        "prefix": 168,
        "prefix_str": "A8"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x * y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "POW2": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "Raises 2 to the power of `$x` and pushes the result back onto the stack.",
        "long": "Pops an integer from the stack, raises 2 to the power of it and pushes the result back onto the stack.",
        "operands": [],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 1 element."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          }
        ],
        "other_implementations": [
          {
            "exact": true,
            "instructions": ["ONE", "SWAP", "LSHIFT"]
          }
        ]
      },
      "layout": {
        "min": 11403264,
        "max": 11468800,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_pow2(_1, false)",
        "kind": "simple",
        "prefix": 174,
        "prefix_str": "AE"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "range": {
                "min": 0,
                "max": 1023,
                "todo": "check"
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "AND": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "Bitwise AND of two signed integers `$x` and `$y`, sign-extended to infinity and pushes the result back onto the stack.",
        "long": "Pops two signed integers from the stack, performs a bitwise AND operation on them and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 11534336,
        "max": 11599872,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_and(_1, false)",
        "kind": "simple",
        "prefix": 176,
        "prefix_str": "B0"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "OR": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "Bitwise OR of two signed integers `$x` and `$y`, sign-extended to infinity and pushes the result back onto the stack.",
        "long": "Pops two signed integers from the stack, performs a bitwise OR operation on them and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 11599872,
        "max": 11665408,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_or(_1, false)",
        "kind": "simple",
        "prefix": 177,
        "prefix_str": "B1"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "XOR": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "Bitwise XOR of two signed integers `$x` and `$y`, sign-extended to infinity and pushes the result back onto the stack.",
        "long": "Pops two signed integers from the stack, performs a bitwise XOR operation on them and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 11665408,
        "max": 11730944,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_xor(_1, false)",
        "kind": "simple",
        "prefix": 178,
        "prefix_str": "B2"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "NOT": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "Bitwise NOT of an integer, sign-extended to infinity and pushes the result back onto the stack.",
        "long": "Pops an integer from the stack, performs a bitwise NOT operation on it and pushes the result back onto the stack.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 1 element."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 11730944,
        "max": 11796480,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_not(_1, false)",
        "kind": "simple",
        "prefix": 179,
        "prefix_str": "B3"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "FITSX": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "Checks whether `x` is a `c`-bit signed integer for `0 <= c <= 1023`.",
        "operands": []
      },
      "layout": {
        "min": 11927552,
        "max": 11927808,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_fits(_1, false)",
        "kind": "simple",
        "prefix": 46592,
        "prefix_str": "B600"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "x:Int c:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "UFITSX": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "Checks whether `x` is a `c`-bit unsigned integer for `0 <= c <= 1023`.",
        "operands": []
      },
      "layout": {
        "min": 11927808,
        "max": 11928064,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ufits(_1, false)",
        "kind": "simple",
        "prefix": 46593,
        "prefix_str": "B601"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "x:Int c:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BITSIZE": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "Computes smallest `c >= 0` such that `x` fits into a `c`-bit signed integer (`-2^(c-1) <= c < 2^(c-1)`).",
        "operands": []
      },
      "layout": {
        "min": 11928064,
        "max": 11928320,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bitsize(_1, true, false)",
        "kind": "simple",
        "prefix": 46594,
        "prefix_str": "B602"
      },
      "signature": {
        "stack_string": "x:Int -> c:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "UBITSIZE": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "Computes smallest `c >= 0` such that `x` fits into a `c`-bit unsigned integer (`0 <= x < 2^c`), or throws a range check exception.",
        "operands": []
      },
      "layout": {
        "min": 11928320,
        "max": 11928576,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bitsize(_1, false, false)",
        "kind": "simple",
        "prefix": 46595,
        "prefix_str": "B603"
      },
      "signature": {
        "stack_string": "x:Int -> c:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MIN": {
      "category": "arithmetic",
      "subCategory": "other_arith",
      "description": {
        "short": "",
        "long": "Computes the minimum of two integers `x` and `y`.",
        "operands": []
      },
      "layout": {
        "min": 11929600,
        "max": 11929856,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_minmax(_1, 2)",
        "kind": "simple",
        "prefix": 46600,
        "prefix_str": "B608"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MAX": {
      "category": "arithmetic",
      "subCategory": "other_arith",
      "description": {
        "short": "",
        "long": "Computes the maximum of two integers `x` and `y`.",
        "operands": []
      },
      "layout": {
        "min": 11929856,
        "max": 11930112,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_minmax(_1, 4)",
        "kind": "simple",
        "prefix": 46601,
        "prefix_str": "B609"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MINMAX": {
      "category": "arithmetic",
      "subCategory": "other_arith",
      "description": {
        "short": "",
        "long": "Sorts two integers. Quiet version of this operation returns two `NaN`s if any of the arguments are `NaN`s.",
        "operands": []
      },
      "layout": {
        "min": 11930112,
        "max": 11930368,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_minmax(_1, 6)",
        "kind": "simple",
        "prefix": 46602,
        "prefix_str": "B60A"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> r1:Int r2:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "r1",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r2",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ABS": {
      "category": "arithmetic",
      "subCategory": "other_arith",
      "description": {
        "short": "",
        "long": "Computes the absolute value of an integer `x`.",
        "operands": []
      },
      "layout": {
        "min": 11930368,
        "max": 11930624,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_abs(_1, false)",
        "kind": "simple",
        "prefix": 46603,
        "prefix_str": "B60B"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QADD": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12034048,
        "max": 12034304,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_add(_1, true)",
        "kind": "simple",
        "prefix": 47008,
        "prefix_str": "B7A0"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QSUB": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12034304,
        "max": 12034560,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_sub(_1, true)",
        "kind": "simple",
        "prefix": 47009,
        "prefix_str": "B7A1"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QSUBR": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12034560,
        "max": 12034816,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_subr(_1, true)",
        "kind": "simple",
        "prefix": 47010,
        "prefix_str": "B7A2"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QNEGATE": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12034816,
        "max": 12035072,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_negate(_1, true)",
        "kind": "simple",
        "prefix": 47011,
        "prefix_str": "B7A3"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QINC": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12035072,
        "max": 12035328,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_inc(_1, true)",
        "kind": "simple",
        "prefix": 47012,
        "prefix_str": "B7A4"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QDEC": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12035328,
        "max": 12035584,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_dec(_1, true)",
        "kind": "simple",
        "prefix": 47013,
        "prefix_str": "B7A5"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMUL": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036096,
        "max": 12036352,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_mul(_1, true)",
        "kind": "simple",
        "prefix": 47016,
        "prefix_str": "B7A8"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QPOW2": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12037632,
        "max": 12037888,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_pow2(_1, true)",
        "kind": "simple",
        "prefix": 47022,
        "prefix_str": "B7AE"
      },
      "signature": {
        "stack_string": "y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QAND": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12038144,
        "max": 12038400,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_and(_1, true)",
        "kind": "simple",
        "prefix": 47024,
        "prefix_str": "B7B0"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QOR": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12038400,
        "max": 12038656,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_or(_1, true)",
        "kind": "simple",
        "prefix": 47025,
        "prefix_str": "B7B1"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QXOR": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12038656,
        "max": 12038912,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_xor(_1, true)",
        "kind": "simple",
        "prefix": 47026,
        "prefix_str": "B7B2"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QNOT": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12038912,
        "max": 12039168,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_not(_1, true)",
        "kind": "simple",
        "prefix": 47027,
        "prefix_str": "B7B3"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QFITSX": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "Replaces `x` with a `NaN` if x is not a c-bit signed integer, leaves it intact otherwise.",
        "operands": []
      },
      "layout": {
        "min": 12039680,
        "max": 12039681,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_fits(_1, true)",
        "kind": "simple",
        "prefix": 12039680,
        "prefix_str": "B7B600"
      },
      "signature": {
        "stack_string": "x:Int c:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QUFITSX": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "Replaces `x` with a `NaN` if x is not a c-bit unsigned integer, leaves it intact otherwise.",
        "operands": []
      },
      "layout": {
        "min": 12039681,
        "max": 12039682,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ufits(_1, true)",
        "kind": "simple",
        "prefix": 12039681,
        "prefix_str": "B7B601"
      },
      "signature": {
        "stack_string": "x:Int c:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QBITSIZE": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12039682,
        "max": 12039683,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bitsize(_1, true, true)",
        "kind": "simple",
        "prefix": 12039682,
        "prefix_str": "B7B602"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QUBITSIZE": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12039683,
        "max": 12039684,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bitsize(_1, false, true)",
        "kind": "simple",
        "prefix": 12039683,
        "prefix_str": "B7B603"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QMIN": {
      "category": "arithmetic",
      "subCategory": "other_arith",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12039688,
        "max": 12039689,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_minmax(_1, 3)",
        "kind": "simple",
        "prefix": 12039688,
        "prefix_str": "B7B608"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QMAX": {
      "category": "arithmetic",
      "subCategory": "other_arith",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12039689,
        "max": 12039690,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_minmax(_1, 5)",
        "kind": "simple",
        "prefix": 12039689,
        "prefix_str": "B7B609"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QMINMAX": {
      "category": "arithmetic",
      "subCategory": "other_arith",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12039690,
        "max": 12039691,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_minmax(_1, 7)",
        "kind": "simple",
        "prefix": 12039690,
        "prefix_str": "B7B60A"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QABS": {
      "category": "arithmetic",
      "subCategory": "other_arith",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12039691,
        "max": 12039692,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_abs(_1, true)",
        "kind": "simple",
        "prefix": 12039691,
        "prefix_str": "B7B60B"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "SGN": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": "Computes the sign of an integer `x`:\n`-1` if `x<0`, `0` if `x=0`, `1` if `x>0`.",
        "operands": []
      },
      "layout": {
        "min": 12058624,
        "max": 12124160,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_sgn(_1, 0x987, false, 'SGN')",
        "kind": "simple",
        "prefix": 184,
        "prefix_str": "B8"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LESS": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "Compares `x` and `y` for less than and returns `-1` if true and `0` otherwise.",
        "tags": ["comparisons"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "5",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 12124160,
        "max": 12189696,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x887, false, 'LESS')",
        "kind": "simple",
        "prefix": 185,
        "prefix_str": "B9"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x < y",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "EQUAL": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "Compares `x` and `y` for equality and returns `-1` if equal and `0` otherwise.",
        "tags": ["comparisons"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "5",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 12189696,
        "max": 12255232,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x878, false, 'EQUAL')",
        "kind": "simple",
        "prefix": 186,
        "prefix_str": "BA"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x == y",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "LEQ": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "Compares `x` and `y` for less than or equal to and returns `-1` if true and `0` otherwise.",
        "tags": ["comparisons"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "5",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 12255232,
        "max": 12320768,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x877, false, 'LEQ')",
        "kind": "simple",
        "prefix": 187,
        "prefix_str": "BB"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x <= y",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "GREATER": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "Compares `x` and `y` for greater than and returns `-1` if true and `0` otherwise.",
        "tags": ["comparisons"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "5",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 12320768,
        "max": 12386304,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x788, false, 'GREATER')",
        "kind": "simple",
        "prefix": 188,
        "prefix_str": "BC"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x >= y",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "NEQ": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "Compares `x` and `y` for inequality and returns `-1` if true and `0` otherwise.",
        "tags": ["comparisons"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "5",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 12386304,
        "max": 12451840,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x787, false, 'NEQ')",
        "kind": "simple",
        "prefix": 189,
        "prefix_str": "BD"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x != y",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "GEQ": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "Compares `x` and `y` for greater than or equal to and returns `-1` if true and `0` otherwise.",
        "tags": ["comparisons"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "5",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 12451840,
        "max": 12517376,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x778, false, 'GEQ')",
        "kind": "simple",
        "prefix": 190,
        "prefix_str": "BE"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x >= y",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "CMP": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": "Computes the sign of `x-y`:\n`-1` if `x<y`, `0` if `x=y`, `1` if `x>y`.\nNo integer overflow can occur here unless `x` or `y` is a `NaN`.",
        "tags": ["comparisons"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "5",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 12517376,
        "max": 12582912,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x987, false, 'CMP')",
        "kind": "simple",
        "prefix": 191,
        "prefix_str": "BF"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ISNAN": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": "Checks whether `x` is a `NaN`.",
        "operands": []
      },
      "layout": {
        "min": 12845056,
        "max": 12910592,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_is_nan",
        "kind": "simple",
        "prefix": 196,
        "prefix_str": "C4"
      },
      "signature": {
        "stack_string": "x:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "CHKNAN": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": "Throws an arithmetic overflow exception if `x` is a `NaN`.",
        "operands": []
      },
      "layout": {
        "min": 12910592,
        "max": 12976128,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_chk_nan",
        "kind": "simple",
        "prefix": 197,
        "prefix_str": "C5"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "x:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QSGN": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12040192,
        "max": 12040448,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_sgn(_1, 0x987, true, 'QSGN')",
        "kind": "simple",
        "prefix": 47032,
        "prefix_str": "B7B8"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QLESS": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12040448,
        "max": 12040704,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x887, true, 'QLESS')",
        "kind": "simple",
        "prefix": 47033,
        "prefix_str": "B7B9"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QEQUAL": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12040704,
        "max": 12040960,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x878, true, 'QEQUAL')",
        "kind": "simple",
        "prefix": 47034,
        "prefix_str": "B7BA"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QLEQ": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12040960,
        "max": 12041216,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x877, true, 'QLEQ')",
        "kind": "simple",
        "prefix": 47035,
        "prefix_str": "B7BB"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QGREATER": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12041216,
        "max": 12041472,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x788, true, 'QGREATER')",
        "kind": "simple",
        "prefix": 47036,
        "prefix_str": "B7BC"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QNEQ": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12041472,
        "max": 12041728,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x787, true, 'QNEQ')",
        "kind": "simple",
        "prefix": 47037,
        "prefix_str": "B7BD"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QGEQ": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12041728,
        "max": 12041984,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x778, true, 'QGEQ')",
        "kind": "simple",
        "prefix": 47038,
        "prefix_str": "B7BE"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QCMP": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12041984,
        "max": 12042240,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_cmp(_1, 0x987, true, 'QCMP')",
        "kind": "simple",
        "prefix": 47039,
        "prefix_str": "B7BF"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "SEMPTY": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether a _Slice_ `s` is empty (i.e., contains no bits of data and no cell references).",
        "operands": []
      },
      "layout": {
        "min": 13041664,
        "max": 13041920,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_un_cs_cmp(_1, 'SEMPTY', (cs) => cs.empty() && !cs.size_refs())",
        "kind": "simple",
        "prefix": 50944,
        "prefix_str": "C700"
      },
      "signature": {
        "stack_string": "s:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDEMPTY": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether _Slice_ `s` has no bits of data.",
        "operands": []
      },
      "layout": {
        "min": 13041920,
        "max": 13042176,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_un_cs_cmp(_1, 'SDEMPTY', (cs) => cs.empty())",
        "kind": "simple",
        "prefix": 50945,
        "prefix_str": "C701"
      },
      "signature": {
        "stack_string": "s:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SREMPTY": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether _Slice_ `s` has no references.",
        "operands": []
      },
      "layout": {
        "min": 13042176,
        "max": 13042432,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_un_cs_cmp(_1, 'SREMPTY', (cs) => !cs.size_refs())",
        "kind": "simple",
        "prefix": 50946,
        "prefix_str": "C702"
      },
      "signature": {
        "stack_string": "s:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDFIRST": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether the first bit of _Slice_ `s` is a one.",
        "operands": []
      },
      "layout": {
        "min": 13042432,
        "max": 13042688,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_un_cs_cmp(_1, 'SDFIRST', (cs) => cs.prefetch_long(1) == -1)",
        "kind": "simple",
        "prefix": 50947,
        "prefix_str": "C703"
      },
      "signature": {
        "stack_string": "s:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDLEXCMP": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Compares the data of `s` lexicographically with the data of `s'`, returning `-1`, 0, or 1 depending on the result.",
        "operands": []
      },
      "layout": {
        "min": 13042688,
        "max": 13042944,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ibin_cs_cmp(_1, 'SDLEXCMP', (cs1, cs2) => cs1.lex_cmp(cs2))",
        "kind": "simple",
        "prefix": 50948,
        "prefix_str": "C704"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SDEQ": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether the data parts of `s` and `s'` coincide, equivalent to `SDLEXCMP` `ISZERO`.",
        "operands": []
      },
      "layout": {
        "min": 13042944,
        "max": 13043200,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bin_cs_cmp(_1, 'SDEQ', (cs1, cs2) => !cs1.lex_cmp(cs2))",
        "kind": "simple",
        "prefix": 50949,
        "prefix_str": "C705"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDPFX": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether `s` is a prefix of `s'`.",
        "operands": []
      },
      "layout": {
        "min": 13043712,
        "max": 13043968,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bin_cs_cmp(_1, 'SDPFX', (cs1, cs2) => cs1.is_prefix_of(cs2))",
        "kind": "simple",
        "prefix": 50952,
        "prefix_str": "C708"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDPFXREV": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether `s'` is a prefix of `s`, equivalent to `SWAP` `SDPFX`.",
        "operands": []
      },
      "layout": {
        "min": 13043968,
        "max": 13044224,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bin_cs_cmp(_1, 'SDPFXREV', (cs1, cs2) => cs2.is_prefix_of(cs1))",
        "kind": "simple",
        "prefix": 50953,
        "prefix_str": "C709"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDPPFX": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether `s` is a proper prefix of `s'` (i.e., a prefix distinct from `s'`).",
        "operands": []
      },
      "layout": {
        "min": 13044224,
        "max": 13044480,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bin_cs_cmp(_1, 'SDPPFX', (cs1, cs2) => cs1.is_proper_prefix_of(cs2))",
        "kind": "simple",
        "prefix": 50954,
        "prefix_str": "C70A"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDPPFXREV": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether `s'` is a proper prefix of `s`.",
        "operands": []
      },
      "layout": {
        "min": 13044480,
        "max": 13044736,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bin_cs_cmp(_1, 'SDPPFXREV', (cs1, cs2) => cs2.is_proper_prefix_of(cs1))",
        "kind": "simple",
        "prefix": 50955,
        "prefix_str": "C70B"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDSFX": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether `s` is a suffix of `s'`.",
        "operands": []
      },
      "layout": {
        "min": 13044736,
        "max": 13044992,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bin_cs_cmp(_1, 'SDSFX', (cs1, cs2) => cs1.is_suffix_of(cs2))",
        "kind": "simple",
        "prefix": 50956,
        "prefix_str": "C70C"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDSFXREV": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether `s'` is a suffix of `s`.",
        "operands": []
      },
      "layout": {
        "min": 13044992,
        "max": 13045248,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bin_cs_cmp(_1, 'SDSFXREV', (cs1, cs2) => cs2.is_suffix_of(cs1))",
        "kind": "simple",
        "prefix": 50957,
        "prefix_str": "C70D"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDPSFX": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether `s` is a proper suffix of `s'`.",
        "operands": []
      },
      "layout": {
        "min": 13045248,
        "max": 13045504,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bin_cs_cmp(_1, 'SDPSFX', (cs1, cs2) => cs1.is_proper_suffix_of(cs2))",
        "kind": "simple",
        "prefix": 50958,
        "prefix_str": "C70E"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDPSFXREV": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Checks whether `s'` is a proper suffix of `s`.",
        "operands": []
      },
      "layout": {
        "min": 13045504,
        "max": 13045760,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_bin_cs_cmp(_1, 'SDPSFXREV', (cs1, cs2) => cs2.is_proper_suffix_of(cs1))",
        "kind": "simple",
        "prefix": 50959,
        "prefix_str": "C70F"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SDCNTLEAD0": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Returns the number of leading zeroes in `s`.",
        "operands": []
      },
      "layout": {
        "min": 13045760,
        "max": 13046016,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_iun_cs_cmp(_1, 'SDCNTLEAD0', (cs) => cs.count_leading(0))",
        "kind": "simple",
        "prefix": 50960,
        "prefix_str": "C710"
      },
      "signature": {
        "stack_string": "s:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SDCNTLEAD1": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Returns the number of leading ones in `s`.",
        "operands": []
      },
      "layout": {
        "min": 13046016,
        "max": 13046272,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_iun_cs_cmp(_1, 'SDCNTLEAD1', (cs) => cs.count_leading(1))",
        "kind": "simple",
        "prefix": 50961,
        "prefix_str": "C711"
      },
      "signature": {
        "stack_string": "s:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SDCNTTRAIL0": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Returns the number of trailing zeroes in `s`.",
        "operands": []
      },
      "layout": {
        "min": 13046272,
        "max": 13046528,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_iun_cs_cmp(_1, 'SDCNTTRAIL0', (cs) => cs.count_trailing(0))",
        "kind": "simple",
        "prefix": 50962,
        "prefix_str": "C712"
      },
      "signature": {
        "stack_string": "s:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SDCNTTRAIL1": {
      "category": "cell",
      "subCategory": "cell_cmp",
      "description": {
        "short": "",
        "long": "Returns the number of trailing ones in `s`.",
        "operands": []
      },
      "layout": {
        "min": 13046528,
        "max": 13046784,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_iun_cs_cmp(_1, 'SDCNTTRAIL1', (cs) => cs.count_trailing(1))",
        "kind": "simple",
        "prefix": 50963,
        "prefix_str": "C713"
      },
      "signature": {
        "stack_string": "s:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "NEWC": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "Creates a new empty _Builder_.",
        "exit_codes": [],
        "operands": []
      },
      "layout": {
        "min": 13107200,
        "max": 13172736,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_new_builder",
        "kind": "simple",
        "prefix": 200,
        "prefix_str": "C8"
      },
      "signature": {
        "stack_string": "âˆ… -> b:Builder",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "ENDC": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "Converts a _Builder_ into an ordinary _Cell_.",
        "long": "Pops a _Builder_ from the stack and converts it into an ordinary _Cell_.",
        "exit_codes": [],
        "operands": []
      },
      "layout": {
        "min": 13172736,
        "max": 13238272,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_builder_to_cell",
        "kind": "simple",
        "prefix": 201,
        "prefix_str": "C9"
      },
      "effects": [
        {
          "$": "CellCreate",
          "costs": [500]
        }
      ],
      "signature": {
        "stack_string": "b:Builder -> c:Cell",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        }
      }
    },
    "ENDCST": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 13434880,
        "max": 13500416,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_builder_as_ref_rev(_1, false)",
        "kind": "simple",
        "prefix": 205,
        "prefix_str": "CD"
      },
      "effects": [
        {
          "$": "CellCreate",
          "costs": [500]
        }
      ],
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "STBREF": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Equivalent to `SWAP` `STBREFR`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13570304,
        "max": 13570560,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_builder_as_ref(_1, false)",
        "kind": "simple",
        "prefix": 53009,
        "prefix_str": "CF11"
      },
      "effects": [
        {
          "$": "CellCreate",
          "costs": [500]
        }
      ],
      "signature": {
        "stack_string": "child:Builder b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "child",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STB": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Appends all data from _Builder_ `b'` to _Builder_ `b`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13570816,
        "max": 13571072,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_builder(_1, false)",
        "kind": "simple",
        "prefix": 53011,
        "prefix_str": "CF13"
      },
      "signature": {
        "stack_string": "from:Builder to:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "from",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "to",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STREFR": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Equivalent to `SWAP` `STREF`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13571072,
        "max": 13571328,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_ref_rev(_1, false)",
        "kind": "simple",
        "prefix": 53012,
        "prefix_str": "CF14"
      },
      "signature": {
        "stack_string": "b:Builder c:Cell -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STBREFR": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Equivalent to `ENDC` `SWAP` `STREF`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13571328,
        "max": 13571584,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_builder_as_ref_rev(_1, false)",
        "kind": "simple",
        "prefix": 53013,
        "prefix_str": "CF15"
      },
      "signature": {
        "stack_string": "b:Builder child:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "child",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STSLICER": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Equivalent to `SWAP` `STSLICE`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13571584,
        "max": 13571840,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_slice_rev(_1, false)",
        "kind": "simple",
        "prefix": 53014,
        "prefix_str": "CF16"
      },
      "signature": {
        "stack_string": "b:Builder s:Slice -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STBR": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Concatenates two builders.\nEquivalent to `SWAP` `STB`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13571840,
        "max": 13572096,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_builder_rev(_1, false)",
        "kind": "simple",
        "prefix": 53015,
        "prefix_str": "CF17"
      },
      "signature": {
        "stack_string": "to:Builder from:Builder -> b3:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "to",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "from",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b3",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STREFQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Quiet version of `STREF`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13572096,
        "max": 13572352,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_ref(_1, true)",
        "kind": "simple",
        "prefix": 53016,
        "prefix_str": "CF18"
      },
      "signature": {
        "stack_string": "c:Cell b:Builder -> (b2:Builder 0)|(c:Cell b:Builder -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STBREFQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Quiet version of `STBREF`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13572352,
        "max": 13572608,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_builder_as_ref(_1, true)",
        "kind": "simple",
        "prefix": 53017,
        "prefix_str": "CF19"
      },
      "signature": {
        "stack_string": "b2:Builder b:Builder -> (b3:Builder 0)|(b2:Builder b:Builder -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b3",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STSLICEQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Quiet version of `STSLICE`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13572608,
        "max": 13572864,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_slice(_1, true)",
        "kind": "simple",
        "prefix": 53018,
        "prefix_str": "CF1A"
      },
      "signature": {
        "stack_string": "s:Slice b:Builder -> (b2:Builder 0)|(s:Slice b:Builder -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STBQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Quiet version of `STB`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13572864,
        "max": 13573120,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_builder(_1, true)",
        "kind": "simple",
        "prefix": 53019,
        "prefix_str": "CF1B"
      },
      "signature": {
        "stack_string": "b2:Builder b:Builder -> (b3:Builder 0)|(b2:Builder b:Builder -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b3",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STREFRQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Quiet version of `STREFR`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13573120,
        "max": 13573376,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_ref_rev(_1, true)",
        "kind": "simple",
        "prefix": 53020,
        "prefix_str": "CF1C"
      },
      "signature": {
        "stack_string": "b:Builder c:Cell -> (b2:Builder 0)|(b:Builder c:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STBREFRQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Quiet version of `STBREFR`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13573376,
        "max": 13573632,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_builder_as_ref_rev(_1, true)",
        "kind": "simple",
        "prefix": 53021,
        "prefix_str": "CF1D"
      },
      "signature": {
        "stack_string": "b2:Builder b:Builder -> (b3:Builder 0)|(b2:Builder b:Builder -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b3",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STSLICERQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Quiet version of `STSLICER`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13573632,
        "max": 13573888,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_slice_rev(_1, true)",
        "kind": "simple",
        "prefix": 53022,
        "prefix_str": "CF1E"
      },
      "signature": {
        "stack_string": "b:Builder s:Slice -> (b3:Builder 0)|(b:Builder s:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b3",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STBRQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Quiet version of `STBR`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13573888,
        "max": 13574144,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_builder_rev(_1, true)",
        "kind": "simple",
        "prefix": 53023,
        "prefix_str": "CF1F"
      },
      "signature": {
        "stack_string": "b:Builder b2:Builder -> (b3:Builder 0)|(b:Builder b2:Builder -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b3",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ENDXC": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "If `x!=0`, creates a _special_ or _exotic_ cell from _Builder_ `b`.\nThe type of the exotic cell must be stored in the first 8 bits of `b`.\nIf `x=0`, it is equivalent to `ENDC`. Otherwise some validity checks on the data and references of `b` are performed before creating the exotic cell.",
        "operands": []
      },
      "layout": {
        "min": 13574912,
        "max": 13575168,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_builder_to_special_cell",
        "kind": "simple",
        "prefix": 53027,
        "prefix_str": "CF23"
      },
      "effects": [
        {
          "$": "CellCreate",
          "costs": [500]
        }
      ],
      "signature": {
        "stack_string": "b:Builder x:Int -> c:Cell",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        }
      }
    },
    "BDEPTH": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Returns the depth of _Builder_ `b`. If no cell references are stored in `b`, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `b`.",
        "operands": []
      },
      "layout": {
        "min": 13578240,
        "max": 13578496,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_int_builder_func(x, 'BDEPTH', b => b.get_depth())",
        "kind": "simple",
        "prefix": 53040,
        "prefix_str": "CF30"
      },
      "signature": {
        "stack_string": "b:Builder -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BBITS": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Returns the number of data bits already stored in _Builder_ `b`.",
        "operands": []
      },
      "layout": {
        "min": 13578496,
        "max": 13578752,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_int_builder_func(x, 'BBITS', b => b.size())",
        "kind": "simple",
        "prefix": 53041,
        "prefix_str": "CF31"
      },
      "signature": {
        "stack_string": "b:Builder -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BREFS": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Returns the number of cell references already stored in `b`.",
        "operands": []
      },
      "layout": {
        "min": 13578752,
        "max": 13579008,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_int_builder_func(x, 'BREFS', b => b.size_refs())",
        "kind": "simple",
        "prefix": 53042,
        "prefix_str": "CF32"
      },
      "signature": {
        "stack_string": "b:Builder -> y:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BBITREFS": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Returns the numbers of both data bits and cell references in `b`.",
        "operands": []
      },
      "layout": {
        "min": 13579008,
        "max": 13579264,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_2int_builder_func(x, 'BBITSREFS', b => [b.size(), b.size_refs()])",
        "kind": "simple",
        "prefix": 53043,
        "prefix_str": "CF33"
      },
      "signature": {
        "stack_string": "b:Builder -> x:Int y:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BREMBITS": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Returns the number of data bits that can still be stored in `b`.",
        "operands": []
      },
      "layout": {
        "min": 13579520,
        "max": 13579776,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_int_builder_func(x, 'BREMBITS', b => b.remaining_bits())",
        "kind": "simple",
        "prefix": 53045,
        "prefix_str": "CF35"
      },
      "signature": {
        "stack_string": "b:Builder -> x2:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x2",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BREMREFS": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Returns the number of references that can still be stored in `b`.",
        "operands": []
      },
      "layout": {
        "min": 13579776,
        "max": 13580032,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_int_builder_func(x, 'BREMREFS', b => b.remaining_refs())",
        "kind": "simple",
        "prefix": 53046,
        "prefix_str": "CF36"
      },
      "signature": {
        "stack_string": "b:Builder -> y2:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "y2",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BREMBITREFS": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Returns the numbers of both data bits and references that can still be stored in `b`.",
        "operands": []
      },
      "layout": {
        "min": 13580032,
        "max": 13580288,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_2int_builder_func(x, 'BREMBITSREFS', b => [b.remaining_bits(), b.remaining_refs()])",
        "kind": "simple",
        "prefix": 53047,
        "prefix_str": "CF37"
      },
      "signature": {
        "stack_string": "b:Builder -> x2:Int y2:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x2",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y2",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BCHKREFS": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Checks whether `y` references can be stored into `b`, `0 <= y <= 7`.",
        "operands": []
      },
      "layout": {
        "min": 13580800,
        "max": 13581056,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_builder_chk_bits_refs(_1, 2)",
        "kind": "simple",
        "prefix": 53050,
        "prefix_str": "CF3A"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "b:Builder y:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BCHKBITREFS": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Checks whether `x` bits and `y` references can be stored into `b`, `0 <= x <= 1023`, `0 <= y <= 7`.",
        "operands": []
      },
      "layout": {
        "min": 13581056,
        "max": 13581312,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_builder_chk_bits_refs(_1, 3)",
        "kind": "simple",
        "prefix": 53051,
        "prefix_str": "CF3B"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "b:Builder x:Int y:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BCHKREFSQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Checks whether `y` references can be stored into `b`, `0 <= y <= 7`.",
        "operands": []
      },
      "layout": {
        "min": 13581824,
        "max": 13582080,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_builder_chk_bits_refs(_1, 6)",
        "kind": "simple",
        "prefix": 53054,
        "prefix_str": "CF3E"
      },
      "signature": {
        "stack_string": "b:Builder y:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "BCHKBITREFSQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Checks whether `x` bits and `y` references can be stored into `b`, `0 <= x <= 1023`, `0 <= y <= 7`.",
        "operands": []
      },
      "layout": {
        "min": 13582080,
        "max": 13582336,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_builder_chk_bits_refs(_1, 7)",
        "kind": "simple",
        "prefix": 53055,
        "prefix_str": "CF3F"
      },
      "signature": {
        "stack_string": "b:Builder x:Int y:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "STZEROES": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores `n` binary zeroes into _Builder_ `b`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13582336,
        "max": 13582592,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_same(_1, 'STZEROES', 0)",
        "kind": "simple",
        "prefix": 53056,
        "prefix_str": "CF40"
      },
      "signature": {
        "stack_string": "b:Builder n:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STONES": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores `n` binary ones into _Builder_ `b`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13582592,
        "max": 13582848,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_same(_1, 'STONES', 1)",
        "kind": "simple",
        "prefix": 53057,
        "prefix_str": "CF41"
      },
      "signature": {
        "stack_string": "b:Builder n:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STSAME": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores `n` binary `x`es (`0 <= x <= 1`) into _Builder_ `b`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13582848,
        "max": 13583104,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_same(_1, 'STSAME', -1)",
        "kind": "simple",
        "prefix": 53058,
        "prefix_str": "CF42"
      },
      "signature": {
        "stack_string": "b:Builder n:Int x:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "CTOS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "Converts a _Cell_ into a _Slice_.",
        "long": "`c` must be either an ordinary cell, or an exotic cell. If cell is exotic, it is automatically loaded to yield an ordinary cell `c'` and converted into a _Slice_ afterwards.",
        "exit_codes": [],
        "operands": []
      },
      "layout": {
        "min": 13631488,
        "max": 13697024,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_cell_to_slice",
        "kind": "simple",
        "prefix": 208,
        "prefix_str": "D0"
      },
      "effects": [
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "c:Cell -> s:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "ENDS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "Removes a _Slice_ `s` from the stack.",
        "exit_codes": [
          {
            "errno": "9",
            "condition": "Slice is not empty."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 13697024,
        "max": 13762560,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_slice_chk_empty",
        "kind": "simple",
        "prefix": 209,
        "prefix_str": "D1"
      },
      "signature": {
        "stack_string": "s:Slice -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDREF": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads a cell reference `c` from `s`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 13893632,
        "max": 13959168,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_ref(_1, 0)",
        "kind": "simple",
        "prefix": 212,
        "prefix_str": "D4"
      },
      "signature": {
        "stack_string": "s:Slice -> c:Cell s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDREFRTOS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Equivalent to `LDREF` `SWAP` `CTOS`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 13959168,
        "max": 14024704,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_ref_rev_to_slice(_1, 0)",
        "kind": "simple",
        "prefix": 213,
        "prefix_str": "D5"
      },
      "effects": [
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "s:Slice -> s2:Slice s3:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SDCUTFIRST": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the first `0 <= l <= 1023` bits of `s`. It is equivalent to `PLDSLICEX`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14098432,
        "max": 14098688,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_op_args(x, 'SDCUTFIRST', 1023, (cs, bits) => cs.only_first(bits))",
        "kind": "simple",
        "prefix": 55072,
        "prefix_str": "D720"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SDSKIPFIRST": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns all but the first `0 <= l <= 1023` bits of `s`. It is equivalent to `LDSLICEX` `NIP`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14098688,
        "max": 14098944,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_op_args(x, 'SDSKIPFIRST', 1023, (cs, bits) => cs.skip_first(bits))",
        "kind": "simple",
        "prefix": 55073,
        "prefix_str": "D721"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SDCUTLAST": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the last `0 <= l <= 1023` bits of `s`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14098944,
        "max": 14099200,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_op_args(x, 'SDCUTLAST', 1023, (cs, bits) => cs.only_last(bits))",
        "kind": "simple",
        "prefix": 55074,
        "prefix_str": "D722"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SDSKIPLAST": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns all but the last `0 <= l <= 1023` bits of `s`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14099200,
        "max": 14099456,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_op_args(x, 'SDSKIPLAST', 1023, (cs, bits) => cs.skip_last(bits))",
        "kind": "simple",
        "prefix": 55075,
        "prefix_str": "D723"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SDSUBSTR": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns `0 <= l' <= 1023` bits of `s` starting from offset `0 <= l <= 1023`, thus extracting a bit substring out of the data of `s`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14099456,
        "max": 14099712,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_op_args2(x, 'SDSUBSTR', 1023, 1023, (cs, offs, bits) => cs.skip_first(offs) && cs.only_first(bits))",
        "kind": "simple",
        "prefix": 55076,
        "prefix_str": "D724"
      },
      "signature": {
        "stack_string": "s:Slice l:Int l2:Int -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "l2",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SCUTFIRST": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the first `0 <= l <= 1023` bits and first `0 <= r <= 4` references of `s`.",
        "operands": []
      },
      "layout": {
        "min": 14102528,
        "max": 14102784,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_op_args2(x, 'SCUTFIRST', 1023, 4, (cs, bits, refs) => cs.only_first(bits, refs))",
        "kind": "simple",
        "prefix": 55088,
        "prefix_str": "D730"
      },
      "signature": {
        "stack_string": "s:Slice l:Int r:Int -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SSKIPFIRST": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns all but the first `l` bits of `s` and `r` references of `s`.",
        "operands": []
      },
      "layout": {
        "min": 14102784,
        "max": 14103040,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_op_args2(x, 'SSKIPFIRST', 1023, 4, (cs, bits, refs) => cs.skip_first(bits, refs))",
        "kind": "simple",
        "prefix": 55089,
        "prefix_str": "D731"
      },
      "signature": {
        "stack_string": "s:Slice l:Int r:Int -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SCUTLAST": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the last `0 <= l <= 1023` data bits and last `0 <= r <= 4` references of `s`.",
        "operands": []
      },
      "layout": {
        "min": 14103040,
        "max": 14103296,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_op_args2(x, 'SCUTLAST', 1023, 4, (cs, bits, refs) => cs.only_last(bits, refs))",
        "kind": "simple",
        "prefix": 55090,
        "prefix_str": "D732"
      },
      "signature": {
        "stack_string": "s:Slice l:Int r:Int -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SSKIPLAST": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns all but the last `l` bits of `s` and `r` references of `s`.",
        "operands": []
      },
      "layout": {
        "min": 14103296,
        "max": 14103552,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_op_args2(x, 'SSKIPLAST', 1023, 4, (cs, bits, refs) => cs.skip_last(bits, refs))",
        "kind": "simple",
        "prefix": 55091,
        "prefix_str": "D733"
      },
      "signature": {
        "stack_string": "s:Slice l:Int r:Int -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SUBSLICE": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns `0 <= l' <= 1023` bits and `0 <= r' <= 4` references from _Slice_ `s`, after skipping the first `0 <= l <= 1023` bits and first `0 <= r <= 4` references.",
        "operands": []
      },
      "layout": {
        "min": 14103552,
        "max": 14103808,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_subslice",
        "kind": "simple",
        "prefix": 55092,
        "prefix_str": "D734"
      },
      "signature": {
        "stack_string": "s:Slice l:Int r:Int l2:Int r2:Int -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "l2",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r2",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SPLIT": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Splits the first `0 <= l <= 1023` data bits and first `0 <= r <= 4` references from `s` into `s'`, returning the remainder of `s` as `s''`.",
        "operands": []
      },
      "layout": {
        "min": 14104064,
        "max": 14104320,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_split(_1, false)",
        "kind": "simple",
        "prefix": 55094,
        "prefix_str": "D736"
      },
      "signature": {
        "stack_string": "s:Slice l:Int r:Int -> s2:Slice s3:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SPLITQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `SPLIT`.",
        "operands": []
      },
      "layout": {
        "min": 14104320,
        "max": 14104576,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_split(_1, true)",
        "kind": "simple",
        "prefix": 55095,
        "prefix_str": "D737"
      },
      "signature": {
        "stack_string": "s:Slice l:Int r:Int -> (s:Slice 0)|(s2:Slice s3:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "XCTOS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Transforms an ordinary or exotic cell into a _Slice_, as if it were an ordinary cell. A flag is returned indicating whether `c` is exotic. If that be the case, its type can later be deserialized from the first eight bits of `s`.",
        "operands": []
      },
      "layout": {
        "min": 14104832,
        "max": 14105088,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_cell_to_slice_maybe_special",
        "kind": "simple",
        "prefix": 55097,
        "prefix_str": "D739"
      },
      "signature": {
        "stack_string": "c:Cell -> s:Slice flag:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "flag",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "XLOAD": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads an exotic cell `c` and returns an ordinary cell `c'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, throws an exception.",
        "operands": []
      },
      "layout": {
        "min": 14105088,
        "max": 14105344,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_special_cell(_1, false)",
        "kind": "simple",
        "prefix": 55098,
        "prefix_str": "D73A"
      },
      "signature": {
        "stack_string": "c:Cell -> c2:Cell",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Cell"]
            }
          ]
        }
      }
    },
    "XLOADQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads an exotic cell `c` and returns an ordinary cell `c'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, returns 0.",
        "operands": []
      },
      "layout": {
        "min": 14105344,
        "max": 14105600,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_special_cell(_1, true)",
        "kind": "simple",
        "prefix": 55099,
        "prefix_str": "D73B"
      },
      "signature": {
        "stack_string": "c:Cell -> (c:Cell 0)|(c2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SCHKBITS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Checks whether there are at least `l` data bits in _Slice_ `s`. If this is not the case, throws a cell deserialisation (i.e., cell underflow) exception.",
        "operands": []
      },
      "layout": {
        "min": 14106880,
        "max": 14107136,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_chk_op_args(x, 'SCHKBITS', 1023, false, (cs, bits) => cs.have(bits))",
        "kind": "simple",
        "prefix": 55105,
        "prefix_str": "D741"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "s:Slice l:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SCHKREFS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Checks whether there are at least `r` references in _Slice_ `s`.",
        "operands": []
      },
      "layout": {
        "min": 14107136,
        "max": 14107392,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_chk_op_args(x, 'SCHKREFS', 1023, false, (cs, refs) => cs.have_refs(refs))",
        "kind": "simple",
        "prefix": 55106,
        "prefix_str": "D742"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "s:Slice r:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SCHKBITREFS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Checks whether there are at least `l` data bits and `r` references in _Slice_ `s`.",
        "operands": []
      },
      "layout": {
        "min": 14107392,
        "max": 14107648,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_chk_op_args2(x, 'SCHKBITREFS', 1023, 4, false, (cs, bits, refs) => cs.have(bits) && cs.have_refs(refs))",
        "kind": "simple",
        "prefix": 55107,
        "prefix_str": "D743"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "s:Slice l:Int r:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SCHKBITSQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Checks whether there are at least `l` data bits in _Slice_ `s`.",
        "operands": []
      },
      "layout": {
        "min": 14107904,
        "max": 14108160,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_chk_op_args(x, 'SCHKBITSQ', 1023, true, (cs, bits) => cs.have(bits))",
        "kind": "simple",
        "prefix": 55109,
        "prefix_str": "D745"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SCHKREFSQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Checks whether there are at least `r` references in _Slice_ `s`.",
        "operands": []
      },
      "layout": {
        "min": 14108160,
        "max": 14108416,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_chk_op_args(x, 'SCHKREFSQ', 1023, true, (cs, refs) => cs.have_refs(refs))",
        "kind": "simple",
        "prefix": 55110,
        "prefix_str": "D746"
      },
      "signature": {
        "stack_string": "s:Slice r:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SCHKBITREFSQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Checks whether there are at least `l` data bits and `r` references in _Slice_ `s`.",
        "operands": []
      },
      "layout": {
        "min": 14108416,
        "max": 14108672,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "x => exec_slice_chk_op_args2(x, 'SCHKBITREFSQ', 1023, 4, true, (cs, bits, refs) => cs.have(bits) && cs.have_refs(refs))",
        "kind": "simple",
        "prefix": 55111,
        "prefix_str": "D747"
      },
      "signature": {
        "stack_string": "s:Slice l:Int r:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDREFVAR": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the `n`-th cell reference of _Slice_ `s` for `0 <= n <= 3`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14108672,
        "max": 14108928,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_preload_ref",
        "kind": "simple",
        "prefix": 55112,
        "prefix_str": "D748"
      },
      "signature": {
        "stack_string": "s:Slice n:Int -> c:Cell",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        }
      }
    },
    "SBITS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the number of data bits in _Slice_ `s`.",
        "operands": []
      },
      "layout": {
        "min": 14108928,
        "max": 14109184,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_slice_bits_refs(_1, 1)",
        "kind": "simple",
        "prefix": 55113,
        "prefix_str": "D749"
      },
      "signature": {
        "stack_string": "s:Slice -> l:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SREFS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the number of references in _Slice_ `s`.",
        "operands": []
      },
      "layout": {
        "min": 14109184,
        "max": 14109440,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_slice_bits_refs(_compute_len_slice_begins_with_const1, 2)",
        "kind": "simple",
        "prefix": 55114,
        "prefix_str": "D74A"
      },
      "signature": {
        "stack_string": "s:Slice -> r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SBITREFS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns both the number of data bits and the number of references in `s`.",
        "operands": []
      },
      "layout": {
        "min": 14109440,
        "max": 14109696,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_slice_bits_refs(_1, 3)",
        "kind": "simple",
        "prefix": 55115,
        "prefix_str": "D74B"
      },
      "signature": {
        "stack_string": "s:Slice -> l:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDZEROES": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the count `n` of leading zero bits in `s`, and removes these bits from `s`.",
        "operands": []
      },
      "layout": {
        "min": 14114816,
        "max": 14115072,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_same(_1, 'LDZEROES', 0)",
        "kind": "simple",
        "prefix": 55136,
        "prefix_str": "D760"
      },
      "signature": {
        "stack_string": "s:Slice -> n:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDONES": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the count `n` of leading one bits in `s`, and removes these bits from `s`.",
        "operands": []
      },
      "layout": {
        "min": 14115072,
        "max": 14115328,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_same(_1, 'LDONES', 1)",
        "kind": "simple",
        "prefix": 55137,
        "prefix_str": "D761"
      },
      "signature": {
        "stack_string": "s:Slice -> n:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDSAME": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the count `n` of leading bits equal to `0 <= x <= 1` in `s`, and removes these bits from `s`.",
        "operands": []
      },
      "layout": {
        "min": 14115328,
        "max": 14115584,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_same(_1, 'LDSAME', -1)",
        "kind": "simple",
        "prefix": 55138,
        "prefix_str": "D762"
      },
      "signature": {
        "stack_string": "s:Slice x:Int -> n:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SDEPTH": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the depth of _Slice_ `s`. If `s` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `s`.",
        "operands": []
      },
      "layout": {
        "min": 14115840,
        "max": 14116096,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_slice_depth",
        "kind": "simple",
        "prefix": 55140,
        "prefix_str": "D764"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CDEPTH": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the depth of _Cell_ `c`. If `c` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `c`. If `c` is a _Null_ instead of a _Cell_, returns zero.",
        "operands": []
      },
      "layout": {
        "min": 14116096,
        "max": 14116352,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_cell_depth",
        "kind": "simple",
        "prefix": 55141,
        "prefix_str": "D765"
      },
      "signature": {
        "stack_string": "c:Cell -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CLEVEL": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns level of the cell.",
        "operands": []
      },
      "layout": {
        "min": 14116352,
        "max": 14116608,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_cell_level",
        "version": 6,
        "kind": "simple",
        "prefix": 55142,
        "prefix_str": "D766"
      },
      "signature": {
        "stack_string": "cell:Cell -> level:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cell",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "level",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CLEVELMASK": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns level mask of the cell.",
        "operands": []
      },
      "layout": {
        "min": 14116608,
        "max": 14116864,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_cell_level_mask",
        "version": 6,
        "kind": "simple",
        "prefix": 55143,
        "prefix_str": "D767"
      },
      "signature": {
        "stack_string": "cell:Cell -> level_mask:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cell",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "level_mask",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CHASHIX": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns `i`th hash of the cell.",
        "operands": []
      },
      "layout": {
        "min": 14118912,
        "max": 14119168,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": " (_1) => exec_cell_hash_i(_1, 0, true)",
        "version": 6,
        "kind": "simple",
        "prefix": 55152,
        "prefix_str": "D770"
      },
      "signature": {
        "stack_string": "cell:Cell i:Int -> hash:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cell",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "hash",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CDEPTHIX": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns `i`th depth of the cell.",
        "operands": []
      },
      "layout": {
        "min": 14119168,
        "max": 14119424,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": " (_1) => exec_cell_depth_i(_1, 0, true)",
        "version": 6,
        "kind": "simple",
        "prefix": 55153,
        "prefix_str": "D771"
      },
      "signature": {
        "stack_string": "cell:Cell i:Int -> depth:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cell",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "depth",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "EXECUTE": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "_Calls_, or _executes_, continuation `c`.",
        "operands": []
      },
      "layout": {
        "min": 14155776,
        "max": 14221312,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_execute",
        "kind": "simple",
        "prefix": 216,
        "prefix_str": "D8"
      },
      "signature": {
        "stack_string": "c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "JMPX": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "_Jumps_, or transfers control, to continuation `c`.\nThe remainder of the previous current continuation `cc` is discarded.",
        "operands": []
      },
      "layout": {
        "min": 14221312,
        "max": 14286848,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_jmpx",
        "kind": "simple",
        "prefix": 217,
        "prefix_str": "D9"
      },
      "signature": {
        "stack_string": "c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "RET": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "_Returns_ to the continuation at `c0`. The remainder of the current continuation `cc` is discarded.\nApproximately equivalent to `c0 PUSHCTR` `JMPX`.",
        "operands": []
      },
      "layout": {
        "min": 14364672,
        "max": 14364928,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ret",
        "kind": "simple",
        "prefix": 56112,
        "prefix_str": "DB30"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RETALT": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "_Returns_ to the continuation at `c1`.\nApproximately equivalent to `c1 PUSHCTR` `JMPX`.",
        "operands": []
      },
      "layout": {
        "min": 14364928,
        "max": 14365184,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ret_alt",
        "kind": "simple",
        "prefix": 56113,
        "prefix_str": "DB31"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RETBOOL": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 14365184,
        "max": 14365440,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ret_bool",
        "kind": "simple",
        "prefix": 56114,
        "prefix_str": "DB32"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "CALLCC": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "_Call with current continuation_, transfers control to `c`, pushing the old value of `cc` into `c`'s stack (instead of discarding it or writing it into new `c0`).",
        "operands": []
      },
      "layout": {
        "min": 14365696,
        "max": 14365952,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_callcc",
        "kind": "simple",
        "prefix": 56116,
        "prefix_str": "DB34"
      },
      "signature": {
        "stack_string": "c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "JMPXDATA": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Similar to `CALLCC`, but the remainder of the current continuation (the old value of `cc`) is converted into a _Slice_ before pushing it into the stack of `c`.",
        "operands": []
      },
      "layout": {
        "min": 14365952,
        "max": 14366208,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_jmpx_data",
        "kind": "simple",
        "prefix": 56117,
        "prefix_str": "DB35"
      },
      "signature": {
        "stack_string": "c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "CALLXVARARGS": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Similar to `CALLXARGS`, but takes `-1 <= p,r <= 254` from the stack. The next three operations also take `p` and `r` from the stack, both in the range `-1...254`.",
        "operands": []
      },
      "layout": {
        "min": 14366720,
        "max": 14366976,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_callx_varargs",
        "kind": "simple",
        "prefix": 56120,
        "prefix_str": "DB38"
      },
      "signature": {
        "stack_string": "x_1...x_p c:Continuation p:Int r:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "p",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "arg"
                }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "p",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RETVARARGS": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Similar to `RETARGS`.",
        "operands": []
      },
      "layout": {
        "min": 14366976,
        "max": 14367232,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ret_varargs",
        "kind": "simple",
        "prefix": 56121,
        "prefix_str": "DB39"
      },
      "signature": {
        "stack_string": "x_1...x_p p:Int r:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "p",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "arg"
                }
              ]
            },
            {
              "type": "simple",
              "name": "p",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "JMPXVARARGS": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Similar to `JMPXARGS`.",
        "operands": []
      },
      "layout": {
        "min": 14367232,
        "max": 14367488,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_jmpx_varargs",
        "kind": "simple",
        "prefix": 56122,
        "prefix_str": "DB3A"
      },
      "signature": {
        "stack_string": "x_1...x_p c:Continuation p:Int r:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "p",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "arg"
                }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "p",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CALLCCVARARGS": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Similar to `CALLCCARGS`.",
        "operands": []
      },
      "layout": {
        "min": 14367488,
        "max": 14367744,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_callcc_varargs",
        "kind": "simple",
        "prefix": 56123,
        "prefix_str": "DB3B"
      },
      "signature": {
        "stack_string": "x_1...x_p c:Continuation p:Int r:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "p",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "arg"
                }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "p",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RETDATA": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Equivalent to `c0 PUSHCTR` `JMPXDATA`. In this way, the remainder of the current continuation is converted into a _Slice_ and returned to the caller.",
        "operands": []
      },
      "layout": {
        "min": 14368512,
        "max": 14368768,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ret_data",
        "kind": "simple",
        "prefix": 56127,
        "prefix_str": "DB3F"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RUNVMX": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Runs child VM with code `code` and stack `x_1...x_n`. Returns the resulting stack `x'_1...x'_m` and exitcode. Other arguments and return values are enabled by flags.",
        "operands": []
      },
      "layout": {
        "min": 14372864,
        "max": 14373120,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": " exec_runvmx",
        "version": 4,
        "kind": "simple",
        "prefix": 56144,
        "prefix_str": "DB50"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "IFRET": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Performs a `RET`, but only if integer `f` is non-zero. If `f` is a `NaN`, throws an integer overflow exception.",
        "operands": []
      },
      "layout": {
        "min": 14417920,
        "max": 14483456,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ifret",
        "kind": "simple",
        "prefix": 220,
        "prefix_str": "DC"
      },
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IFNOTRET": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Performs a `RET`, but only if integer `f` is zero.",
        "operands": []
      },
      "layout": {
        "min": 14483456,
        "max": 14548992,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ifnotret",
        "kind": "simple",
        "prefix": 221,
        "prefix_str": "DD"
      },
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IF": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Performs `EXECUTE` for `c` (i.e., _executes_ `c`), but only if integer `f` is non-zero. Otherwise simply discards both values.",
        "operands": []
      },
      "layout": {
        "min": 14548992,
        "max": 14614528,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_if",
        "kind": "simple",
        "prefix": 222,
        "prefix_str": "DE"
      },
      "signature": {
        "stack_string": "f:Int c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "IFNOT": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Executes continuation `c`, but only if integer `f` is zero. Otherwise simply discards both values.",
        "operands": []
      },
      "layout": {
        "min": 14614528,
        "max": 14680064,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ifnot",
        "kind": "simple",
        "prefix": 223,
        "prefix_str": "DF"
      },
      "signature": {
        "stack_string": "f:Int c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "IFJMP": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "long": "Transfers control to `c` if `f` is non-zero. The remainder of the current continuation is discarded which means that after `c` completes, control will not return to instruction immediately following the `IFJMP`. Instead, it will return to the instruction immediately following the instruction that started current continuation. If such continuation is not present, the program will exit.",
        "tags": ["control_flow"],
        "examples": [
          {
            "instructions": [
              {
                "instruction": "PUSHCONT [\n  PUSHINT_4 1\n  PUSHINT_4 2\n  ADD\n  // implicit exit from the continuation\n  // and since there is no grand continuation\n  // the program will exit\n]",
                "is_main": true
              },
              {
                "instruction": "PUSHINT 1"
              },
              {
                "instruction": "IFJMP",
                "comment": "Transfers control to the continuation",
                "is_main": true
              },
              {
                "instruction": "PUSHINT_LONG 999",
                "comment": "This will never be executed"
              }
            ],
            "stack": {
              "input": ["Continuation", "1"],
              "output": []
            }
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 14680064,
        "max": 14745600,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_if_jmp",
        "kind": "simple",
        "prefix": 224,
        "prefix_str": "E0"
      },
      "signature": {
        "stack_string": "f:Int c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "IFNOTJMP": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Jumps to `c` (similarly to `JMPX`), but only if `f` is zero.",
        "operands": []
      },
      "layout": {
        "min": 14745600,
        "max": 14811136,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ifnot_jmp",
        "kind": "simple",
        "prefix": 225,
        "prefix_str": "E1"
      },
      "signature": {
        "stack_string": "f:Int c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "IFELSE": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "If integer `f` is non-zero, executes `c`, otherwise executes `c'`. Equivalent to `CONDSELCHK` `EXECUTE`.",
        "operands": []
      },
      "layout": {
        "min": 14811136,
        "max": 14876672,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_if_else",
        "kind": "simple",
        "prefix": 226,
        "prefix_str": "E2"
      },
      "signature": {
        "stack_string": "f:Int true:Continuation false:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "true",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "false",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "CONDSEL": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "If integer `f` is non-zero, returns `x`, otherwise returns `y`. Notice that no type checks are performed on `x` and `y`; as such, it is more like a conditional stack operation. Roughly equivalent to `ROT` `ISZERO` `INC` `ROLLX` `NIP`.",
        "operands": []
      },
      "layout": {
        "min": 14877696,
        "max": 14877952,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_condsel",
        "kind": "simple",
        "prefix": 58116,
        "prefix_str": "E304"
      },
      "signature": {
        "stack_string": "f:Int x:Any y:Any -> result:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "y"
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result"
            }
          ]
        }
      }
    },
    "CONDSELCHK": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Same as `CONDSEL`, but first checks whether `x` and `y` have the same type.",
        "operands": []
      },
      "layout": {
        "min": 14877952,
        "max": 14878208,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_condsel_chk",
        "kind": "simple",
        "prefix": 58117,
        "prefix_str": "E305"
      },
      "signature": {
        "stack_string": "f:Int x:Any y:Any -> result:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "y"
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result"
            }
          ]
        }
      }
    },
    "IFRETALT": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Performs `RETALT` if integer `f!=0`.",
        "operands": []
      },
      "layout": {
        "min": 14878720,
        "max": 14878976,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ifretalt",
        "kind": "simple",
        "prefix": 58120,
        "prefix_str": "E308"
      },
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IFNOTRETALT": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Performs `RETALT` if integer `f=0`.",
        "operands": []
      },
      "layout": {
        "min": 14878976,
        "max": 14879232,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ifnotretalt",
        "kind": "simple",
        "prefix": 58121,
        "prefix_str": "E309"
      },
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "REPEAT": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Executes continuation `c` `n` times, if integer `n` is non-negative. If `n>=2^31` or `n<-2^31`, generates a range check exception.\nNotice that a `RET` inside the code of `c` works as a `continue`, not as a `break`. One should use either alternative (experimental) loops or alternative `RETALT` (along with a `SETEXITALT` before the loop) to `break` out of a loop.",
        "operands": []
      },
      "layout": {
        "min": 14942208,
        "max": 15007744,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_repeat(_1, false)",
        "kind": "simple",
        "prefix": 228,
        "prefix_str": "E4"
      },
      "signature": {
        "stack_string": "n:Int body:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "REPEATEND": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Similar to `REPEAT`, but it is applied to the current continuation `cc`.",
        "operands": []
      },
      "layout": {
        "min": 15007744,
        "max": 15073280,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_repeat_end(_1, false)",
        "kind": "simple",
        "prefix": 229,
        "prefix_str": "E5"
      },
      "signature": {
        "stack_string": "n:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "UNTIL": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Executes continuation `c`, then pops an integer `x` from the resulting stack. If `x` is zero, performs another iteration of this loop. The actual implementation of this primitive involves an extraordinary continuation `ec_until` with its arguments set to the body of the loop (continuation `c`) and the original current continuation `cc`. This extraordinary continuation is then saved into the savelist of `c` as `c.c0` and the modified `c` is then executed. The other loop primitives are implemented similarly with the aid of suitable extraordinary continuations.",
        "operands": []
      },
      "layout": {
        "min": 15073280,
        "max": 15138816,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_until(_1, false)",
        "kind": "simple",
        "prefix": 230,
        "prefix_str": "E6"
      },
      "signature": {
        "stack_string": "body:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "UNTILEND": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Similar to `UNTIL`, but executes the current continuation `cc` in a loop. When the loop exit condition is satisfied, performs a `RET`.",
        "operands": []
      },
      "layout": {
        "min": 15138816,
        "max": 15204352,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_until_end(_1, false)",
        "kind": "simple",
        "prefix": 231,
        "prefix_str": "E7"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "WHILE": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Executes `c'` and pops an integer `x` from the resulting stack. If `x` is zero, exists the loop and transfers control to the original `cc`. If `x` is non-zero, executes `c`, and then begins a new iteration.",
        "operands": []
      },
      "layout": {
        "min": 15204352,
        "max": 15269888,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_while(_1, false)",
        "kind": "simple",
        "prefix": 232,
        "prefix_str": "E8"
      },
      "signature": {
        "stack_string": "cond:Continuation body:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cond",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "WHILEEND": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Similar to `WHILE`, but uses the current continuation `cc` as the loop body.",
        "operands": []
      },
      "layout": {
        "min": 15269888,
        "max": 15335424,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_while_end(_1, false)",
        "kind": "simple",
        "prefix": 233,
        "prefix_str": "E9"
      },
      "signature": {
        "stack_string": "cond:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cond",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "AGAIN": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Similar to `REPEAT`, but executes `c` infinitely many times. A `RET` only begins a new iteration of the infinite loop, which can be exited only by an exception, or a `RETALT` (or an explicit `JMPX`).",
        "operands": []
      },
      "layout": {
        "min": 15335424,
        "max": 15400960,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_again(_1, false)",
        "kind": "simple",
        "prefix": 234,
        "prefix_str": "EA"
      },
      "signature": {
        "stack_string": "body:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "AGAINEND": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Similar to `AGAIN`, but performed with respect to the current continuation `cc`.",
        "operands": []
      },
      "layout": {
        "min": 15400960,
        "max": 15466496,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_again_end(_1, false)",
        "kind": "simple",
        "prefix": 235,
        "prefix_str": "EB"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "REPEATBRK": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Similar to `REPEAT`, but also sets `c1` to the original `cc` after saving the old value of `c1` into the savelist of the original `cc`. In this way `RETALT` could be used to break out of the loop body.",
        "operands": []
      },
      "layout": {
        "min": 14881792,
        "max": 14882048,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_repeat(_1, true)",
        "kind": "simple",
        "prefix": 58132,
        "prefix_str": "E314"
      },
      "signature": {
        "stack_string": "n:Int body:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "REPEATENDBRK": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Similar to `REPEATEND`, but also sets `c1` to the original `c0` after saving the old value of `c1` into the savelist of the original `c0`. Equivalent to `SAMEALTSAVE` `REPEATEND`.",
        "operands": []
      },
      "layout": {
        "min": 14882048,
        "max": 14882304,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_repeat_end(_1, true)",
        "kind": "simple",
        "prefix": 58133,
        "prefix_str": "E315"
      },
      "signature": {
        "stack_string": "n:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "UNTILBRK": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Similar to `UNTIL`, but also modifies `c1` in the same way as `REPEATBRK`.",
        "operands": []
      },
      "layout": {
        "min": 14882304,
        "max": 14882560,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_until(_1, true)",
        "kind": "simple",
        "prefix": 58134,
        "prefix_str": "E316"
      },
      "signature": {
        "stack_string": "body:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "UNTILENDBRK": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Equivalent to `SAMEALTSAVE` `UNTILEND`.",
        "operands": []
      },
      "layout": {
        "min": 14882560,
        "max": 14882816,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_until_end(_1, true)",
        "kind": "simple",
        "prefix": 58135,
        "prefix_str": "E317"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "WHILEBRK": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Similar to `WHILE`, but also modifies `c1` in the same way as `REPEATBRK`.",
        "operands": []
      },
      "layout": {
        "min": 14882816,
        "max": 14883072,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_while(_1, true)",
        "kind": "simple",
        "prefix": 58136,
        "prefix_str": "E318"
      },
      "signature": {
        "stack_string": "cond:Continuation body:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cond",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "WHILEENDBRK": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Equivalent to `SAMEALTSAVE` `WHILEEND`.",
        "operands": []
      },
      "layout": {
        "min": 14883072,
        "max": 14883328,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_while_end(_1, true)",
        "kind": "simple",
        "prefix": 58137,
        "prefix_str": "E319"
      },
      "signature": {
        "stack_string": "c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "AGAINBRK": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Similar to `AGAIN`, but also modifies `c1` in the same way as `REPEATBRK`.",
        "operands": []
      },
      "layout": {
        "min": 14883328,
        "max": 14883584,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_again(_1, true)",
        "kind": "simple",
        "prefix": 58138,
        "prefix_str": "E31A"
      },
      "signature": {
        "stack_string": "body:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "AGAINENDBRK": {
      "category": "continuation",
      "subCategory": "continuation_cond_loop",
      "description": {
        "short": "",
        "long": "Equivalent to `SAMEALTSAVE` `AGAINEND`.",
        "operands": []
      },
      "layout": {
        "min": 14883584,
        "max": 14883840,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_again_end(_1, true)",
        "kind": "simple",
        "prefix": 58139,
        "prefix_str": "E31B"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RETURNVARARGS": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Similar to `RETURNARGS`, but with Integer `0 <= p <= 255` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 15536128,
        "max": 15536384,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_return_varargs",
        "kind": "simple",
        "prefix": 60688,
        "prefix_str": "ED10"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "SETCONTVARARGS": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Similar to `SETCONTARGS`, but with `0 <= r <= 255` and `-1 <= n <= 255` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 15536384,
        "max": 15536640,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_setcont_varargs",
        "kind": "simple",
        "prefix": 60689,
        "prefix_str": "ED11"
      },
      "signature": {
        "stack_string": "x_1...x_r c:Continuation r:Int n:Int -> c2:Continuation",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "r",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "SETNUMVARARGS": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "If `n=-1`, this operation does nothing (`c'=c`).\nOtherwise its action is similar to `[n] SETNUMARGS`, but with `n` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 15536640,
        "max": 15536896,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_setnum_varargs",
        "kind": "simple",
        "prefix": 60690,
        "prefix_str": "ED12"
      },
      "signature": {
        "stack_string": "c:Continuation n:Int -> c2:Continuation",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "n",
              "range": {
                "min": -1,
                "max": 255
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "BLESS": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Transforms a _Slice_ `s` into a simple ordinary continuation `c`, with `c.code=s` and an empty stack and savelist.",
        "operands": []
      },
      "layout": {
        "min": 15539712,
        "max": 15539968,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bless",
        "kind": "simple",
        "prefix": 60702,
        "prefix_str": "ED1E"
      },
      "signature": {
        "stack_string": "s:Slice -> c:Continuation",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "BLESSVARARGS": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Equivalent to `ROT` `BLESS` `ROTREV` `SETCONTVARARGS`.",
        "operands": []
      },
      "layout": {
        "min": 15539968,
        "max": 15540224,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bless_varargs",
        "kind": "simple",
        "prefix": 60703,
        "prefix_str": "ED1F"
      },
      "signature": {
        "stack_string": "x_1...x_r s:Slice r:Int n:Int -> c:Continuation",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "r",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "PUSHCTRX": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Similar to `c[i] PUSHCTR`, but with `i`, `0 <= i <= 255`, taken from the stack.\nNotice that this primitive is one of the few ''exotic'' primitives, which are not polymorphic like stack manipulation primitives, and at the same time do not have well-defined types of parameters and return values, because the type of `x` depends on `i`.",
        "operands": []
      },
      "layout": {
        "min": 15589376,
        "max": 15589632,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_push_ctr_var",
        "kind": "simple",
        "prefix": 60896,
        "prefix_str": "EDE0"
      },
      "signature": {
        "stack_string": "i:Int -> x:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "variable",
              "var_name": "i"
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "POPCTRX": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Similar to `c[i] POPCTR`, but with `0 <= i <= 255` from the stack.",
        "operands": []
      },
      "layout": {
        "min": 15589632,
        "max": 15589888,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_pop_ctr_var",
        "kind": "simple",
        "prefix": 60897,
        "prefix_str": "EDE1"
      },
      "signature": {
        "stack_string": "x:Any i:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "variable",
              "var_name": "i"
            }
          ]
        }
      }
    },
    "SETCONTCTRX": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Similar to `c[i] SETCONTCTR`, but with `0 <= i <= 255` from the stack.",
        "operands": []
      },
      "layout": {
        "min": 15589888,
        "max": 15590144,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_setcont_ctr_var",
        "kind": "simple",
        "prefix": 60898,
        "prefix_str": "EDE2"
      },
      "signature": {
        "stack_string": "x:Any c:Continuation i:Int -> c2:Continuation",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "SETCONTCTRMANYX": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 15590400,
        "max": 15590656,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_setcont_ctr_many_var",
        "version": 9,
        "kind": "simple",
        "prefix": 60900,
        "prefix_str": "EDE4"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "BOOLAND": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 15593472,
        "max": 15593728,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_compos(_1, 1, 'BOOLAND')",
        "kind": "simple",
        "prefix": 60912,
        "prefix_str": "EDF0"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "BOOLOR": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 15593728,
        "max": 15593984,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_compos(_1, 2, 'BOOLOR')",
        "kind": "simple",
        "prefix": 60913,
        "prefix_str": "EDF1"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "COMPOSBOTH": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Computes composition `compose1(compose0(c, c'), c')`, which has the meaning of ''compute boolean circuit `c`, then compute `c'`, regardless of the result of `c`''.",
        "operands": []
      },
      "layout": {
        "min": 15593984,
        "max": 15594240,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_compos(_1, 3, 'COMPOSBOTH')",
        "kind": "simple",
        "prefix": 60914,
        "prefix_str": "EDF2"
      },
      "signature": {
        "stack_string": "c:Continuation c2:Continuation -> c3:Continuation",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Continuation"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c3",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "ATEXIT": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Sets `c0` to `compose0(c, c0)`. In other words, `c` will be executed before exiting current subroutine.",
        "operands": []
      },
      "layout": {
        "min": 15594240,
        "max": 15594496,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_atexit",
        "kind": "simple",
        "prefix": 60915,
        "prefix_str": "EDF3"
      },
      "signature": {
        "stack_string": "c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 0
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 0
            }
          ]
        }
      }
    },
    "ATEXITALT": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Sets `c1` to `compose1(c, c1)`. In other words, `c` will be executed before exiting current subroutine by its alternative return path.",
        "operands": []
      },
      "layout": {
        "min": 15594496,
        "max": 15594752,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_atexit_alt",
        "kind": "simple",
        "prefix": 60916,
        "prefix_str": "EDF4"
      },
      "signature": {
        "stack_string": "c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 1
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 1
            }
          ]
        }
      }
    },
    "SETEXITALT": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Sets `c1` to `compose1(compose0(c, c0), c1)`,\nIn this way, a subsequent `RETALT` will first execute `c`, then transfer control to the original `c0`. This can be used, for instance, to exit from nested loops.",
        "operands": []
      },
      "layout": {
        "min": 15594752,
        "max": 15595008,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_setexit_alt",
        "kind": "simple",
        "prefix": 60917,
        "prefix_str": "EDF5"
      },
      "signature": {
        "stack_string": "c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 0
            },
            {
              "type": "constant",
              "index": 1
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 1
            }
          ]
        }
      }
    },
    "THENRET": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Computes `compose0(c, c0)`.",
        "operands": []
      },
      "layout": {
        "min": 15595008,
        "max": 15595264,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_thenret",
        "kind": "simple",
        "prefix": 60918,
        "prefix_str": "EDF6"
      },
      "signature": {
        "stack_string": "c:Continuation -> c2:Continuation",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 0
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "THENRETALT": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Computes `compose0(c, c1)`",
        "operands": []
      },
      "layout": {
        "min": 15595264,
        "max": 15595520,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_thenret_alt",
        "kind": "simple",
        "prefix": 60919,
        "prefix_str": "EDF7"
      },
      "signature": {
        "stack_string": "c:Continuation -> c2:Continuation",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 1
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "INVERT": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Interchanges `c0` and `c1`.",
        "operands": []
      },
      "layout": {
        "min": 15595520,
        "max": 15595776,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_invert",
        "kind": "simple",
        "prefix": 60920,
        "prefix_str": "EDF8"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 0
            },
            {
              "type": "constant",
              "index": 1
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 0
            },
            {
              "type": "constant",
              "index": 1
            }
          ]
        }
      }
    },
    "BOOLEVAL": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Performs `cc:=compose1(compose0(c, compose0(-1 PUSHINT, cc)), compose0(0 PUSHINT, cc))`. If `c` represents a boolean circuit, the net effect is to evaluate it and push either `-1` or `0` into the stack before continuing.",
        "operands": []
      },
      "layout": {
        "min": 15595776,
        "max": 15596032,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_booleval",
        "kind": "simple",
        "prefix": 60921,
        "prefix_str": "EDF9"
      },
      "signature": {
        "stack_string": "c:Continuation -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "SAMEALT": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Sets `c1` to `c0`. Equivalent to `c0 PUSHCTR` `c1 POPCTR`.",
        "operands": []
      },
      "layout": {
        "min": 15596032,
        "max": 15596288,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_samealt(_1, false)",
        "kind": "simple",
        "prefix": 60922,
        "prefix_str": "EDFA"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 0
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 1
            }
          ]
        }
      }
    },
    "SAMEALTSAVE": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Sets `c1` to `c0`, but first saves the old value of `c1` into the savelist of `c0`.\nEquivalent to `c1 SAVE` `SAMEALT`.",
        "operands": []
      },
      "layout": {
        "min": 15596288,
        "max": 15596544,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_samealt(_1, true)",
        "kind": "simple",
        "prefix": 60923,
        "prefix_str": "EDFB"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 0
            },
            {
              "type": "constant",
              "index": 1
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 0
            },
            {
              "type": "constant",
              "index": 1
            }
          ]
        }
      }
    },
    "TRY": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Sets `c2` to `c'`, first saving the old value of `c2` both into the savelist of `c'` and into the savelist of the current continuation, which is stored into `c.c0` and `c'.c0`. Then runs `c` similarly to `EXECUTE`. If `c` does not throw any exceptions, the original value of `c2` is automatically restored on return from `c`. If an exception occurs, the execution is transferred to `c'`, but the original value of `c2` is restored in the process, so that `c'` can re-throw the exception by `THROWANY` if it cannot handle it by itself.",
        "tags": ["exception_handling", "control_flow"],
        "operands": []
      },
      "layout": {
        "min": 15924992,
        "max": 15925248,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_try(_1, -1)",
        "kind": "simple",
        "prefix": 62207,
        "prefix_str": "F2FF"
      },
      "signature": {
        "stack_string": "body:Continuation handler:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "handler",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "STDICT": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Stores dictionary `D` into _Builder_ `b`, returing the resulting _Builder_ `b'`.\nIn other words, if `D` is a cell, performs `STONE` and `STREF`; if `D` is _Null_, performs `NIP` and `STZERO`; otherwise throws a type checking exception.",
        "operands": []
      },
      "layout": {
        "min": 15990784,
        "max": 15991040,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_dict",
        "kind": "simple",
        "prefix": 62464,
        "prefix_str": "F400"
      },
      "signature": {
        "stack_string": "D:Cell|Null b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "SKIPDICT": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `LDDICT` `NIP`.",
        "operands": []
      },
      "layout": {
        "min": 15991040,
        "max": 15991296,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_skip_dict",
        "kind": "simple",
        "prefix": 62465,
        "prefix_str": "F401"
      },
      "signature": {
        "stack_string": "s:Slice -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDDICTS": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Loads (parses) a (_Slice_-represented) dictionary `s'` from _Slice_ `s`, and returns the remainder of `s` as `s''`.\nThis is a ''split function'' for all `HashmapE(n,X)` dictionary types.",
        "operands": []
      },
      "layout": {
        "min": 15991296,
        "max": 15991552,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_dict_slice(_1, 0)",
        "kind": "simple",
        "prefix": 62466,
        "prefix_str": "F402"
      },
      "signature": {
        "stack_string": "s:Slice -> D:Slice s3:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "PLDDICTS": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Preloads a (_Slice_-represented) dictionary `s'` from _Slice_ `s`.\nApproximately equivalent to `LDDICTS` `DROP`.",
        "operands": []
      },
      "layout": {
        "min": 15991552,
        "max": 15991808,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_dict_slice(_1, 1)",
        "kind": "simple",
        "prefix": 62467,
        "prefix_str": "F403"
      },
      "signature": {
        "stack_string": "s:Slice -> s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDDICT": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Loads (parses) a dictionary `D` from _Slice_ `s`, and returns the remainder of `s` as `s'`. May be applied to dictionaries or to values of arbitrary `(^Y)?` types.",
        "operands": []
      },
      "layout": {
        "min": 15991808,
        "max": 15992064,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_dict(_1, 0)",
        "kind": "simple",
        "prefix": 62468,
        "prefix_str": "F404"
      },
      "signature": {
        "stack_string": "s:Slice -> D:Cell|Null s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "PLDDICT": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Preloads a dictionary `D` from _Slice_ `s`.\nApproximately equivalent to `LDDICT` `DROP`.",
        "operands": []
      },
      "layout": {
        "min": 15992064,
        "max": 15992320,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_dict(_1, 1)",
        "kind": "simple",
        "prefix": 62469,
        "prefix_str": "F405"
      },
      "signature": {
        "stack_string": "s:Slice -> D:Cell|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            }
          ]
        }
      }
    },
    "LDDICTQ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A quiet version of `LDDICT`.",
        "operands": []
      },
      "layout": {
        "min": 15992320,
        "max": 15992576,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_dict(_1, 2)",
        "kind": "simple",
        "prefix": 62470,
        "prefix_str": "F406"
      },
      "signature": {
        "stack_string": "s:Slice -> (s:Int 0)|(D:Cell|Null s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Int"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDDICTQ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A quiet version of `PLDDICT`.",
        "operands": []
      },
      "layout": {
        "min": 15992576,
        "max": 15992832,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_dict(_1, 3)",
        "kind": "simple",
        "prefix": 62471,
        "prefix_str": "F407"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(D:Cell|Null -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell", "Null"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PFXDICTSET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16019456,
        "max": 16019712,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_pfx_dict_set(_1, Set, 'SET')",
        "kind": "simple",
        "prefix": 62576,
        "prefix_str": "F470"
      },
      "signature": {
        "stack_string": "x:Slice k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PFXDICTREPLACE": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16019712,
        "max": 16019968,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_pfx_dict_set(_1, Replace, 'REPLACE')",
        "kind": "simple",
        "prefix": 62577,
        "prefix_str": "F471"
      },
      "signature": {
        "stack_string": "x:Slice k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PFXDICTADD": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16019968,
        "max": 16020224,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_pfx_dict_set(_1, Add, 'ADD')",
        "kind": "simple",
        "prefix": 62578,
        "prefix_str": "F472"
      },
      "signature": {
        "stack_string": "x:Slice k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PFXDICTDEL": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16020224,
        "max": 16020480,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_pfx_dict_delete",
        "kind": "simple",
        "prefix": 62579,
        "prefix_str": "F473"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PFXDICTGETQ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Looks up the unique prefix of _Slice_ `s` present in the prefix code dictionary represented by `Cell^?` `D` and `0 <= n <= 1023`. If found, the prefix of `s` is returned as `s'`, and the corresponding value (also a _Slice_) as `x`. The remainder of `s` is returned as a _Slice_ `s''`. If no prefix of `s` is a key in prefix code dictionary `D`, returns the unchanged `s` and a zero flag to indicate failure.",
        "operands": []
      },
      "layout": {
        "min": 16033792,
        "max": 16034048,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_pfx_dict_get(_1, 0, 'Q')",
        "kind": "simple",
        "prefix": 62632,
        "prefix_str": "F4A8"
      },
      "signature": {
        "stack_string": "s:Slice D:Cell|Null n:Int -> (s:Slice 0)|(s2:Slice x:Slice s3:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PFXDICTGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `PFXDICTGET`, but throws a cell deserialization failure exception on failure.",
        "operands": []
      },
      "layout": {
        "min": 16034048,
        "max": 16034304,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_pfx_dict_get(_1, 1, '')",
        "kind": "simple",
        "prefix": 62633,
        "prefix_str": "F4A9"
      },
      "signature": {
        "stack_string": "s:Slice D:Cell|Null n:Int -> s2:Slice x:Slice s3:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "PFXDICTGETJMP": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `PFXDICTGETQ`, but on success `BLESS`es the value `x` into a _Continuation_ and transfers control to it as if by a `JMPX`. On failure, returns `s` unchanged and continues execution.",
        "operands": []
      },
      "layout": {
        "min": 16034304,
        "max": 16034560,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_pfx_dict_get(_1, 2, 'JMP')",
        "kind": "simple",
        "prefix": 62634,
        "prefix_str": "F4AA"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PFXDICTGETEXEC": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `PFXDICTGETJMP`, but `EXEC`utes the continuation found instead of jumping to it. On failure, throws a cell deserialization exception.",
        "operands": []
      },
      "layout": {
        "min": 16034560,
        "max": 16034816,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_pfx_dict_get(_1, 3, 'EXEC')",
        "kind": "simple",
        "prefix": 62635,
        "prefix_str": "F4AB"
      },
      "signature": {
        "stack_string": "s:Slice D:Cell|Null n:Int -> s2:Slice s3:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "NOP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Does nothing.",
        "operands": []
      },
      "layout": {
        "min": 0,
        "max": 65536,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_nop",
        "kind": "simple",
        "prefix": 0,
        "prefix_str": "0"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "SWAP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 65536,
        "max": 131072,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_swap",
        "kind": "simple",
        "prefix": 1,
        "prefix_str": "1"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DUP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 2097152,
        "max": 2162688,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dup",
        "kind": "simple",
        "prefix": 32,
        "prefix_str": "20"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "OVER": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 2162688,
        "max": 2228224,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_over",
        "kind": "simple",
        "prefix": 33,
        "prefix_str": "21"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DROP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 3145728,
        "max": 3211264,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_drop",
        "kind": "simple",
        "prefix": 48,
        "prefix_str": "30"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "NIP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 3211264,
        "max": 3276800,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_nip",
        "kind": "simple",
        "prefix": 49,
        "prefix_str": "31"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "ROT": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `1 2 BLKSWAP` or to `s2 s1 XCHG2`.",
        "operands": []
      },
      "layout": {
        "min": 5767168,
        "max": 5832704,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_rot",
        "kind": "simple",
        "prefix": 88,
        "prefix_str": "58"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "ROTREV": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `2 1 BLKSWAP` or to `s2 s2 XCHG2`.",
        "operands": []
      },
      "layout": {
        "min": 5832704,
        "max": 5898240,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_rotrev",
        "kind": "simple",
        "prefix": 89,
        "prefix_str": "59"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PICK": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pops integer `i` from the stack, then performs `s[i] PUSH`.",
        "operands": []
      },
      "layout": {
        "min": 6291456,
        "max": 6356992,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_pick",
        "kind": "simple",
        "prefix": 96,
        "prefix_str": "60"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "ROLL": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 6356992,
        "max": 6422528,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_roll",
        "kind": "simple",
        "prefix": 97,
        "prefix_str": "61"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "ROLLREV": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 6422528,
        "max": 6488064,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_rollrev",
        "kind": "simple",
        "prefix": 98,
        "prefix_str": "62"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "BLKSWX": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pops integers `i`,`j` from the stack, then performs `[i] [j] BLKSWAP`.",
        "operands": []
      },
      "layout": {
        "min": 6488064,
        "max": 6553600,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_blkswap_x",
        "kind": "simple",
        "prefix": 99,
        "prefix_str": "63"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "REVX": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pops integers `i`,`j` from the stack, then performs `[i] [j] REVERSE`.",
        "operands": []
      },
      "layout": {
        "min": 6553600,
        "max": 6619136,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_reverse_x",
        "kind": "simple",
        "prefix": 100,
        "prefix_str": "64"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DROPX": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pops integer `i` from the stack, then performs `[i] BLKDROP`.",
        "operands": []
      },
      "layout": {
        "min": 6619136,
        "max": 6684672,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_drop_x",
        "kind": "simple",
        "prefix": 101,
        "prefix_str": "65"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "TUCK": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `SWAP` `OVER` or to `s1 s1 XCPU`.",
        "operands": []
      },
      "layout": {
        "min": 6684672,
        "max": 6750208,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_tuck",
        "kind": "simple",
        "prefix": 102,
        "prefix_str": "66"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "XCHGX": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pops integer `i` from the stack, then performs `s[i] XCHG`.",
        "operands": []
      },
      "layout": {
        "min": 6750208,
        "max": 6815744,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_xchg_x",
        "kind": "simple",
        "prefix": 103,
        "prefix_str": "67"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DEPTH": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pushes the current depth of the stack.",
        "operands": []
      },
      "layout": {
        "min": 6815744,
        "max": 6881280,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_depth",
        "kind": "simple",
        "prefix": 104,
        "prefix_str": "68"
      },
      "signature": {
        "stack_string": "âˆ… -> depth:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "depth",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CHKDEPTH": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pops integer `i` from the stack, then checks whether there are at least `i` elements, generating a stack underflow exception otherwise.",
        "operands": []
      },
      "layout": {
        "min": 6881280,
        "max": 6946816,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_chkdepth",
        "kind": "simple",
        "prefix": 105,
        "prefix_str": "69"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "i:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ONLYTOPX": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pops integer `i` from the stack, then removes all but the top `i` elements.",
        "operands": []
      },
      "layout": {
        "min": 6946816,
        "max": 7012352,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_onlytop_x",
        "kind": "simple",
        "prefix": 106,
        "prefix_str": "6A"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "ONLYX": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pops integer `i` from the stack, then leaves only the bottom `i` elements. Approximately equivalent to `DEPTH` `SWAP` `SUB` `DROPX`.",
        "operands": []
      },
      "layout": {
        "min": 7012352,
        "max": 7077888,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_only_x",
        "kind": "simple",
        "prefix": 107,
        "prefix_str": "6B"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "ACCEPT": {
      "category": "basic_gas",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Sets current gas limit `g_l` to its maximal allowed value `g_m`, and resets the gas credit `g_c` to zero, decreasing the value of `g_r` by `g_c` in the process.\nIn other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves.",
        "doc_links": {
          "accept_message effects": "https://docs.ton.org/develop/smart-contracts/guidelines/accept"
        },
        "operands": []
      },
      "layout": {
        "min": 16252928,
        "max": 16253184,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_accept",
        "kind": "simple",
        "prefix": 63488,
        "prefix_str": "F800"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "special",
              "name": "gas"
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "special",
              "name": "gas"
            }
          ]
        }
      }
    },
    "SETGASLIMIT": {
      "category": "basic_gas",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Sets current gas limit `g_l` to the minimum of `g` and `g_m`, and resets the gas credit `g_c` to zero. If the gas consumed so far (including the present instruction) exceeds the resulting value of `g_l`, an (unhandled) out of gas exception is thrown before setting new gas limits. Notice that `SETGASLIMIT` with an argument `g >= 2^63-1` is equivalent to `ACCEPT`.",
        "operands": []
      },
      "layout": {
        "min": 16253184,
        "max": 16253440,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_set_gas_limit",
        "kind": "simple",
        "prefix": 63489,
        "prefix_str": "F801"
      },
      "signature": {
        "stack_string": "g:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "g",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "special",
              "name": "gas"
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "special",
              "name": "gas"
            }
          ]
        }
      }
    },
    "GASCONSUMED": {
      "category": "basic_gas",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns gas consumed by VM so far (including this instruction) in current Computation Phase.",
        "operands": []
      },
      "layout": {
        "min": 16254720,
        "max": 16254976,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_gas_consumed",
        "version": 4,
        "kind": "simple",
        "prefix": 63495,
        "prefix_str": "F807"
      },
      "signature": {
        "stack_string": "âˆ… -> g_c:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "g_c",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "special",
              "name": "gas"
            }
          ]
        }
      }
    },
    "COMMIT": {
      "category": "basic_gas",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Commits the current state of registers `c4` ('persistent data') and `c5` ('actions') so that the current execution is considered 'successful' with the saved values even if an exception is thrown later.",
        "operands": []
      },
      "layout": {
        "min": 16256768,
        "max": 16257024,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_commit",
        "kind": "simple",
        "prefix": 63503,
        "prefix_str": "F80F"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 4
            },
            {
              "type": "constant",
              "index": 5
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "special",
              "name": "cstate"
            }
          ]
        }
      }
    },
    "NOW": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16261888,
        "max": 16262144,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 3, 'NOW')",
        "kind": "simple",
        "prefix": 63523,
        "prefix_str": "F823"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "BLOCKLT": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16262144,
        "max": 16262400,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 4, 'BLOCKLT')",
        "kind": "simple",
        "prefix": 63524,
        "prefix_str": "F824"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LTIME": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16262400,
        "max": 16262656,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 5, 'LTIME')",
        "kind": "simple",
        "prefix": 63525,
        "prefix_str": "F825"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RANDSEED": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16262656,
        "max": 16262912,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 6, 'RANDSEED')",
        "kind": "simple",
        "prefix": 63526,
        "prefix_str": "F826"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "BALANCE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16262912,
        "max": 16263168,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 7, 'BALANCE')",
        "kind": "simple",
        "prefix": 63527,
        "prefix_str": "F827"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MYADDR": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16263168,
        "max": 16263424,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 8, 'MYADDR')",
        "kind": "simple",
        "prefix": 63528,
        "prefix_str": "F828"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "CONFIGROOT": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16263424,
        "max": 16263680,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 9, 'CONFIGROOT')",
        "kind": "simple",
        "prefix": 63529,
        "prefix_str": "F829"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MYCODE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16263680,
        "max": 16263936,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 10, 'MYCODE')",
        "kind": "simple",
        "prefix": 63530,
        "prefix_str": "F82A"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "INCOMINGVALUE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16263936,
        "max": 16264192,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 11, 'INCOMINGVALUE')",
        "kind": "simple",
        "prefix": 63531,
        "prefix_str": "F82B"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "STORAGEFEES": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16264192,
        "max": 16264448,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 12, 'STORAGEFEES')",
        "kind": "simple",
        "prefix": 63532,
        "prefix_str": "F82C"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PREVBLOCKSINFOTUPLE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16264448,
        "max": 16264704,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 13, 'PREVBLOCKSINFOTUPLE')",
        "kind": "simple",
        "prefix": 63533,
        "prefix_str": "F82D"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "UNPACKEDCONFIGTUPLE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16264704,
        "max": 16264960,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 14, 'UNPACKEDCONFIGTUPLE')",
        "kind": "simple",
        "prefix": 63534,
        "prefix_str": "F82E"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DUEPAYMENT": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16264960,
        "max": 16265216,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_param(_1, 15, 'DUEPAYMENT')",
        "kind": "simple",
        "prefix": 63535,
        "prefix_str": "F82F"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "CONFIGDICT": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns the global configuration dictionary along with its key length (32).\nEquivalent to `CONFIGROOT` `32 PUSHINT`.",
        "operands": []
      },
      "layout": {
        "min": 16265216,
        "max": 16265472,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_config_dict",
        "kind": "simple",
        "prefix": 63536,
        "prefix_str": "F830"
      },
      "signature": {
        "stack_string": "âˆ… -> x:Slice|Null 32",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice", "Null"]
            },
            {
              "type": "const",
              "value": 32,
              "value_type": "Int"
            }
          ]
        }
      }
    },
    "CONFIGPARAM": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns the value of the global configuration parameter with integer index `i` as a _Cell_ `c`, and a flag to indicate success.\nEquivalent to `CONFIGDICT` `DICTIGETREF`.",
        "operands": []
      },
      "layout": {
        "min": 16265728,
        "max": 16265984,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_config_param(_1, false)",
        "kind": "simple",
        "prefix": 63538,
        "prefix_str": "F832"
      },
      "signature": {
        "stack_string": "i:Int -> (âˆ… 0)|(c:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CONFIGOPTPARAM": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns the value of the global configuration parameter with integer index `i` as a _Maybe Cell_ `c^?`.\nEquivalent to `CONFIGDICT` `DICTIGETOPTREF`.",
        "operands": []
      },
      "layout": {
        "min": 16265984,
        "max": 16266240,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_config_param(_1, true)",
        "kind": "simple",
        "prefix": 63539,
        "prefix_str": "F833"
      },
      "signature": {
        "stack_string": "i:Int -> c:Cell|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell", "Null"]
            }
          ]
        }
      }
    },
    "PREVMCBLOCKS": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Retrives `last_mc_blocks` part of PrevBlocksInfo from c7 (parameter 13).",
        "operands": []
      },
      "layout": {
        "min": 16266240,
        "max": 16266241,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_prev_blocks_info(_1, 0, 'PREVMCBLOCKS')",
        "version": 4,
        "kind": "simple",
        "prefix": 16266240,
        "prefix_str": "F83400"
      },
      "signature": {
        "stack_string": "âˆ… -> t:Tuple",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        }
      }
    },
    "PREVKEYBLOCK": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Retrives `prev_key_block` part of PrevBlocksInfo from c7 (parameter 13).",
        "operands": []
      },
      "layout": {
        "min": 16266241,
        "max": 16266242,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_prev_blocks_info(_1, 1, 'PREVKEYBLOCK')",
        "version": 4,
        "kind": "simple",
        "prefix": 16266241,
        "prefix_str": "F83401"
      },
      "signature": {
        "stack_string": "âˆ… -> t:Tuple",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        }
      }
    },
    "PREVMCBLOCKS_100": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Retrives `last_mc_blocks` part of PrevBlocksInfo from c7 (parameter 13).",
        "operands": []
      },
      "layout": {
        "min": 16266242,
        "max": 16266243,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_get_prev_blocks_info(_1, 2, 'PREVMCBLOCKS_100')",
        "version": 9,
        "kind": "simple",
        "prefix": 16266242,
        "prefix_str": "F83402"
      },
      "signature": {
        "stack_string": "âˆ… -> t:Tuple",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        }
      }
    },
    "GLOBALID": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Retrieves `global_id` from 19 network config.",
        "operands": []
      },
      "layout": {
        "min": 16266496,
        "max": 16266752,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_global_id",
        "version": 4,
        "kind": "simple",
        "prefix": 63541,
        "prefix_str": "F835"
      },
      "signature": {
        "stack_string": "âˆ… -> i:Int",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "GETGASFEE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Calculates gas fee (amount in nanotoncoin to be paid) for a transaction which consumed `gas_used` gas units.",
        "operands": []
      },
      "layout": {
        "min": 16266752,
        "max": 16267008,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_gas_fee",
        "version": 6,
        "kind": "simple",
        "prefix": 63542,
        "prefix_str": "F836"
      },
      "signature": {
        "stack_string": "gas_used:Int is_mc:Int -> price:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "gas_used",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "price",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "GETSTORAGEFEE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Calculates storage fees (amount in nanotoncoin to be paid, only current StoragePrices entry is used) for storing a contract of provided size for `seconds`, `bits` and `cells` represent contract state (`code` + `data`).",
        "operands": []
      },
      "layout": {
        "min": 16267008,
        "max": 16267264,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_storage_fee",
        "version": 6,
        "kind": "simple",
        "prefix": 63543,
        "prefix_str": "F837"
      },
      "signature": {
        "stack_string": "cells:Int bits:Int seconds:Int is_mc:Int -> price:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cells",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "bits",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "seconds",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "price",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "GETFORWARDFEE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Calculates amount of nanotoncoin that must be paid to send a message of the specified size.",
        "operands": []
      },
      "layout": {
        "min": 16267264,
        "max": 16267520,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_forward_fee",
        "version": 6,
        "kind": "simple",
        "prefix": 63544,
        "prefix_str": "F838"
      },
      "signature": {
        "stack_string": "cells:Int bits:Int is_mc:Int -> price:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cells",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "bits",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "price",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "GETPRECOMPILEDGAS": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns gas usage for the current contract if it is precompiled, `null` otherwise.",
        "operands": []
      },
      "layout": {
        "min": 16267520,
        "max": 16267776,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_precompiled_gas",
        "version": 6,
        "kind": "simple",
        "prefix": 63545,
        "prefix_str": "F839"
      },
      "signature": {
        "stack_string": "âˆ… -> x:Int",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "GETORIGINALFWDFEE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Calculate `fwd_fee * 2^16 / first_frac`. Can be used to get the original `fwd_fee` of the message.",
        "operands": []
      },
      "layout": {
        "min": 16267776,
        "max": 16268032,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_original_fwd_fee",
        "version": 6,
        "kind": "simple",
        "prefix": 63546,
        "prefix_str": "F83A"
      },
      "signature": {
        "stack_string": "fwd_fee:Int is_mc:Int -> orig_fwd_fee:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "fwd_fee",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "orig_fwd_fee",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "GETGASFEESIMPLE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Same as `GETGASFEE`, but without flat price (just `(gas_used * price) / 2^16)`.",
        "doc_links": {
          "Low-level fees overview": "https://docs.ton.org/develop/howto/fees-low-level"
        },
        "operands": []
      },
      "layout": {
        "min": 16268032,
        "max": 16268288,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_gas_fee_simple",
        "version": 6,
        "kind": "simple",
        "prefix": 63547,
        "prefix_str": "F83B"
      },
      "signature": {
        "stack_string": "gas_used:Int is_mc:Int -> price:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "gas_used",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "price",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "GETFORWARDFEESIMPLE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Same as `GETFORWARDFEE`, but without lump price (just (`bits*bit_price + cells*cell_price) / 2^16`).",
        "doc_links": {
          "Low-level fees overview": "https://docs.ton.org/develop/howto/fees-low-level"
        },
        "operands": []
      },
      "layout": {
        "min": 16268288,
        "max": 16268544,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_forward_fee_simple",
        "version": 6,
        "kind": "simple",
        "prefix": 63548,
        "prefix_str": "F83C"
      },
      "signature": {
        "stack_string": "cells:Int bits:Int is_mc:Int -> price:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cells",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "bits",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "is_mc",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "price",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "GETGLOBVAR": {
      "category": "globals",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns the `k`-th global variable for `0 <= k < 255`.\nEquivalent to `c7 PUSHCTR` `SWAP` `INDEXVARQ`.",
        "operands": []
      },
      "layout": {
        "min": 16269312,
        "max": 16269568,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_global_var",
        "kind": "simple",
        "prefix": 63552,
        "prefix_str": "F840"
      },
      "signature": {
        "stack_string": "k:Int -> x:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "SETGLOBVAR": {
      "category": "globals",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Assigns `x` to the `k`-th global variable for `0 <= k < 255`.\nEquivalent to `c7 PUSHCTR` `ROTREV` `SETINDEXVARQ` `c7 POPCTR`.",
        "operands": []
      },
      "layout": {
        "min": 16277504,
        "max": 16277760,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_set_global_var",
        "kind": "simple",
        "prefix": 63584,
        "prefix_str": "F860"
      },
      "signature": {
        "stack_string": "x:Any k:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        }
      }
    },
    "RANDU256": {
      "category": "prng",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Generates a new pseudo-random unsigned 256-bit _Integer_ `x`. The algorithm is as follows: if `r` is the old value of the random seed, considered as a 32-byte array (by constructing the big-endian representation of an unsigned 256-bit integer), then its `sha512(r)` is computed; the first 32 bytes of this hash are stored as the new value `r'` of the random seed, and the remaining 32 bytes are returned as the next random value `x`.",
        "operands": []
      },
      "layout": {
        "min": 16257024,
        "max": 16257280,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_randu256",
        "kind": "simple",
        "prefix": 63504,
        "prefix_str": "F810"
      },
      "signature": {
        "stack_string": "âˆ… -> x:Int",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        }
      }
    },
    "RAND": {
      "category": "prng",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Generates a new pseudo-random integer `z` in the range `0...y-1` (or `y...-1`, if `y<0`). More precisely, an unsigned random value `x` is generated as in `RAND256U`; then `z:=floor(x*y/2^256)` is computed.\nEquivalent to `RANDU256` `256 MULRSHIFT`.",
        "operands": []
      },
      "layout": {
        "min": 16257280,
        "max": 16257536,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_rand_int",
        "kind": "simple",
        "prefix": 63505,
        "prefix_str": "F811"
      },
      "signature": {
        "stack_string": "y:Int -> z:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        }
      }
    },
    "SETRAND": {
      "category": "prng",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Sets the random seed to unsigned 256-bit _Integer_ `x`.",
        "operands": []
      },
      "layout": {
        "min": 16258048,
        "max": 16258304,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_set_rand(_1, false)",
        "kind": "simple",
        "prefix": 63508,
        "prefix_str": "F814"
      },
      "signature": {
        "stack_string": "x:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        }
      }
    },
    "ADDRAND": {
      "category": "prng",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Mixes unsigned 256-bit _Integer_ `x` into the random seed `r` by setting the random seed to `Sha` of the concatenation of two 32-byte strings: the first with the big-endian representation of the old seed `r`, and the second with the big-endian representation of `x`.",
        "operands": []
      },
      "layout": {
        "min": 16258304,
        "max": 16258560,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_set_rand(_1, true)",
        "kind": "simple",
        "prefix": 63509,
        "prefix_str": "F815"
      },
      "signature": {
        "stack_string": "x:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        }
      }
    },
    "HASHCU": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": "Computes the representation hash of a _Cell_ `c` and returns it as a 256-bit unsigned integer `x`. Useful for signing and checking signatures of arbitrary entities represented by a tree of cells.",
        "operands": []
      },
      "layout": {
        "min": 16318464,
        "max": 16318720,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_compute_hash(_1, 0)",
        "kind": "simple",
        "prefix": 63744,
        "prefix_str": "F900"
      },
      "signature": {
        "stack_string": "c:Cell -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "HASHSU": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": "Computes the hash of a _Slice_ `s` and returns it as a 256-bit unsigned integer `x`. The result is the same as if an ordinary cell containing only data and references from `s` had been created and its hash computed by `HASHCU`.",
        "operands": []
      },
      "layout": {
        "min": 16318720,
        "max": 16318976,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_compute_hash(_1, 1)",
        "kind": "simple",
        "prefix": 63745,
        "prefix_str": "F901"
      },
      "effects": [
        {
          "$": "CellCreate",
          "costs": [500]
        }
      ],
      "signature": {
        "stack_string": "s:Slice -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SHA256U": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": "Computes `Sha` of the data bits of _Slice_ `s`. If the bit length of `s` is not divisible by eight, throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`.",
        "operands": []
      },
      "layout": {
        "min": 16318976,
        "max": 16319232,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_compute_sha256",
        "kind": "simple",
        "prefix": 63746,
        "prefix_str": "F902"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CHKSIGNU": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": "Checks the Ed25519-signature `s` of a hash `h` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key `k` (also represented by a 256-bit unsigned integer).\nThe signature `s` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is `-1` if the signature is valid, `0` otherwise.\nNotice that `CHKSIGNU` is equivalent to `ROT` `NEWC` `256 STU` `ENDC` `ROTREV` `CHKSIGNS`, i.e., to `CHKSIGNS` with the first argument `d` set to 256-bit _Slice_ containing `h`. Therefore, if `h` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside `CHKSIGNS`.",
        "operands": []
      },
      "layout": {
        "min": 16322560,
        "max": 16322816,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ed25519_check_signature(_1, false)",
        "kind": "simple",
        "prefix": 63760,
        "prefix_str": "F910"
      },
      "signature": {
        "stack_string": "h:Int s:Slice k:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "h",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "CHKSIGNS": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": "Checks whether `s` is a valid Ed25519-signature of the data portion of _Slice_ `d` using public key `k`, similarly to `CHKSIGNU`. If the bit length of _Slice_ `d` is not divisible by eight, throws a cell underflow exception. The verification of Ed25519 signatures is the standard one, with `Sha` used to reduce `d` to the 256-bit number that is actually signed.",
        "operands": []
      },
      "layout": {
        "min": 16322816,
        "max": 16323072,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ed25519_check_signature(_1, true)",
        "kind": "simple",
        "prefix": 63761,
        "prefix_str": "F911"
      },
      "signature": {
        "stack_string": "d:Slice s:Slice k:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "d",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "ECRECOVER": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": "Recovers public key from signature, identical to Bitcoin/Ethereum operations. Takes 32-byte hash as uint256 `hash`; 65-byte signature as uint8 `v` and uint256 `r`, `s`. Returns `0` on failure, public key and `-1` on success. 65-byte public key is returned as uint8 `h`, uint256 `x1`, `x2`.",
        "operands": []
      },
      "layout": {
        "min": 16323072,
        "max": 16323328,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ecrecover",
        "version": 4,
        "kind": "simple",
        "prefix": 63762,
        "prefix_str": "F912"
      },
      "signature": {
        "stack_string": "hash:Int v:Int r:Int s:Int -> (âˆ… 0)|(h:Int x1:Int x2:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "hash",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "v",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "h",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "x1",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SECP256K1_XONLY_PUBKEY_TWEAK_ADD": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16323328,
        "max": 16323584,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_secp256k1_xonly_pubkey_tweak_add",
        "version": 9,
        "kind": "simple",
        "prefix": 63763,
        "prefix_str": "F913"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "P256_CHKSIGNU": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": "Checks seck256r1-signature `sig` of a number `h` (a 256-bit unsigned integer, usually computed as the hash of some data) and public key `k`. Returns -1 on success, 0 on failure. Public key is a 33-byte slice (encoded according to Sec. 2.3.4 point 2 of [SECG SEC 1](https://www.secg.org/sec1-v2.pdf)). Signature `sig` is a 64-byte slice (two 256-bit unsigned integers `r` and `s`).",
        "operands": []
      },
      "layout": {
        "min": 16323584,
        "max": 16323840,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_p256_chksign(_1, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 63764,
        "prefix_str": "F914"
      },
      "signature": {
        "stack_string": "d:Slice sig:Slice k:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "d",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "sig",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "P256_CHKSIGNS": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": "Checks seck256r1-signature `sig` of data portion of slice `d` and public key `k`. Returns -1 on success, 0 on failure. Public key is a 33-byte slice (encoded according to Sec. 2.3.4 point 2 of [SECG SEC 1](https://www.secg.org/sec1-v2.pdf)). Signature `sig` is a 64-byte slice (two 256-bit unsigned integers `r` and `s`).",
        "operands": []
      },
      "layout": {
        "min": 16323840,
        "max": 16324096,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_p256_chksign(_1, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 63765,
        "prefix_str": "F915"
      },
      "signature": {
        "stack_string": "d:Slice sig:Slice k:Slice -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "d",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "sig",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "RIST255_FROMHASH": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Deterministically generates a valid point `x` from a 512-bit hash (given as two 256-bit integers).",
        "operands": []
      },
      "layout": {
        "min": 16326656,
        "max": 16326912,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ristretto255_from_hash",
        "version": 4,
        "kind": "simple",
        "prefix": 63776,
        "prefix_str": "F920"
      },
      "signature": {
        "stack_string": "h1:Int h2:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "h1",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "h2",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_VALIDATE": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Checks that integer `x` is a valid representation of some curve point. Throws range_chk on error.",
        "operands": []
      },
      "layout": {
        "min": 16326912,
        "max": 16327168,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ristretto255_validate(_1, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 63777,
        "prefix_str": "F921"
      },
      "signature": {
        "stack_string": "x:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_ADD": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Addition of two points on a curve.",
        "operands": []
      },
      "layout": {
        "min": 16327168,
        "max": 16327424,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ristretto255_add(_1, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 63778,
        "prefix_str": "F922"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_SUB": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Subtraction of two points on curve.",
        "operands": []
      },
      "layout": {
        "min": 16327424,
        "max": 16327680,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ristretto255_sub(_1, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 63779,
        "prefix_str": "F923"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_MUL": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Multiplies point `x` by a scalar `n`. Any `n` is valid, including negative.",
        "operands": []
      },
      "layout": {
        "min": 16327680,
        "max": 16327936,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ristretto255_mul(_1, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 63780,
        "prefix_str": "F924"
      },
      "signature": {
        "stack_string": "x:Int n:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_MULBASE": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Multiplies the generator point `g` by a scalar `n`. Any `n` is valid, including negative.",
        "operands": []
      },
      "layout": {
        "min": 16327936,
        "max": 16328192,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ristretto255_mul_base(_1, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 63781,
        "prefix_str": "F925"
      },
      "signature": {
        "stack_string": "n:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_PUSHL": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Pushes integer l=2^252+27742317777372353535851937790883648493, which is the order of the group.",
        "operands": []
      },
      "layout": {
        "min": 16328192,
        "max": 16328448,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_ristretto255_push_l",
        "version": 4,
        "kind": "simple",
        "prefix": 63782,
        "prefix_str": "F926"
      },
      "signature": {
        "stack_string": "âˆ… -> result:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_QVALIDATE": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Checks that integer `x` is a valid representation of some curve point. Returns -1 on success and 0 on failure.",
        "operands": []
      },
      "layout": {
        "min": 12056865,
        "max": 12056866,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ristretto255_validate(_1, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12056865,
        "prefix_str": "B7F921"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_QADD": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Addition of two points on a curve. Returns -1 on success and 0 on failure.",
        "operands": []
      },
      "layout": {
        "min": 12056866,
        "max": 12056867,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ristretto255_add(_1, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12056866,
        "prefix_str": "B7F922"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> (âˆ… 0)|(result:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "result",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_QSUB": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Subtraction of two points on curve. Returns -1 on success and 0 on failure.",
        "operands": []
      },
      "layout": {
        "min": 12056867,
        "max": 12056868,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ristretto255_sub(_1, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12056867,
        "prefix_str": "B7F923"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> (âˆ… 0)|(result:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "result",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_QMUL": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Multiplies point `x` by a scalar `n`. Any `n` is valid, including negative. Returns -1 on success and 0 on failure.",
        "operands": []
      },
      "layout": {
        "min": 12056868,
        "max": 12056869,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ristretto255_mul(_1, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12056868,
        "prefix_str": "B7F924"
      },
      "signature": {
        "stack_string": "x:Int n:Int -> (âˆ… 0)|(result:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "result",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RIST255_QMULBASE": {
      "category": "crypto",
      "subCategory": "crypto_rist255",
      "description": {
        "short": "",
        "long": "Multiplies the generator point `g` by a scalar `n`. Any `n` is valid, including negative.",
        "operands": []
      },
      "layout": {
        "min": 12056869,
        "max": 12056870,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_ristretto255_mul_base(_1, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12056869,
        "prefix_str": "B7F925"
      },
      "signature": {
        "stack_string": "n:Int -> (âˆ… 0)|(result:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "result",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BLS_VERIFY": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Checks BLS signature, return true on success, false otherwise.",
        "operands": []
      },
      "layout": {
        "min": 16330752,
        "max": 16330753,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_verify",
        "version": 4,
        "kind": "simple",
        "prefix": 16330752,
        "prefix_str": "F93000"
      },
      "signature": {
        "stack_string": "pk:Slice msg:Slice sgn:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "pk",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "msg",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "sgn",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BLS_AGGREGATE": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Aggregates signatures. `n>0`. Throw exception if `n=0` or if some `sig_i` is not a valid signature.",
        "operands": []
      },
      "layout": {
        "min": 16330753,
        "max": 16330754,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_aggregate",
        "version": 4,
        "kind": "simple",
        "prefix": 16330753,
        "prefix_str": "F93001"
      },
      "signature": {
        "stack_string": "x_1...x_n n:Int -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "signatures",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "sig",
                  "value_types": ["Slice"]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_FASTAGGREGATEVERIFY": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Checks aggregated BLS signature for keys `pk_1...pk_n` and message `msg`. Return true on success, false otherwise. Return false if `n=0`.",
        "operands": []
      },
      "layout": {
        "min": 16330754,
        "max": 16330755,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_fast_aggregate_verify",
        "version": 4,
        "kind": "simple",
        "prefix": 16330754,
        "prefix_str": "F93002"
      },
      "signature": {
        "stack_string": "x_1...x_n n:Int msg:Slice sig:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "public_keys",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "pk",
                  "value_types": ["Slice"]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "msg",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "sig",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BLS_AGGREGATEVERIFY": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Checks aggregated BLS signature for key-message pairs `pk_1 msg_1...pk_n msg_n`. Return true on success, false otherwise. Return false if `n=0`.",
        "operands": []
      },
      "layout": {
        "min": 16330755,
        "max": 16330756,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_aggregate_verify",
        "version": 4,
        "kind": "simple",
        "prefix": 16330755,
        "prefix_str": "F93003"
      },
      "signature": {
        "stack_string": "x_1...x_n n:Int sgn:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "key_message_pairs",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "pk",
                  "value_types": ["Slice"]
                },
                {
                  "type": "simple",
                  "name": "msg",
                  "value_types": ["Slice"]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "sgn",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BLS_G1_ADD": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Addition on G1.",
        "operands": []
      },
      "layout": {
        "min": 16330768,
        "max": 16330769,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g1_add",
        "version": 4,
        "kind": "simple",
        "prefix": 16330768,
        "prefix_str": "F93010"
      },
      "signature": {
        "stack_string": "x:Slice y:Slice -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G1_SUB": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Subtraction on G1.",
        "operands": []
      },
      "layout": {
        "min": 16330769,
        "max": 16330770,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g1_sub",
        "version": 4,
        "kind": "simple",
        "prefix": 16330769,
        "prefix_str": "F93011"
      },
      "signature": {
        "stack_string": "x:Slice y:Slice -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G1_NEG": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Negation on G1.",
        "operands": []
      },
      "layout": {
        "min": 16330770,
        "max": 16330771,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g1_neg",
        "version": 4,
        "kind": "simple",
        "prefix": 16330770,
        "prefix_str": "F93012"
      },
      "signature": {
        "stack_string": "x:Slice -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G1_MUL": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Multiplies G1 point `x` by scalar `s`. Any `s` is valid, including negative.",
        "operands": []
      },
      "layout": {
        "min": 16330771,
        "max": 16330772,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g1_mul",
        "version": 4,
        "kind": "simple",
        "prefix": 16330771,
        "prefix_str": "F93013"
      },
      "signature": {
        "stack_string": "x:Slice s:Int -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G1_MULTIEXP": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Calculates `x_1*s_1+...+x_n*s_n` for G1 points `x_i` and scalars `s_i`. Returns zero point if `n=0`. Any `s_i` is valid, including negative.",
        "operands": []
      },
      "layout": {
        "min": 16330772,
        "max": 16330773,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g1_multiexp",
        "version": 4,
        "kind": "simple",
        "prefix": 16330772,
        "prefix_str": "F93014"
      },
      "signature": {
        "stack_string": "x_1...x_n n:Int -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "components",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x",
                  "value_types": ["Slice"]
                },
                {
                  "type": "simple",
                  "name": "s",
                  "value_types": ["Int"]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G1_ZERO": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Pushes zero point in G1.",
        "operands": []
      },
      "layout": {
        "min": 16330773,
        "max": 16330774,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g1_zero",
        "version": 4,
        "kind": "simple",
        "prefix": 16330773,
        "prefix_str": "F93015"
      },
      "signature": {
        "stack_string": "âˆ… -> zero:Slice",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "zero",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_MAP_TO_G1": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Converts FP element `f` to a G1 point.",
        "operands": []
      },
      "layout": {
        "min": 16330774,
        "max": 16330775,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_map_to_g1",
        "version": 4,
        "kind": "simple",
        "prefix": 16330774,
        "prefix_str": "F93016"
      },
      "signature": {
        "stack_string": "f:Slice -> x:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G1_INGROUP": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Checks that slice `x` represents a valid element of G1.",
        "operands": []
      },
      "layout": {
        "min": 16330775,
        "max": 16330776,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g1_in_group",
        "version": 4,
        "kind": "simple",
        "prefix": 16330775,
        "prefix_str": "F93017"
      },
      "signature": {
        "stack_string": "x:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BLS_G1_ISZERO": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Checks that G1 point `x` is equal to zero.",
        "operands": []
      },
      "layout": {
        "min": 16330776,
        "max": 16330777,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g1_is_zero",
        "version": 4,
        "kind": "simple",
        "prefix": 16330776,
        "prefix_str": "F93018"
      },
      "signature": {
        "stack_string": "x:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BLS_G2_ADD": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Addition on G2.",
        "operands": []
      },
      "layout": {
        "min": 16330784,
        "max": 16330785,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g2_add",
        "version": 4,
        "kind": "simple",
        "prefix": 16330784,
        "prefix_str": "F93020"
      },
      "signature": {
        "stack_string": "x:Slice y:Slice -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G2_SUB": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Subtraction on G2.",
        "operands": []
      },
      "layout": {
        "min": 16330785,
        "max": 16330786,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g2_sub",
        "version": 4,
        "kind": "simple",
        "prefix": 16330785,
        "prefix_str": "F93021"
      },
      "signature": {
        "stack_string": "x:Slice y:Slice -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G2_NEG": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Negation on G2.",
        "operands": []
      },
      "layout": {
        "min": 16330786,
        "max": 16330787,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g2_neg",
        "version": 4,
        "kind": "simple",
        "prefix": 16330786,
        "prefix_str": "F93022"
      },
      "signature": {
        "stack_string": "x:Slice -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G2_MUL": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Multiplies G2 point `x` by scalar `s`. Any `s` is valid, including negative.",
        "operands": []
      },
      "layout": {
        "min": 16330787,
        "max": 16330788,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g2_mul",
        "version": 4,
        "kind": "simple",
        "prefix": 16330787,
        "prefix_str": "F93023"
      },
      "signature": {
        "stack_string": "x:Slice s:Int -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G2_MULTIEXP": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Calculates `x_1*s_1+...+x_n*s_n` for G2 points `x_i` and scalars `s_i`. Returns zero point if `n=0`. Any `s_i` is valid, including negative.",
        "operands": []
      },
      "layout": {
        "min": 16330788,
        "max": 16330789,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g2_multiexp",
        "version": 4,
        "kind": "simple",
        "prefix": 16330788,
        "prefix_str": "F93024"
      },
      "signature": {
        "stack_string": "x_1...x_n n:Int -> result:Slice",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "components",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x",
                  "value_types": ["Slice"]
                },
                {
                  "type": "simple",
                  "name": "s",
                  "value_types": ["Int"]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G2_ZERO": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Pushes zero point in G2.",
        "operands": []
      },
      "layout": {
        "min": 16330789,
        "max": 16330790,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g2_zero",
        "version": 4,
        "kind": "simple",
        "prefix": 16330789,
        "prefix_str": "F93025"
      },
      "signature": {
        "stack_string": "âˆ… -> zero:Slice",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "zero",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_MAP_TO_G2": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Converts FP2 element `f` to a G2 point.",
        "operands": []
      },
      "layout": {
        "min": 16330790,
        "max": 16330791,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_map_to_g2",
        "version": 4,
        "kind": "simple",
        "prefix": 16330790,
        "prefix_str": "F93026"
      },
      "signature": {
        "stack_string": "f:Slice -> x:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "BLS_G2_INGROUP": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Checks that slice `x` represents a valid element of G2.",
        "operands": []
      },
      "layout": {
        "min": 16330791,
        "max": 16330792,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g2_in_group",
        "version": 4,
        "kind": "simple",
        "prefix": 16330791,
        "prefix_str": "F93027"
      },
      "signature": {
        "stack_string": "x:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BLS_G2_ISZERO": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Checks that G2 point `x` is equal to zero.",
        "operands": []
      },
      "layout": {
        "min": 16330792,
        "max": 16330793,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_g2_is_zero",
        "version": 4,
        "kind": "simple",
        "prefix": 16330792,
        "prefix_str": "F93028"
      },
      "signature": {
        "stack_string": "x:Slice -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BLS_PAIRING": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Given G1 points `x_i` and G2 points `y_i`, calculates and multiply pairings of `x_i,y_i`. Returns true if the result is the multiplicative identity in FP12, false otherwise. Returns false if `n=0`.",
        "operands": []
      },
      "layout": {
        "min": 16330800,
        "max": 16330801,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_pairing",
        "version": 4,
        "kind": "simple",
        "prefix": 16330800,
        "prefix_str": "F93030"
      },
      "signature": {
        "stack_string": "x_1...x_n n:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "components",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x",
                  "value_types": ["Slice"]
                },
                {
                  "type": "simple",
                  "name": "y",
                  "value_types": ["Slice"]
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BLS_PUSHR": {
      "category": "crypto",
      "subCategory": "crypto_bls",
      "description": {
        "short": "",
        "long": "Pushes the order of G1 and G2 (approx. `2^255`).",
        "operands": []
      },
      "layout": {
        "min": 16330801,
        "max": 16330802,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_bls_push_r",
        "version": 4,
        "kind": "simple",
        "prefix": 16330801,
        "prefix_str": "F93031"
      },
      "signature": {
        "stack_string": "âˆ… -> result:Int",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "special",
              "name": "r"
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CDATASIZEQ": {
      "category": "misc",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Recursively computes the count of distinct cells `x`, data bits `y`, and cell references `z` in the dag rooted at _Cell_ `c`, effectively returning the total storage used by this dag taking into account the identification of equal cells. The values of `x`, `y`, and `z` are computed by a depth-first traversal of this dag, with a hash table of visited cell hashes used to prevent visits of already-visited cells. The total count of visited cells `x` cannot exceed non-negative _Integer_ `n`; otherwise the computation is aborted before visiting the `(n+1)`-st cell and a zero is returned to indicate failure. If `c` is _Null_, returns `x=y=z=0`.",
        "operands": []
      },
      "layout": {
        "min": 16334848,
        "max": 16335104,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_compute_data_size(_1, 1)",
        "kind": "simple",
        "prefix": 63808,
        "prefix_str": "F940"
      },
      "signature": {
        "stack_string": "c:Cell n:Int -> (âˆ… 0)|(x:Int y:Int z:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "z",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CDATASIZE": {
      "category": "misc",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A non-quiet version of `CDATASIZEQ` that throws a cell overflow exception (8) on failure.",
        "operands": []
      },
      "layout": {
        "min": 16335104,
        "max": 16335360,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_compute_data_size(_1, 0)",
        "kind": "simple",
        "prefix": 63809,
        "prefix_str": "F941"
      },
      "signature": {
        "stack_string": "c:Cell n:Int -> x:Int y:Int z:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SDATASIZEQ": {
      "category": "misc",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `CDATASIZEQ`, but accepting a _Slice_ `s` instead of a _Cell_. The returned value of `x` does not take into account the cell that contains the slice `s` itself; however, the data bits and the cell references of `s` are accounted for in `y` and `z`.",
        "operands": []
      },
      "layout": {
        "min": 16335360,
        "max": 16335616,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_compute_data_size(_1, 3)",
        "kind": "simple",
        "prefix": 63810,
        "prefix_str": "F942"
      },
      "signature": {
        "stack_string": "s:Slice n:Int -> (âˆ… 0)|(x:Int y:Int z:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "z",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SDATASIZE": {
      "category": "misc",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A non-quiet version of `SDATASIZEQ` that throws a cell overflow exception (8) on failure.",
        "operands": []
      },
      "layout": {
        "min": 16335616,
        "max": 16335872,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_compute_data_size(_1, 2)",
        "kind": "simple",
        "prefix": 63811,
        "prefix_str": "F943"
      },
      "signature": {
        "stack_string": "s:Slice n:Int -> x:Int y:Int z:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDGRAMS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads (deserializes) a `Gram` or `VarUInteger 16` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s'` of `s`. The expected serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, followed by an `8l`-bit unsigned big-endian representation of `x`.\nThe net effect is approximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDUX`.",
        "tags": ["variable-size integer", "slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 16384000,
        "max": 16384256,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_var_integer(_1, 4, false, false)",
        "kind": "simple",
        "prefix": 64000,
        "prefix_str": "FA00"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDVARINT16": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Similar to `LDVARUINT16`, but loads a _signed_ _Integer_ `x`.\nApproximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDIX`.",
        "tags": ["variable-size integer", "slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 16384256,
        "max": 16384512,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_var_integer(_1, 4, true, false)",
        "kind": "simple",
        "prefix": 64001,
        "prefix_str": "FA01"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "STGRAMS": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores (serializes) an _Integer_ `x` in the range `0...2^120-1` into _Builder_ `b`, and returns the resulting _Builder_ `b'`. The serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, which is the smallest integer `l>=0`, such that `x<2^(8l)`, followed by an `8l`-bit unsigned big-endian representation of `x`. If `x` does not belong to the supported range, a range check exception is thrown.",
        "tags": ["variable-size integer", "builder building"],
        "operands": []
      },
      "layout": {
        "min": 16384512,
        "max": 16384768,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_var_integer(_1, 4, false, false)",
        "kind": "simple",
        "prefix": 64002,
        "prefix_str": "FA02"
      },
      "signature": {
        "stack_string": "b:Builder x:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STVARINT16": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Similar to `STVARUINT16`, but serializes a _signed_ _Integer_ `x` in the range `-2^119...2^119-1`.",
        "tags": ["variable-size integer", "builder building"],
        "operands": []
      },
      "layout": {
        "min": 16384768,
        "max": 16385024,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_var_integer(_1, 4, true, false)",
        "kind": "simple",
        "prefix": 64003,
        "prefix_str": "FA03"
      },
      "signature": {
        "stack_string": "b:Builder x:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "LDVARUINT32": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads (deserializes) a `VarUInteger 32` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s'` of `s`. The expected serialization of `x` consists of a 5-bit unsigned big-endian integer `l`, followed by an `8l`-bit unsigned big-endian representation of `x`.\nThe net effect is approximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDUX`.",
        "tags": ["variable-size integer", "slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 16385024,
        "max": 16385280,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_var_integer(_1, 5, false, false)",
        "kind": "simple",
        "prefix": 64004,
        "prefix_str": "FA04"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDVARINT32": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Similar to `LDVARUINT32`, but loads a _signed_ _Integer_ `x`.\nApproximately equivalent to `5 LDU` `SWAP` `3 LSHIFT#` `LDIX`.",
        "tags": ["variable-size integer", "slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 16385280,
        "max": 16385536,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_var_integer(_1, 5, true, false)",
        "kind": "simple",
        "prefix": 64005,
        "prefix_str": "FA05"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "STVARUINT32": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores (serializes) an _Integer_ `x` in the range `0...2^248-1` into _Builder_ `b`, and returns the resulting _Builder_ `b'`. The serialization of `x` consists of a 5-bit unsigned big-endian integer `l`, which is the smallest integer `l>=0`, such that `x<2^(8l)`, followed by an `8l`-bit unsigned big-endian representation of `x`. If `x` does not belong to the supported range, a range check exception is thrown.",
        "tags": ["variable-size integer", "builder building"],
        "operands": []
      },
      "layout": {
        "min": 16385536,
        "max": 16385792,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_var_integer(_1, 5, false, false)",
        "kind": "simple",
        "prefix": 64006,
        "prefix_str": "FA06"
      },
      "signature": {
        "stack_string": "b:Builder x:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STVARINT32": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Similar to `STVARUINT32`, but serializes a _signed_ _Integer_ `x` in the range `-2^247...2^247-1`.",
        "tags": ["variable-size integer", "builder building"],
        "operands": []
      },
      "layout": {
        "min": 16385792,
        "max": 16386048,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_var_integer(_1, 5, true, false)",
        "kind": "simple",
        "prefix": 64007,
        "prefix_str": "FA07"
      },
      "signature": {
        "stack_string": "b:Builder x:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "LDMSGADDR": {
      "category": "address",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Loads from _Slice_ `s` the only prefix that is a valid `MsgAddress`, and returns both this prefix `s'` and the remainder `s''` of `s` as slices.",
        "tags": ["address", "slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 16400384,
        "max": 16400640,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_message_addr(_1, false)",
        "kind": "simple",
        "prefix": 64064,
        "prefix_str": "FA40"
      },
      "signature": {
        "stack_string": "s:Slice -> s2:Slice s3:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDMSGADDRQ": {
      "category": "address",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A quiet version of `LDMSGADDR`: on success, pushes an extra `-1`; on failure, pushes the original `s` and a zero.",
        "tags": ["address", "slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 16400640,
        "max": 16400896,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_load_message_addr(_1, true)",
        "kind": "simple",
        "prefix": 64065,
        "prefix_str": "FA41"
      },
      "signature": {
        "stack_string": "s:Slice -> (s:Slice 0)|(s2:Slice s3:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PARSEMSGADDR": {
      "category": "address",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Decomposes _Slice_ `s` containing a valid `MsgAddress` into a _Tuple_ `t` with separate fields of this `MsgAddress`. If `s` is not a valid `MsgAddress`, a cell deserialization exception is thrown.",
        "operands": []
      },
      "layout": {
        "min": 16400896,
        "max": 16401152,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_parse_message_addr(_1, false)",
        "kind": "simple",
        "prefix": 64066,
        "prefix_str": "FA42"
      },
      "signature": {
        "stack_string": "s:Slice -> t:Tuple",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        }
      }
    },
    "PARSEMSGADDRQ": {
      "category": "address",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A quiet version of `PARSEMSGADDR`: returns a zero on error instead of throwing an exception.",
        "operands": []
      },
      "layout": {
        "min": 16401152,
        "max": 16401408,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_parse_message_addr(_1, true)",
        "kind": "simple",
        "prefix": 64067,
        "prefix_str": "FA43"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(t:Tuple -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "t",
                      "value_types": ["Tuple"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "REWRITESTDADDR": {
      "category": "address",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Parses _Slice_ `s` containing a valid `MsgAddressInt` (usually a `msg_addr_std`), applies rewriting from the `anycast` (if present) to the same-length prefix of the address, and returns both the workchain `x` and the 256-bit address `y` as integers. If the address is not 256-bit, or if `s` is not a valid serialization of `MsgAddressInt`, throws a cell deserialization exception.",
        "operands": []
      },
      "layout": {
        "min": 16401408,
        "max": 16401664,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_rewrite_message_addr(_1, false, false)",
        "kind": "simple",
        "prefix": 64068,
        "prefix_str": "FA44"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int y:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "REWRITESTDADDRQ": {
      "category": "address",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A quiet version of primitive `REWRITESTDADDR`.",
        "operands": []
      },
      "layout": {
        "min": 16401664,
        "max": 16401920,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_rewrite_message_addr(_1, false, true)",
        "kind": "simple",
        "prefix": 64069,
        "prefix_str": "FA45"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(x:Int y:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "REWRITEVARADDR": {
      "category": "address",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A variant of `REWRITESTDADDR` that returns the (rewritten) address as a _Slice_ `s`, even if it is not exactly 256 bit long (represented by a `msg_addr_var`).",
        "operands": []
      },
      "layout": {
        "min": 16401920,
        "max": 16402176,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_rewrite_message_addr(_1, true, false)",
        "kind": "simple",
        "prefix": 64070,
        "prefix_str": "FA46"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "REWRITEVARADDRQ": {
      "category": "address",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A quiet version of primitive `REWRITEVARADDR`.",
        "operands": []
      },
      "layout": {
        "min": 16402176,
        "max": 16402432,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_rewrite_message_addr(_1, true, true)",
        "kind": "simple",
        "prefix": 64071,
        "prefix_str": "FA47"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(x:Int s':Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "s'",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SENDRAWMSG": {
      "category": "message",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Sends a raw message contained in _Cell `c`_, which should contain a correctly serialized object `Message X`, with the only exception that the source address is allowed to have dummy value `addr_none` (to be automatically replaced with the current smart-contract address), and `ihr_fee`, `fwd_fee`, `created_lt` and `created_at` fields can have arbitrary values (to be rewritten with correct values during the action phase of the current transaction). Integer parameter `x` contains the flags. Currently `x=0` is used for ordinary messages; `x=128` is used for messages that are to carry all the remaining balance of the current smart contract (instead of the value originally indicated in the message); `x=64` is used for messages that carry all the remaining value of the inbound message in addition to the value initially indicated in the new message (if bit 0 is not set, the gas fees are deducted from this amount); `x'=x+1` means that the sender wants to pay transfer fees separately; `x'=x+2` means that any errors arising while processing this message during the action phase should be ignored. Finally, `x'=x+32` means that the current account must be destroyed if its resulting balance is zero. This flag is usually employed together with `+128`.",
        "operands": []
      },
      "layout": {
        "min": 16449536,
        "max": 16449792,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_send_raw_message",
        "kind": "simple",
        "prefix": 64256,
        "prefix_str": "FB00"
      },
      "signature": {
        "stack_string": "c:Cell x:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        }
      }
    },
    "RAWRESERVE": {
      "category": "message",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Creates an output action which would reserve exactly `x` nanograms (if `y=0`), at most `x` nanograms (if `y=2`), or all but `x` nanograms (if `y=1` or `y=3`), from the remaining balance of the account. It is roughly equivalent to creating an outbound message carrying `x` nanograms (or `b-x` nanograms, where `b` is the remaining balance) to oneself, so that the subsequent output actions would not be able to spend more money than the remainder. Bit `+2` in `y` means that the external action does not fail if the specified amount cannot be reserved; instead, all remaining balance is reserved. Bit `+8` in `y` means `x:=-x` before performing any further actions. Bit `+4` in `y` means that `x` is increased by the original balance of the current account (before the compute phase), including all extra currencies, before performing any other checks and actions. Currently `x` must be a non-negative integer, and `y` must be in the range `0...15`.",
        "operands": []
      },
      "layout": {
        "min": 16450048,
        "max": 16450304,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_reserve_raw(_1, 0)",
        "kind": "simple",
        "prefix": 64258,
        "prefix_str": "FB02"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        }
      }
    },
    "RAWRESERVEX": {
      "category": "message",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `RAWRESERVE`, but also accepts a dictionary `D` (represented by a _Cell_ or _Null_) with extra currencies. In this way currencies other than Grams can be reserved.",
        "operands": []
      },
      "layout": {
        "min": 16450304,
        "max": 16450560,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_reserve_raw(_1, 1)",
        "kind": "simple",
        "prefix": 64259,
        "prefix_str": "FB03"
      },
      "signature": {
        "stack_string": "x:Int D:Cell|Null y:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        }
      }
    },
    "SETCODE": {
      "category": "message",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Creates an output action that would change this smart contract code to that given by _Cell_ `c`. Notice that this change will take effect only after the successful termination of the current run of the smart contract.",
        "operands": []
      },
      "layout": {
        "min": 16450560,
        "max": 16450816,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_set_code",
        "kind": "simple",
        "prefix": 64260,
        "prefix_str": "FB04"
      },
      "signature": {
        "stack_string": "c:Cell -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        }
      }
    },
    "SETLIBCODE": {
      "category": "message",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Creates an output action that would modify the collection of this smart contract libraries by adding or removing library with code given in _Cell_ `c`. If `x=0`, the library is actually removed if it was previously present in the collection (if not, this action does nothing). If `x=1`, the library is added as a private library, and if `x=2`, the library is added as a public library (and becomes available to all smart contracts if the current smart contract resides in the masterchain); if the library was present in the collection before, its public/private status is changed according to `x`. Values of `x` other than `0...2` are invalid.",
        "operands": []
      },
      "layout": {
        "min": 16451072,
        "max": 16451328,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_set_lib_code",
        "kind": "simple",
        "prefix": 64262,
        "prefix_str": "FB06"
      },
      "signature": {
        "stack_string": "c:Cell x:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        }
      }
    },
    "CHANGELIB": {
      "category": "message",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Creates an output action similarly to `SETLIBCODE`, but instead of the library code accepts its hash as an unsigned 256-bit integer `h`. If `x!=0` and the library with hash `h` is absent from the library collection of this smart contract, this output action will fail.",
        "operands": []
      },
      "layout": {
        "min": 16451328,
        "max": 16451584,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_change_lib",
        "kind": "simple",
        "prefix": 64263,
        "prefix_str": "FB07"
      },
      "signature": {
        "stack_string": "h:Int x:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "h",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        }
      }
    },
    "SENDMSG": {
      "category": "message",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Creates an output action and returns a fee for creating a message. Mode has the same effect as in the case of `SENDRAWMSG`. Additionally `+1024` means - do not create an action, only estimate fee. Other modes affect the fee calculation as follows: `+64` substitutes the entire balance of the incoming message as an outcoming value (slightly inaccurate, gas expenses that cannot be estimated before the computation is completed are not taken into account), `+128` substitutes the value of the entire balance of the contract before the start of the computation phase (slightly inaccurate, since gas expenses that cannot be estimated before the completion of the computation phase are not taken into account).",
        "operands": []
      },
      "layout": {
        "min": 16451584,
        "max": 16451840,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_send_message",
        "version": 4,
        "kind": "simple",
        "prefix": 64264,
        "prefix_str": "FB08"
      },
      "signature": {
        "stack_string": "c:Cell x:Int -> fee:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "fee",
              "value_types": ["Int"]
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 5
            }
          ]
        }
      }
    },
    "PUSHNULL": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 7143424,
        "max": 7208960,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_push_null",
        "kind": "simple",
        "prefix": 109,
        "prefix_str": "6D"
      },
      "signature": {
        "stack_string": "âˆ… -> null",
        "outputs": {
          "stack": [
            {
              "type": "const",
              "value": null,
              "value_type": "Null"
            }
          ]
        }
      }
    },
    "ISNULL": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "Checks whether `x` is a _Null_.",
        "long": "Pops an element from the stack and checks whether it is a _Null_, pushing `-1` or `0` accordingly.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 1 element."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 7208960,
        "max": 7274496,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_is_null",
        "kind": "simple",
        "prefix": 110,
        "prefix_str": "6E"
      },
      "signature": {
        "stack_string": "x:Any|Null -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Any", "Null"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "TUPLEVAR": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Creates a new _Tuple_ `t` of length `n` similarly to `TUPLE`, but with `n` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 7307264,
        "max": 7307520,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mktuple_var",
        "kind": "simple",
        "prefix": 28544,
        "prefix_str": "6F80"
      },
      "signature": {
        "stack_string": "x_1...x_n n:Int -> t:Tuple",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            },
            {
              "type": "simple",
              "name": "n",
              "range": {
                "min": 0,
                "max": 255
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        }
      }
    },
    "INDEXVAR": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `k INDEX`, but with `k` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 7307520,
        "max": 7307776,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_tuple_index_var",
        "kind": "simple",
        "prefix": 28545,
        "prefix_str": "6F81"
      },
      "signature": {
        "stack_string": "t:Tuple k:Int -> x:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            },
            {
              "type": "simple",
              "name": "k",
              "range": {
                "min": 0,
                "max": 254
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "UNTUPLEVAR": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `n UNTUPLE`, but with `n` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 7307776,
        "max": 7308032,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_untuple_var",
        "kind": "simple",
        "prefix": 28546,
        "prefix_str": "6F82"
      },
      "signature": {
        "stack_string": "t:Tuple n:Int -> x_1...x_n",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            },
            {
              "type": "simple",
              "name": "n",
              "range": {
                "min": 0,
                "max": 255
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            }
          ]
        }
      }
    },
    "UNPACKFIRSTVAR": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `n UNPACKFIRST`, but with `n` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 7308032,
        "max": 7308288,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_untuple_first_var",
        "kind": "simple",
        "prefix": 28547,
        "prefix_str": "6F83"
      },
      "signature": {
        "stack_string": "t:Tuple n:Int -> x_1...x_n",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            },
            {
              "type": "simple",
              "name": "n",
              "range": {
                "min": 0,
                "max": 255
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            }
          ]
        }
      }
    },
    "EXPLODEVAR": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `n EXPLODE`, but with `n` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 7308288,
        "max": 7308544,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_explode_tuple_var",
        "kind": "simple",
        "prefix": 28548,
        "prefix_str": "6F84"
      },
      "signature": {
        "stack_string": "t:Tuple n:Int -> x_1...x_m m:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            },
            {
              "type": "simple",
              "name": "n",
              "range": {
                "min": 0,
                "max": 255
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "m",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            },
            {
              "type": "simple",
              "name": "m",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SETINDEXVAR": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `k SETINDEX`, but with `k` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 7308544,
        "max": 7308800,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_tuple_set_index_var",
        "kind": "simple",
        "prefix": 28549,
        "prefix_str": "6F85"
      },
      "signature": {
        "stack_string": "t:Tuple x:Any k:Int -> t2:Tuple",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            },
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "k",
              "range": {
                "min": 0,
                "max": 254
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": ["Tuple"]
            }
          ]
        }
      }
    },
    "INDEXVARQ": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `n INDEXQ`, but with `k` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 7308800,
        "max": 7309056,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_tuple_quiet_index_var",
        "kind": "simple",
        "prefix": 28550,
        "prefix_str": "6F86"
      },
      "signature": {
        "stack_string": "t:Tuple|Null k:Int -> x:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple", "Null"]
            },
            {
              "type": "simple",
              "name": "k",
              "range": {
                "min": 0,
                "max": 254
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "SETINDEXVARQ": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `k SETINDEXQ`, but with `k` taken from the stack.",
        "operands": []
      },
      "layout": {
        "min": 7309056,
        "max": 7309312,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_tuple_quiet_set_index_var",
        "kind": "simple",
        "prefix": 28551,
        "prefix_str": "6F87"
      },
      "signature": {
        "stack_string": "t:Tuple|Null x:Any k:Int -> t2:Tuple|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple", "Null"]
            },
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "k",
              "range": {
                "min": 0,
                "max": 254
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": ["Tuple", "Null"]
            }
          ]
        }
      }
    },
    "TLEN": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns the length of a _Tuple_.",
        "operands": []
      },
      "layout": {
        "min": 7309312,
        "max": 7309568,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_tuple_length",
        "kind": "simple",
        "prefix": 28552,
        "prefix_str": "6F88"
      },
      "signature": {
        "stack_string": "t:Tuple -> n:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QTLEN": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `TLEN`, but returns `-1` if `t` is not a _Tuple_.",
        "operands": []
      },
      "layout": {
        "min": 7309568,
        "max": 7309824,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_tuple_length_quiet",
        "kind": "simple",
        "prefix": 28553,
        "prefix_str": "6F89"
      },
      "signature": {
        "stack_string": "t:Tuple -> (-1 0)|(n:Int -1)",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "is_tuple",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "const",
                      "value": "-1",
                      "value_type": "Int"
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "n",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "ISTUPLE": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns `-1` or `0` depending on whether `t` is a _Tuple_.",
        "operands": []
      },
      "layout": {
        "min": 7309824,
        "max": 7310080,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_is_tuple",
        "kind": "simple",
        "prefix": 28554,
        "prefix_str": "6F8A"
      },
      "signature": {
        "stack_string": "t:Tuple -> n:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "LAST": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns the last element of a non-empty _Tuple_ `t`.",
        "operands": []
      },
      "layout": {
        "min": 7310080,
        "max": 7310336,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_tuple_last",
        "kind": "simple",
        "prefix": 28555,
        "prefix_str": "6F8B"
      },
      "signature": {
        "stack_string": "t:Tuple -> x:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "TPUSH": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Appends a value `x` to a _Tuple_ `t=(x_1,...,x_n)`, but only if the resulting _Tuple_ `t'=(x_1,...,x_n,x)` is of length at most 255. Otherwise throws a type check exception.",
        "operands": []
      },
      "layout": {
        "min": 7310336,
        "max": 7310592,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_tuple_push",
        "kind": "simple",
        "prefix": 28556,
        "prefix_str": "6F8C"
      },
      "effects": [
        {
          "$": "Tuple",
          "costs": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        }
      ],
      "signature": {
        "stack_string": "t:Tuple x:Any -> t2:Tuple",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            },
            {
              "type": "simple",
              "name": "x"
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": ["Tuple"]
            }
          ]
        }
      }
    },
    "TPOP": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Detaches the last element `x=x_n` from a non-empty _Tuple_ `t=(x_1,...,x_n)`, and returns both the resulting _Tuple_ `t'=(x_1,...,x_{n-1})` and the original last element `x`.",
        "operands": []
      },
      "layout": {
        "min": 7310592,
        "max": 7310848,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_tuple_pop",
        "kind": "simple",
        "prefix": 28557,
        "prefix_str": "6F8D"
      },
      "effects": [
        {
          "$": "Tuple",
          "costs": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        }
      ],
      "signature": {
        "stack_string": "t:Tuple -> t2:Tuple x:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": ["Tuple"]
            },
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "NULLSWAPIF": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pushes a _Null_ under the topmost _Integer_ `x`, but only if `x!=0`.",
        "operands": []
      },
      "layout": {
        "min": 7315456,
        "max": 7315712,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_null_swap_if(_1, true, 0)",
        "kind": "simple",
        "prefix": 28576,
        "prefix_str": "6FA0"
      },
      "signature": {
        "stack_string": "x:Int -> (âˆ… 0)|null x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "x",
              "match": [
                {
                  "value": 0,
                  "stack": []
                }
              ],
              "else": [
                {
                  "type": "const",
                  "value": null,
                  "value_type": "Null"
                }
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "NULLSWAPIFNOT": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pushes a _Null_ under the topmost _Integer_ `x`, but only if `x=0`. May be used for stack alignment after quiet primitives such as `PLDUXQ`.",
        "operands": []
      },
      "layout": {
        "min": 7315712,
        "max": 7315968,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_null_swap_if(_1, false, 0)",
        "kind": "simple",
        "prefix": 28577,
        "prefix_str": "6FA1"
      },
      "signature": {
        "stack_string": "x:Int -> (null 0)|âˆ… x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "x",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "const",
                      "value": null,
                      "value_type": "Null"
                    }
                  ]
                }
              ],
              "else": []
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "NULLROTRIF": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pushes a _Null_ under the second stack entry from the top, but only if the topmost _Integer_ `y` is non-zero.",
        "operands": []
      },
      "layout": {
        "min": 7315968,
        "max": 7316224,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_null_swap_if(_1, true, 1)",
        "kind": "simple",
        "prefix": 28578,
        "prefix_str": "6FA2"
      },
      "signature": {
        "stack_string": "x:Any y:Int -> (âˆ… 0)|null x:Any y:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "y",
              "match": [
                {
                  "value": 0,
                  "stack": []
                }
              ],
              "else": [
                {
                  "type": "const",
                  "value": null,
                  "value_type": "Null"
                }
              ]
            },
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "NULLROTRIFNOT": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pushes a _Null_ under the second stack entry from the top, but only if the topmost _Integer_ `y` is zero. May be used for stack alignment after quiet primitives such as `LDUXQ`.",
        "operands": []
      },
      "layout": {
        "min": 7316224,
        "max": 7316480,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_null_swap_if(_1, false, 1)",
        "kind": "simple",
        "prefix": 28579,
        "prefix_str": "6FA3"
      },
      "signature": {
        "stack_string": "x:Any y:Int -> (null 0)|âˆ… x:Any y:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "y",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "const",
                      "value": null,
                      "value_type": "Null"
                    }
                  ]
                }
              ],
              "else": []
            },
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "NULLSWAPIF2": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pushes two nulls under the topmost _Integer_ `x`, but only if `x!=0`.\nEquivalent to `NULLSWAPIF` `NULLSWAPIF`.",
        "operands": []
      },
      "layout": {
        "min": 7316480,
        "max": 7316736,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_null_swap_if_many(_1, true, 0, 2)",
        "kind": "simple",
        "prefix": 28580,
        "prefix_str": "6FA4"
      },
      "signature": {
        "stack_string": "x:Int -> (âˆ… 0)|null null x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "x",
              "match": [
                {
                  "value": 0,
                  "stack": []
                }
              ],
              "else": [
                {
                  "type": "const",
                  "value": null,
                  "value_type": "Null"
                },
                {
                  "type": "const",
                  "value": null,
                  "value_type": "Null"
                }
              ]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "NULLSWAPIFNOT2": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pushes two nulls under the topmost _Integer_ `x`, but only if `x=0`.\nEquivalent to `NULLSWAPIFNOT` `NULLSWAPIFNOT`.",
        "operands": []
      },
      "layout": {
        "min": 7316736,
        "max": 7316992,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_null_swap_if_many(_1, false, 0, 2)",
        "kind": "simple",
        "prefix": 28581,
        "prefix_str": "6FA5"
      },
      "signature": {
        "stack_string": "x:Int -> (null null 0)|âˆ… x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "x",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "const",
                      "value": null,
                      "value_type": "Null"
                    },
                    {
                      "type": "const",
                      "value": null,
                      "value_type": "Null"
                    }
                  ]
                }
              ],
              "else": []
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "NULLROTRIF2": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pushes two nulls under the second stack entry from the top, but only if the topmost _Integer_ `y` is non-zero.\nEquivalent to `NULLROTRIF` `NULLROTRIF`.",
        "operands": []
      },
      "layout": {
        "min": 7316992,
        "max": 7317248,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_null_swap_if_many(_1, true, 1, 2)",
        "kind": "simple",
        "prefix": 28582,
        "prefix_str": "6FA6"
      },
      "signature": {
        "stack_string": "x:Any y:Int -> (âˆ… 0)|null null x:Any y:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "y",
              "match": [
                {
                  "value": 0,
                  "stack": []
                }
              ],
              "else": [
                {
                  "type": "const",
                  "value": null,
                  "value_type": "Null"
                },
                {
                  "type": "const",
                  "value": null,
                  "value_type": "Null"
                }
              ]
            },
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "NULLROTRIFNOT2": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pushes two nulls under the second stack entry from the top, but only if the topmost _Integer_ `y` is zero.\nEquivalent to `NULLROTRIFNOT` `NULLROTRIFNOT`.",
        "operands": []
      },
      "layout": {
        "min": 7317248,
        "max": 7317504,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_null_swap_if_many(_1, false, 1, 2)",
        "kind": "simple",
        "prefix": 28583,
        "prefix_str": "6FA7"
      },
      "signature": {
        "stack_string": "x:Any y:Int -> (null null 0)|âˆ… x:Any y:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "y",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "const",
                      "value": null,
                      "value_type": "Null"
                    },
                    {
                      "type": "const",
                      "value": null,
                      "value_type": "Null"
                    }
                  ]
                }
              ],
              "else": []
            },
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ADDDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11075584,
        "max": 11075840,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 43264,
        "prefix_str": "A900"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ADDDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11075840,
        "max": 11076096,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 43265,
        "prefix_str": "A901"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ADDDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11076096,
        "max": 11076352,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 43266,
        "prefix_str": "A902"
      },
      "signature": {
        "stack_string": "x:Int w:Int y:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DIV": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "Divides two integers and pushes the result back onto the stack.",
        "long": "Pops two integers from the stack, divides the second one by the first one and pushes the result back onto the stack.\nFormula: `q = floor(x / y)`.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 11076608,
        "max": 11076864,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43268,
        "prefix_str": "A904"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x / y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DIVR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "Divides two integers, rounds the result and pushes it back onto the stack.",
        "long": "Pops two integers from the stack, divides the second one by the first one, rounds the result and pushes it back onto the stack.\nFormula: `q = round(x / y)`.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 11076864,
        "max": 11077120,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43269,
        "prefix_str": "A905"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DIVC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "Divides two integers, rounds the result up and pushes it back onto the stack.",
        "long": "Pops two integers from the stack, divides the second one by the first one, rounds the result up and pushes it back onto the stack.\nFormula: `q = ceil(x / y)`.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top or second element is not an Int."
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 11077120,
        "max": 11077376,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43270,
        "prefix_str": "A906"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11077632,
        "max": 11077888,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43272,
        "prefix_str": "A908"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "presentation": "x % y",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11077888,
        "max": 11078144,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43273,
        "prefix_str": "A909"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11078144,
        "max": 11078400,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43274,
        "prefix_str": "A90A"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11078656,
        "max": 11078912,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43276,
        "prefix_str": "A90C"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11078912,
        "max": 11079168,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43277,
        "prefix_str": "A90D"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11079168,
        "max": 11079424,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43278,
        "prefix_str": "A90E"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QADDDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036352,
        "max": 12036353,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036352,
        "prefix_str": "B7A900"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QADDDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036353,
        "max": 12036354,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036353,
        "prefix_str": "B7A901"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QADDDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036354,
        "max": 12036355,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036354,
        "prefix_str": "B7A902"
      },
      "signature": {
        "stack_string": "x:Int w:Int y:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QDIV": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "Division returns `NaN` if `y=0`.",
        "operands": []
      },
      "layout": {
        "min": 12036356,
        "max": 12036357,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036356,
        "prefix_str": "B7A904"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QDIVR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036357,
        "max": 12036358,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036357,
        "prefix_str": "B7A905"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QDIVC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036358,
        "max": 12036359,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036358,
        "prefix_str": "B7A906"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036360,
        "max": 12036361,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036360,
        "prefix_str": "B7A908"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036361,
        "max": 12036362,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036361,
        "prefix_str": "B7A909"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036362,
        "max": 12036363,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036362,
        "prefix_str": "B7A90A"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036364,
        "max": 12036365,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036364,
        "prefix_str": "B7A90C"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036365,
        "max": 12036366,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036365,
        "prefix_str": "B7A90D"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036366,
        "max": 12036367,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_divmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036366,
        "prefix_str": "B7A90E"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ADDRSHIFTMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11083776,
        "max": 11084032,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "version": 4,
        "kind": "simple",
        "prefix": 43296,
        "prefix_str": "A920"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ADDRSHIFTMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11084032,
        "max": 11084288,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "version": 4,
        "kind": "simple",
        "prefix": 43297,
        "prefix_str": "A921"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ADDRSHIFTMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11084288,
        "max": 11084544,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "version": 4,
        "kind": "simple",
        "prefix": 43298,
        "prefix_str": "A922"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RSHIFTR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11085056,
        "max": 11085312,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43301,
        "prefix_str": "A925"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RSHIFTC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11085312,
        "max": 11085568,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43302,
        "prefix_str": "A926"
      },
      "signature": {
        "stack_string": "x:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MODPOW2": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11085824,
        "max": 11086080,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43304,
        "prefix_str": "A928"
      },
      "signature": {
        "stack_string": "x:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MODPOW2R": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11086080,
        "max": 11086336,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43305,
        "prefix_str": "A929"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MODPOW2C": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11086336,
        "max": 11086592,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43306,
        "prefix_str": "A92A"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RSHIFTMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11086848,
        "max": 11087104,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43308,
        "prefix_str": "A92C"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RSHIFTMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11087104,
        "max": 11087360,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43309,
        "prefix_str": "A92D"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RSHIFTMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11087360,
        "max": 11087616,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43310,
        "prefix_str": "A92E"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QADDRSHIFTMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036384,
        "max": 12036385,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036384,
        "prefix_str": "B7A920"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QADDRSHIFTMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036385,
        "max": 12036386,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036385,
        "prefix_str": "B7A921"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QADDRSHIFTMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036386,
        "max": 12036387,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036386,
        "prefix_str": "B7A922"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QRSHIFTR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036389,
        "max": 12036390,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036389,
        "prefix_str": "B7A925"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QRSHIFTC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036390,
        "max": 12036391,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036390,
        "prefix_str": "B7A926"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMODPOW2": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036392,
        "max": 12036393,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036392,
        "prefix_str": "B7A928"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMODPOW2R": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036393,
        "max": 12036394,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036393,
        "prefix_str": "B7A929"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMODPOW2C": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036394,
        "max": 12036395,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036394,
        "prefix_str": "B7A92A"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QRSHIFTMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036396,
        "max": 12036397,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036396,
        "prefix_str": "B7A92C"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QRSHIFTMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12036397,
        "max": 12036398,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036397,
        "prefix_str": "B7A92D"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QRSHIFTMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12036398,
        "max": 12036399,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036398,
        "prefix_str": "B7A92E"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULADDDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11108352,
        "max": 11108608,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 43392,
        "prefix_str": "A980"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULADDDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11108608,
        "max": 11108864,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 43393,
        "prefix_str": "A981"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULADDDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11108864,
        "max": 11109120,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "version": 4,
        "kind": "simple",
        "prefix": 43394,
        "prefix_str": "A982"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULDIV": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "`q=floor(x*y/z)`",
        "operands": []
      },
      "layout": {
        "min": 11109376,
        "max": 11109632,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43396,
        "prefix_str": "A984"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULDIVR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "`q'=round(x*y/z)`",
        "operands": []
      },
      "layout": {
        "min": 11109632,
        "max": 11109888,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43397,
        "prefix_str": "A985"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULDIVC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "`q'=ceil(x*y/z)`",
        "operands": []
      },
      "layout": {
        "min": 11109888,
        "max": 11110144,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43398,
        "prefix_str": "A986"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11110400,
        "max": 11110656,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43400,
        "prefix_str": "A988"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11110656,
        "max": 11110912,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43401,
        "prefix_str": "A989"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11110912,
        "max": 11111168,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43402,
        "prefix_str": "A98A"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "`q=floor(x*y/z)`, `r=x*y-z*q`",
        "operands": []
      },
      "layout": {
        "min": 11111424,
        "max": 11111680,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43404,
        "prefix_str": "A98C"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "`q=round(x*y/z)`, `r=x*y-z*q`",
        "operands": []
      },
      "layout": {
        "min": 11111680,
        "max": 11111936,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43405,
        "prefix_str": "A98D"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "`q=ceil(x*y/z)`, `r=x*y-z*q`",
        "operands": []
      },
      "layout": {
        "min": 11111936,
        "max": 11112192,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, false)",
        "kind": "simple",
        "prefix": 43406,
        "prefix_str": "A98E"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULADDDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036480,
        "max": 12036481,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036480,
        "prefix_str": "B7A980"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULADDDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036481,
        "max": 12036482,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036481,
        "prefix_str": "B7A981"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULADDDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036482,
        "max": 12036483,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036482,
        "prefix_str": "B7A982"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULDIV": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "`q=floor(x*y/z)`",
        "operands": []
      },
      "layout": {
        "min": 12036484,
        "max": 12036485,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036484,
        "prefix_str": "B7A984"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULDIVR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036485,
        "max": 12036486,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036485,
        "prefix_str": "B7A985"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> q:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULDIVC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "`q'=ceil(x*y/z)`",
        "operands": []
      },
      "layout": {
        "min": 12036486,
        "max": 12036487,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036486,
        "prefix_str": "B7A986"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036488,
        "max": 12036489,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036488,
        "prefix_str": "B7A988"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036489,
        "max": 12036490,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036489,
        "prefix_str": "B7A989"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036490,
        "max": 12036491,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036490,
        "prefix_str": "B7A98A"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036492,
        "max": 12036493,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036492,
        "prefix_str": "B7A98C"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "`q=round(x*y/z)`, `r=x*y-z*q`",
        "operands": []
      },
      "layout": {
        "min": 12036493,
        "max": 12036494,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036493,
        "prefix_str": "B7A98D"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "`q=ceil(x*y/z)`, `r=x*y-z*q`",
        "operands": []
      },
      "layout": {
        "min": 12036494,
        "max": 12036495,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_muldivmod(_1, _2, true)",
        "kind": "simple",
        "prefix": 12036494,
        "prefix_str": "B7A98E"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> q:Int r:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "q",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "r",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULADDRSHIFTMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11116544,
        "max": 11116800,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "version": 4,
        "kind": "simple",
        "prefix": 43424,
        "prefix_str": "A9A0"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULADDRSHIFTRMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11116800,
        "max": 11117056,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "version": 4,
        "kind": "simple",
        "prefix": 43425,
        "prefix_str": "A9A1"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULADDRSHIFTCMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11117056,
        "max": 11117312,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "version": 4,
        "kind": "simple",
        "prefix": 43426,
        "prefix_str": "A9A2"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULRSHIFT": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11117568,
        "max": 11117824,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43428,
        "prefix_str": "A9A4"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULRSHIFTR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11117824,
        "max": 11118080,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43429,
        "prefix_str": "A9A5"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULRSHIFTC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11118080,
        "max": 11118336,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43430,
        "prefix_str": "A9A6"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULMODPOW2": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11118592,
        "max": 11118848,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43432,
        "prefix_str": "A9A8"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULMODPOW2R": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11118848,
        "max": 11119104,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43433,
        "prefix_str": "A9A9"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULMODPOW2C": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11119104,
        "max": 11119360,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43434,
        "prefix_str": "A9AA"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULRSHIFTMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11119616,
        "max": 11119872,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43436,
        "prefix_str": "A9AC"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULRSHIFTRMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11119872,
        "max": 11120128,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43437,
        "prefix_str": "A9AD"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "MULRSHIFTCMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11120128,
        "max": 11120384,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43438,
        "prefix_str": "A9AE"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULADDRSHIFTMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036512,
        "max": 12036513,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036512,
        "prefix_str": "B7A9A0"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULADDRSHIFTRMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036513,
        "max": 12036514,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036513,
        "prefix_str": "B7A9A1"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULADDRSHIFTCMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036514,
        "max": 12036515,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036514,
        "prefix_str": "B7A9A2"
      },
      "signature": {
        "stack_string": "x:Int y:Int w:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULRSHIFT": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036516,
        "max": 12036517,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036516,
        "prefix_str": "B7A9A4"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULRSHIFTR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036517,
        "max": 12036518,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036517,
        "prefix_str": "B7A9A5"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULRSHIFTC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036518,
        "max": 12036519,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036518,
        "prefix_str": "B7A9A6"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULMODPOW2": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036520,
        "max": 12036521,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036520,
        "prefix_str": "B7A9A8"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULMODPOW2R": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036521,
        "max": 12036522,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036521,
        "prefix_str": "B7A9A9"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULMODPOW2C": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036522,
        "max": 12036523,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036522,
        "prefix_str": "B7A9AA"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULRSHIFTMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036524,
        "max": 12036525,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036524,
        "prefix_str": "B7A9AC"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULRSHIFTRMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036525,
        "max": 12036526,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036525,
        "prefix_str": "B7A9AD"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QMULRSHIFTCMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12036526,
        "max": 12036527,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_mulshrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036526,
        "prefix_str": "B7A9AE"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTADDDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11124736,
        "max": 11124992,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "version": 4,
        "kind": "simple",
        "prefix": 43456,
        "prefix_str": "A9C0"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTADDDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11124992,
        "max": 11125248,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "version": 4,
        "kind": "simple",
        "prefix": 43457,
        "prefix_str": "A9C1"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTADDDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11125248,
        "max": 11125504,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "version": 4,
        "kind": "simple",
        "prefix": 43458,
        "prefix_str": "A9C2"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTDIV": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11125760,
        "max": 11126016,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43460,
        "prefix_str": "A9C4"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTDIVR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11126016,
        "max": 11126272,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43461,
        "prefix_str": "A9C5"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTDIVC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11126272,
        "max": 11126528,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43462,
        "prefix_str": "A9C6"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11126784,
        "max": 11127040,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43464,
        "prefix_str": "A9C8"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11127040,
        "max": 11127296,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43465,
        "prefix_str": "A9C9"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11127296,
        "max": 11127552,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43466,
        "prefix_str": "A9CA"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11127808,
        "max": 11128064,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43468,
        "prefix_str": "A9CC"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11128064,
        "max": 11128320,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43469,
        "prefix_str": "A9CD"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFTDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 11128320,
        "max": 11128576,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43470,
        "prefix_str": "A9CE"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTADDDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036544,
        "max": 12036545,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036544,
        "prefix_str": "B7A9C0"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTADDDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036545,
        "max": 12036546,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036545,
        "prefix_str": "B7A9C1"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTADDDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036546,
        "max": 12036547,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "version": 4,
        "kind": "simple",
        "prefix": 12036546,
        "prefix_str": "B7A9C2"
      },
      "signature": {
        "stack_string": "x:Int w:Int z:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "w",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTDIV": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036548,
        "max": 12036549,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036548,
        "prefix_str": "B7A9C4"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTDIVR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036549,
        "max": 12036550,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036549,
        "prefix_str": "B7A9C5"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTDIVC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036550,
        "max": 12036551,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036550,
        "prefix_str": "B7A9C6"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036552,
        "max": 12036553,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036552,
        "prefix_str": "B7A9C8"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036553,
        "max": 12036554,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036553,
        "prefix_str": "B7A9C9"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036554,
        "max": 12036555,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036554,
        "prefix_str": "B7A9CA"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036556,
        "max": 12036557,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036556,
        "prefix_str": "B7A9CC"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036557,
        "max": 12036558,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036557,
        "prefix_str": "B7A9CD"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFTDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": "",
        "operands": ["t"]
      },
      "layout": {
        "min": 12036558,
        "max": 12036559,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shldivmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036558,
        "prefix_str": "B7A9CE"
      },
      "signature": {
        "stack_string": "x:Int y:Int z:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "z",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STIX": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores a signed `l`-bit integer `x` into `b` for `0 <= l <= 257`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13565952,
        "max": 13566208,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_int_var",
        "kind": "simple",
        "prefix": 52992,
        "prefix_str": "CF00"
      },
      "signature": {
        "stack_string": "x:Int b:Builder l:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "stack_amount_arg": 0
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "STUX": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores an unsigned `l`-bit integer `x` into `b` for `0 <= l <= 256`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13566208,
        "max": 13566464,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_int_var",
        "kind": "simple",
        "prefix": 52993,
        "prefix_str": "CF01"
      },
      "signature": {
        "stack_string": "x:Int b:Builder l:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "stack_amount_arg": 0
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "STIXR": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Similar to `STIX`, but with arguments in a different order.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13566464,
        "max": 13566720,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_int_var",
        "kind": "simple",
        "prefix": 52994,
        "prefix_str": "CF02"
      },
      "signature": {
        "stack_string": "b:Builder x:Int l:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "stack_amount_arg": 0
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "STUXR": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Similar to `STUX`, but with arguments in a different order.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13566720,
        "max": 13566976,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_int_var",
        "kind": "simple",
        "prefix": 52995,
        "prefix_str": "CF03"
      },
      "signature": {
        "stack_string": "b:Builder x:Int l:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "stack_amount_arg": 0
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "STIXQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A quiet version of `STIX`. If there is no space in `b`, sets `b'=b` and `f=-1`.\nIf `x` does not fit into `l` bits, sets `b'=b` and `f=1`.\nIf the operation succeeds, `b'` is the new _Builder_ and `f=0`.\nHowever, `0 <= l <= 257`, with a range check exception if this is not so.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13566976,
        "max": 13567232,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_int_var",
        "kind": "simple",
        "prefix": 52996,
        "prefix_str": "CF04"
      },
      "signature": {
        "stack_string": "x:Int b:Builder l:Int -> (b2:Builder 0)|(x:Int b:Builder -1)|(x:Int b:Builder 1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": 1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STUXQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A quiet version of `STUX`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13567232,
        "max": 13567488,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_int_var",
        "kind": "simple",
        "prefix": 52997,
        "prefix_str": "CF05"
      },
      "signature": {
        "stack_string": "x:Int b:Builder l:Int -> (b2:Builder 0)|(x:Int b:Builder -1)|(x:Int b:Builder 1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": 1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STIXRQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A quiet version of `STIXR`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13567488,
        "max": 13567744,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_int_var",
        "kind": "simple",
        "prefix": 52998,
        "prefix_str": "CF06"
      },
      "signature": {
        "stack_string": "b:Builder x:Int l:Int -> (b2:Builder 0)|(b:Builder x:Int -1)|(b:Builder x:Int 1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                },
                {
                  "value": 1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STUXRQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A quiet version of `STUXR`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13567744,
        "max": 13568000,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_int_var",
        "kind": "simple",
        "prefix": 52999,
        "prefix_str": "CF07"
      },
      "signature": {
        "stack_string": "b:Builder x:Int l:Int -> (b2:Builder 0)|(b:Builder x:Int -1)|(b:Builder x:Int 1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                },
                {
                  "value": 1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STILE4": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores a little-endian signed 32-bit integer.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13576192,
        "max": 13576448,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_le_int",
        "kind": "simple",
        "prefix": 53032,
        "prefix_str": "CF28"
      },
      "signature": {
        "stack_string": "x:Int b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STULE4": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores a little-endian unsigned 32-bit integer.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13576448,
        "max": 13576704,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_le_int",
        "kind": "simple",
        "prefix": 53033,
        "prefix_str": "CF29"
      },
      "signature": {
        "stack_string": "x:Int b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STILE8": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores a little-endian signed 64-bit integer.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13576704,
        "max": 13576960,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_le_int",
        "kind": "simple",
        "prefix": 53034,
        "prefix_str": "CF2A"
      },
      "signature": {
        "stack_string": "x:Int b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STULE8": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores a little-endian unsigned 64-bit integer.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13576960,
        "max": 13577216,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_store_le_int",
        "kind": "simple",
        "prefix": 53035,
        "prefix_str": "CF2B"
      },
      "signature": {
        "stack_string": "x:Int b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "LDIX": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads a signed `l`-bit (`0 <= l <= 257`) integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14090240,
        "max": 14090496,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_int_var",
        "kind": "simple",
        "prefix": 55040,
        "prefix_str": "D700"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDUX": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads an unsigned `l`-bit integer `x` from (the first `l` bits of) `s`, with `0 <= l <= 256`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14090496,
        "max": 14090752,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_int_var",
        "kind": "simple",
        "prefix": 55041,
        "prefix_str": "D701"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "PLDIX": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Preloads a signed `l`-bit integer from _Slice_ `s`, for `0 <= l <= 257`.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14090752,
        "max": 14091008,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_int_var",
        "kind": "simple",
        "prefix": 55042,
        "prefix_str": "D702"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDUX": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Preloads an unsigned `l`-bit integer from `s`, for `0 <= l <= 256`.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14091008,
        "max": 14091264,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_int_var",
        "kind": "simple",
        "prefix": 55043,
        "prefix_str": "D703"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDIXQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quiet version of `LDIX`: loads a signed `l`-bit integer from `s` similarly to `LDIX`, but returns a success flag, equal to `-1` on success or to `0` on failure (if `s` does not have `l` bits), instead of throwing a cell underflow exception.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14091264,
        "max": 14091520,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_int_var",
        "kind": "simple",
        "prefix": 55044,
        "prefix_str": "D704"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> (s:Slice 0)|(x:Int s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDUXQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quiet version of `LDUX`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14091520,
        "max": 14091776,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_int_var",
        "kind": "simple",
        "prefix": 55045,
        "prefix_str": "D705"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> (s:Slice 0)|(x:Int s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDIXQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quiet version of `PLDIX`.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14091776,
        "max": 14092032,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_int_var",
        "kind": "simple",
        "prefix": 55046,
        "prefix_str": "D706"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> (âˆ… 0)|(x:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDUXQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quiet version of `PLDUX`.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14092032,
        "max": 14092288,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_int_var",
        "kind": "simple",
        "prefix": 55047,
        "prefix_str": "D707"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> (âˆ… 0)|(x:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDSLICEX": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads the first `0 <= l <= 1023` bits from _Slice_ `s` into a separate _Slice_ `s''`, returning the remainder of `s` as `s'`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14096384,
        "max": 14096640,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_slice",
        "kind": "simple",
        "prefix": 55064,
        "prefix_str": "D718"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> s3:Slice s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "PLDSLICEX": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the first `0 <= l <= 1023` bits of `s` as `s''`.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14096640,
        "max": 14096896,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_slice",
        "kind": "simple",
        "prefix": 55065,
        "prefix_str": "D719"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> s3:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDSLICEXQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `LDSLICEX`.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14096896,
        "max": 14097152,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_slice",
        "kind": "simple",
        "prefix": 55066,
        "prefix_str": "D71A"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> (s:Slice 0)|(s3:Slice s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDSLICEXQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `LDSLICEXQ`.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14097152,
        "max": 14097408,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_slice",
        "kind": "simple",
        "prefix": 55067,
        "prefix_str": "D71B"
      },
      "signature": {
        "stack_string": "s:Slice l:Int -> (âˆ… 0)|(s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDILE4": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads a little-endian signed 32-bit integer.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14110720,
        "max": 14110976,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55120,
        "prefix_str": "D750"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDULE4": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads a little-endian unsigned 32-bit integer.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14110976,
        "max": 14111232,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55121,
        "prefix_str": "D751"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDILE8": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads a little-endian signed 64-bit integer.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14111232,
        "max": 14111488,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55122,
        "prefix_str": "D752"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDULE8": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Loads a little-endian unsigned 64-bit integer.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14111488,
        "max": 14111744,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55123,
        "prefix_str": "D753"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "PLDILE4": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Preloads a little-endian signed 32-bit integer.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14111744,
        "max": 14112000,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55124,
        "prefix_str": "D754"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDULE4": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Preloads a little-endian unsigned 32-bit integer.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14112000,
        "max": 14112256,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55125,
        "prefix_str": "D755"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDILE8": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Preloads a little-endian signed 64-bit integer.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14112256,
        "max": 14112512,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55126,
        "prefix_str": "D756"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDULE8": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Preloads a little-endian unsigned 64-bit integer.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14112512,
        "max": 14112768,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55127,
        "prefix_str": "D757"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDILE4Q": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quietly loads a little-endian signed 32-bit integer.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14112768,
        "max": 14113024,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55128,
        "prefix_str": "D758"
      },
      "signature": {
        "stack_string": "s:Slice -> (s:Slice 0)|(x:Int s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDULE4Q": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quietly loads a little-endian unsigned 32-bit integer.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14113024,
        "max": 14113280,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55129,
        "prefix_str": "D759"
      },
      "signature": {
        "stack_string": "s:Slice -> (s:Slice 0)|(x:Int s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDILE8Q": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quietly loads a little-endian signed 64-bit integer.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14113280,
        "max": 14113536,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55130,
        "prefix_str": "D75A"
      },
      "signature": {
        "stack_string": "s:Slice -> (s:Slice 0)|(x:Int s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDULE8Q": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quietly loads a little-endian unsigned 64-bit integer.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14113536,
        "max": 14113792,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55131,
        "prefix_str": "D75B"
      },
      "signature": {
        "stack_string": "s:Slice -> (s:Slice 0)|(x:Int s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDILE4Q": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quietly preloads a little-endian signed 32-bit integer.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14113792,
        "max": 14114048,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55132,
        "prefix_str": "D75C"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(x:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDULE4Q": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quietly preloads a little-endian unsigned 32-bit integer.",
        "tags": ["slice parsing", "preload"],
        "operands": []
      },
      "layout": {
        "min": 14114048,
        "max": 14114304,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55133,
        "prefix_str": "D75D"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(x:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDILE8Q": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quietly preloads a little-endian signed 64-bit integer.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14114304,
        "max": 14114560,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55134,
        "prefix_str": "D75E"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(x:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDULE8Q": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Quietly preloads a little-endian unsigned 64-bit integer.",
        "tags": ["slice parsing"],
        "operands": []
      },
      "layout": {
        "min": 14114560,
        "max": 14114816,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_load_le_int",
        "kind": "simple",
        "prefix": 55135,
        "prefix_str": "D75F"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(x:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIGETJMP": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTIGET`, but with `x` `BLESS`ed into a continuation with a subsequent `JMPX` to it on success. On failure, does nothing. This is useful for implementing `switch`/`case` constructions.",
        "operands": []
      },
      "layout": {
        "min": 16031744,
        "max": 16032000,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_exec",
        "kind": "simple",
        "prefix": 62624,
        "prefix_str": "F4A0"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUGETJMP": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTIGETJMP`, but performs `DICTUGET` instead of `DICTIGET`.",
        "operands": []
      },
      "layout": {
        "min": 16032000,
        "max": 16032256,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_exec",
        "kind": "simple",
        "prefix": 62625,
        "prefix_str": "F4A1"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIGETEXEC": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTIGETJMP`, but with `EXECUTE` instead of `JMPX`.",
        "operands": []
      },
      "layout": {
        "min": 16032256,
        "max": 16032512,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_exec",
        "kind": "simple",
        "prefix": 62626,
        "prefix_str": "F4A2"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUGETEXEC": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTUGETJMP`, but with `EXECUTE` instead of `JMPX`.",
        "operands": []
      },
      "layout": {
        "min": 16032512,
        "max": 16032768,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_exec",
        "kind": "simple",
        "prefix": 62627,
        "prefix_str": "F4A3"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIGETJMPZ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A variant of `DICTIGETJMP` that returns index `i` on failure.",
        "operands": []
      },
      "layout": {
        "min": 16038912,
        "max": 16039168,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_exec",
        "kind": "simple",
        "prefix": 62652,
        "prefix_str": "F4BC"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DICTUGETJMPZ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A variant of `DICTUGETJMP` that returns index `i` on failure.",
        "operands": []
      },
      "layout": {
        "min": 16039168,
        "max": 16039424,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_exec",
        "kind": "simple",
        "prefix": 62653,
        "prefix_str": "F4BD"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DICTIGETEXECZ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A variant of `DICTIGETEXEC` that returns index `i` on failure.",
        "operands": []
      },
      "layout": {
        "min": 16039424,
        "max": 16039680,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_exec",
        "kind": "simple",
        "prefix": 62654,
        "prefix_str": "F4BE"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DICTUGETEXECZ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A variant of `DICTUGETEXEC` that returns index `i` on failure.",
        "operands": []
      },
      "layout": {
        "min": 16039680,
        "max": 16039936,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_exec",
        "kind": "simple",
        "prefix": 62655,
        "prefix_str": "F4BF"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DICTGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Looks up key `k` (represented by a _Slice_, the first `0 <= n <= 1023` data bits of which are used as a key) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys.\nOn success, returns the value found as a _Slice_ `x`.",
        "operands": []
      },
      "layout": {
        "min": 15993344,
        "max": 15993600,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get",
        "kind": "simple",
        "prefix": 62474,
        "prefix_str": "F40A"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> (âˆ… 0)|(x:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGET`, but with a `LDREF` `ENDS` applied to `x` on success.\nThis operation is useful for dictionaries of type `HashmapE(n,^Y)`.",
        "operands": []
      },
      "layout": {
        "min": 15993600,
        "max": 15993856,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get",
        "kind": "simple",
        "prefix": 62475,
        "prefix_str": "F40B"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> (âˆ… 0)|(c:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGET`, but with a signed (big-endian) `n`-bit _Integer_ `i` as a key. If `i` does not fit into `n` bits, returns `0`. If `i` is a `NaN`, throws an integer overflow exception.",
        "operands": []
      },
      "layout": {
        "min": 15993856,
        "max": 15994112,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get",
        "kind": "simple",
        "prefix": 62476,
        "prefix_str": "F40C"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(x:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Combines `DICTIGET` with `DICTGETREF`: it uses signed `n`-bit _Integer_ `i` as a key and returns a _Cell_ instead of a _Slice_ on success.",
        "operands": []
      },
      "layout": {
        "min": 15994112,
        "max": 15994368,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get",
        "kind": "simple",
        "prefix": 62477,
        "prefix_str": "F40D"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(c:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTIGET`, but with _unsigned_ (big-endian) `n`-bit _Integer_ `i` used as a key.",
        "operands": []
      },
      "layout": {
        "min": 15994368,
        "max": 15994624,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get",
        "kind": "simple",
        "prefix": 62478,
        "prefix_str": "F40E"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(x:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTIGETREF`, but with an unsigned `n`-bit _Integer_ key `i`.",
        "operands": []
      },
      "layout": {
        "min": 15994624,
        "max": 15994880,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get",
        "kind": "simple",
        "prefix": 62479,
        "prefix_str": "F40F"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(c:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTSET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` (also represented by a _Slice_) to value `x` (again a _Slice_), and returns the resulting dictionary as `D'`.",
        "operands": []
      },
      "layout": {
        "min": 15995392,
        "max": 15995648,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Set, 'SET', false)",
        "kind": "simple",
        "prefix": 62482,
        "prefix_str": "F412"
      },
      "signature": {
        "stack_string": "x:Slice k:Slice D:Cell|Null n:Int -> D2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "DICTSETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTSET`, but with the value set to a reference to _Cell_ `c`.",
        "operands": []
      },
      "layout": {
        "min": 15995648,
        "max": 15995904,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Set, 'SET', false)",
        "kind": "simple",
        "prefix": 62483,
        "prefix_str": "F413"
      },
      "signature": {
        "stack_string": "c:Cell k:Slice D:Cell|Null n:Int -> D2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "DICTISET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTSET`, but with the key represented by a (big-endian) signed `n`-bit integer `i`. If `i` does not fit into `n` bits, a range check exception is generated.",
        "operands": []
      },
      "layout": {
        "min": 15995904,
        "max": 15996160,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Set, 'SET', false)",
        "kind": "simple",
        "prefix": 62484,
        "prefix_str": "F414"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> D2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "DICTISETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTSETREF`, but with the key a signed `n`-bit integer as in `DICTISET`.",
        "operands": []
      },
      "layout": {
        "min": 15996160,
        "max": 15996416,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Set, 'SET', false)",
        "kind": "simple",
        "prefix": 62485,
        "prefix_str": "F415"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> D2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "DICTUSET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTISET`, but with `i` an _unsigned_ `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 15996416,
        "max": 15996672,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Set, 'SET', false)",
        "kind": "simple",
        "prefix": 62486,
        "prefix_str": "F416"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> D2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "DICTUSETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTISETREF`, but with `i` unsigned.",
        "operands": []
      },
      "layout": {
        "min": 15996672,
        "max": 15996928,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Set, 'SET', false)",
        "kind": "simple",
        "prefix": 62487,
        "prefix_str": "F417"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> D2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "DICTSETGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Combines `DICTSET` with `DICTGET`: it sets the value corresponding to key `k` to `x`, but also returns the old value `y` associated with the key in question, if present.",
        "operands": []
      },
      "layout": {
        "min": 15997440,
        "max": 15997696,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Set, 'SETGET', false)",
        "kind": "simple",
        "prefix": 62490,
        "prefix_str": "F41A"
      },
      "signature": {
        "stack_string": "x:Slice k:Slice D:Cell|Null n:Int -> (D2:Cell 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTSETGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Combines `DICTSETREF` with `DICTGETREF` similarly to `DICTSETGET`.",
        "operands": []
      },
      "layout": {
        "min": 15997696,
        "max": 15997952,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Set, 'SETGET', false)",
        "kind": "simple",
        "prefix": 62491,
        "prefix_str": "F41B"
      },
      "signature": {
        "stack_string": "c:Cell k:Slice D:Cell|Null n:Int -> (D2:Cell 0)|(D2:Cell c2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "c2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTISETGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTISETGET`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 15997952,
        "max": 15998208,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Set, 'SETGET', false)",
        "kind": "simple",
        "prefix": 62492,
        "prefix_str": "F41C"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> (D2:Cell 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTISETGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTISETGETREF`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 15998208,
        "max": 15998464,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Set, 'SETGET', false)",
        "kind": "simple",
        "prefix": 62493,
        "prefix_str": "F41D"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> (D2:Cell 0)|(D2:Cell c2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "c2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUSETGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTISETGET`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 15998464,
        "max": 15998720,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Set, 'SETGET', false)",
        "kind": "simple",
        "prefix": 62494,
        "prefix_str": "F41E"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> (D2:Cell 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUSETGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTISETGETREF`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 15998720,
        "max": 15998976,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Set, 'SETGET', false)",
        "kind": "simple",
        "prefix": 62495,
        "prefix_str": "F41F"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> (D2:Cell 0)|(D2:Cell c2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "c2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTREPLACE": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A _Replace_ operation, which is similar to `DICTSET`, but sets the value of key `k` in dictionary `D` to `x` only if the key `k` was already present in `D`.",
        "operands": []
      },
      "layout": {
        "min": 15999488,
        "max": 15999744,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Replace, 'REPLACE', false)",
        "kind": "simple",
        "prefix": 62498,
        "prefix_str": "F422"
      },
      "signature": {
        "stack_string": "x:Slice k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTREPLACEREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A _Replace_ counterpart of `DICTSETREF`.",
        "operands": []
      },
      "layout": {
        "min": 15999744,
        "max": 16000000,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Replace, 'REPLACE', false)",
        "kind": "simple",
        "prefix": 62499,
        "prefix_str": "F423"
      },
      "signature": {
        "stack_string": "c:Cell k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIREPLACE": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTREPLACE`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16000000,
        "max": 16000256,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Replace, 'REPLACE', false)",
        "kind": "simple",
        "prefix": 62500,
        "prefix_str": "F424"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIREPLACEREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTREPLACEREF`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16000256,
        "max": 16000512,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Replace, 'REPLACE', false)",
        "kind": "simple",
        "prefix": 62501,
        "prefix_str": "F425"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUREPLACE": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTREPLACE`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16000512,
        "max": 16000768,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Replace, 'REPLACE', false)",
        "kind": "simple",
        "prefix": 62502,
        "prefix_str": "F426"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUREPLACEREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTREPLACEREF`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16000768,
        "max": 16001024,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Replace, 'REPLACE', false)",
        "kind": "simple",
        "prefix": 62503,
        "prefix_str": "F427"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTREPLACEGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A _Replace_ counterpart of `DICTSETGET`: on success, also returns the old value associated with the key in question.",
        "operands": []
      },
      "layout": {
        "min": 16001536,
        "max": 16001792,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Replace, 'REPLACEGET', false)",
        "kind": "simple",
        "prefix": 62506,
        "prefix_str": "F42A"
      },
      "signature": {
        "stack_string": "x:Slice k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTREPLACEGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A _Replace_ counterpart of `DICTSETGETREF`.",
        "operands": []
      },
      "layout": {
        "min": 16001792,
        "max": 16002048,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Replace, 'REPLACEGET', false)",
        "kind": "simple",
        "prefix": 62507,
        "prefix_str": "F42B"
      },
      "signature": {
        "stack_string": "c:Cell k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell c2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "c2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIREPLACEGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTREPLACEGET`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16002048,
        "max": 16002304,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Replace, 'REPLACEGET', false)",
        "kind": "simple",
        "prefix": 62508,
        "prefix_str": "F42C"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIREPLACEGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTREPLACEGETREF`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16002304,
        "max": 16002560,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Replace, 'REPLACEGET', false)",
        "kind": "simple",
        "prefix": 62509,
        "prefix_str": "F42D"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell c2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "c2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUREPLACEGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTREPLACEGET`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16002560,
        "max": 16002816,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Replace, 'REPLACEGET', false)",
        "kind": "simple",
        "prefix": 62510,
        "prefix_str": "F42E"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUREPLACEGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTREPLACEGETREF`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16002816,
        "max": 16003072,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Replace, 'REPLACEGET', false)",
        "kind": "simple",
        "prefix": 62511,
        "prefix_str": "F42F"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Cell c2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "c2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTADD": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "An _Add_ counterpart of `DICTSET`: sets the value associated with key `k` in dictionary `D` to `x`, but only if it is not already present in `D`.",
        "operands": []
      },
      "layout": {
        "min": 16003584,
        "max": 16003840,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Add, 'ADD', false)",
        "kind": "simple",
        "prefix": 62514,
        "prefix_str": "F432"
      },
      "signature": {
        "stack_string": "x:Slice k:Slice D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTADDREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "An _Add_ counterpart of `DICTSETREF`.",
        "operands": []
      },
      "layout": {
        "min": 16003840,
        "max": 16004096,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Add, 'ADD', false)",
        "kind": "simple",
        "prefix": 62515,
        "prefix_str": "F433"
      },
      "signature": {
        "stack_string": "c:Cell k:Slice D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIADD": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTADD`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16004096,
        "max": 16004352,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Add, 'ADD', false)",
        "kind": "simple",
        "prefix": 62516,
        "prefix_str": "F434"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIADDREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTADDREF`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16004352,
        "max": 16004608,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Add, 'ADD', false)",
        "kind": "simple",
        "prefix": 62517,
        "prefix_str": "F435"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUADD": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTADD`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16004608,
        "max": 16004864,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Add, 'ADD', false)",
        "kind": "simple",
        "prefix": 62518,
        "prefix_str": "F436"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUADDREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTADDREF`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16004864,
        "max": 16005120,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Add, 'ADD', false)",
        "kind": "simple",
        "prefix": 62519,
        "prefix_str": "F437"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTADDGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "An _Add_ counterpart of `DICTSETGET`: sets the value associated with key `k` in dictionary `D` to `x`, but only if key `k` is not already present in `D`. Otherwise, just returns the old value `y` without changing the dictionary.",
        "operands": []
      },
      "layout": {
        "min": 16005632,
        "max": 16005888,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Add, 'ADDGET', false)",
        "kind": "simple",
        "prefix": 62522,
        "prefix_str": "F43A"
      },
      "signature": {
        "stack_string": "x:Slice k:Slice D:Cell|Null n:Int -> (D:Cell y:Slice 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTADDGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "An _Add_ counterpart of `DICTSETGETREF`.",
        "operands": []
      },
      "layout": {
        "min": 16005888,
        "max": 16006144,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Add, 'ADDGET', false)",
        "kind": "simple",
        "prefix": 62523,
        "prefix_str": "F43B"
      },
      "signature": {
        "stack_string": "c:Cell k:Slice D:Cell|Null n:Int -> (D:Cell c2:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "c2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIADDGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTADDGET`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16006144,
        "max": 16006400,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Add, 'ADDGET', false)",
        "kind": "simple",
        "prefix": 62524,
        "prefix_str": "F43C"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> (D:Cell y:Slice 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIADDGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTADDGETREF`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16006400,
        "max": 16006656,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Add, 'ADDGET', false)",
        "kind": "simple",
        "prefix": 62525,
        "prefix_str": "F43D"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> (D:Cell c2:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "c2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUADDGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTADDGET`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16006656,
        "max": 16006912,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Add, 'ADDGET', false)",
        "kind": "simple",
        "prefix": 62526,
        "prefix_str": "F43E"
      },
      "signature": {
        "stack_string": "x:Slice i:Int D:Cell|Null n:Int -> (D:Cell y:Slice 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUADDGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTADDGETREF`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16006912,
        "max": 16007168,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Add, 'ADDGET', false)",
        "kind": "simple",
        "prefix": 62527,
        "prefix_str": "F43F"
      },
      "signature": {
        "stack_string": "c:Cell i:Int D:Cell|Null n:Int -> (D:Cell c2:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "c2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTDELGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D'`, the original value `x` associated with the key `k` (represented by a _Slice_), and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
        "operands": []
      },
      "layout": {
        "min": 16015872,
        "max": 16016128,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_deleteget",
        "kind": "simple",
        "prefix": 62562,
        "prefix_str": "F462"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null x:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTDELGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTDELGET`, but with `LDREF` `ENDS` applied to `x` on success, so that the value returned `c` is a _Cell_.",
        "operands": []
      },
      "layout": {
        "min": 16016128,
        "max": 16016384,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_deleteget",
        "kind": "simple",
        "prefix": 62563,
        "prefix_str": "F463"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null c:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIDELGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTDELGET`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16016384,
        "max": 16016640,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_deleteget",
        "kind": "simple",
        "prefix": 62564,
        "prefix_str": "F464"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null x:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIDELGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTDELGETREF`, but with `i` a signed `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16016640,
        "max": 16016896,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_deleteget",
        "kind": "simple",
        "prefix": 62565,
        "prefix_str": "F465"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null c:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUDELGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTDELGET`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16016896,
        "max": 16017152,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_deleteget",
        "kind": "simple",
        "prefix": 62566,
        "prefix_str": "F466"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null x:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUDELGETREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTDELGETREF`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16017152,
        "max": 16017408,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_deleteget",
        "kind": "simple",
        "prefix": 62567,
        "prefix_str": "F467"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null c:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTMIN": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Computes the minimal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the associated value `x`.",
        "operands": []
      },
      "layout": {
        "min": 16024064,
        "max": 16024320,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62594,
        "prefix_str": "F482"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(x:Slice k:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "k",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTMINREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTMIN`, but returns the only reference in the value as a _Cell_ `c`.",
        "operands": []
      },
      "layout": {
        "min": 16024320,
        "max": 16024576,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62595,
        "prefix_str": "F483"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(c:Cell k:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "k",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIMIN": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTMIN`, but computes the minimal key `i` under the assumption that all keys are big-endian signed `n`-bit integers. Notice that the key and value returned may differ from those computed by `DICTMIN` and `DICTUMIN`.",
        "operands": []
      },
      "layout": {
        "min": 16024576,
        "max": 16024832,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62596,
        "prefix_str": "F484"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(x:Slice i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIMINREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTIMIN`, but returns the only reference in the value.",
        "operands": []
      },
      "layout": {
        "min": 16024832,
        "max": 16025088,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62597,
        "prefix_str": "F485"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(c:Cell i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUMIN": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTMIN`, but returns the key as an unsigned `n`-bit _Integer_ `i`.",
        "operands": []
      },
      "layout": {
        "min": 16025088,
        "max": 16025344,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62598,
        "prefix_str": "F486"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(x:Slice i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUMINREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTUMIN`, but returns the only reference in the value.",
        "operands": []
      },
      "layout": {
        "min": 16025344,
        "max": 16025600,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62599,
        "prefix_str": "F487"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(c:Cell i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTMAX": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Computes the maximal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the associated value `x`.",
        "operands": []
      },
      "layout": {
        "min": 16026112,
        "max": 16026368,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62602,
        "prefix_str": "F48A"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(x:Slice k:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "k",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTMAXREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTMAX`, but returns the only reference in the value.",
        "operands": []
      },
      "layout": {
        "min": 16026368,
        "max": 16026624,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62603,
        "prefix_str": "F48B"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(c:Cell k:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "k",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIMAX": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTMAX`, but computes the maximal key `i` under the assumption that all keys are big-endian signed `n`-bit integers. Notice that the key and value returned may differ from those computed by `DICTMAX` and `DICTUMAX`.",
        "operands": []
      },
      "layout": {
        "min": 16026624,
        "max": 16026880,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62604,
        "prefix_str": "F48C"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(x:Slice i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIMAXREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTIMAX`, but returns the only reference in the value.",
        "operands": []
      },
      "layout": {
        "min": 16026880,
        "max": 16027136,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62605,
        "prefix_str": "F48D"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(c:Cell i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUMAX": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTMAX`, but returns the key as an unsigned `n`-bit _Integer_ `i`.",
        "operands": []
      },
      "layout": {
        "min": 16027136,
        "max": 16027392,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62606,
        "prefix_str": "F48E"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(x:Slice i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUMAXREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTUMAX`, but returns the only reference in the value.",
        "operands": []
      },
      "layout": {
        "min": 16027392,
        "max": 16027648,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62607,
        "prefix_str": "F48F"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (âˆ… 0)|(c:Cell i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTREMMIN": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Computes the minimal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, removes `k` from the dictionary, and returns `k` along with the associated value `x` and the modified dictionary `D'`.",
        "operands": []
      },
      "layout": {
        "min": 16028160,
        "max": 16028416,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62610,
        "prefix_str": "F492"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null x:Slice k:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "k",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTREMMINREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTREMMIN`, but returns the only reference in the value as a _Cell_ `c`.",
        "operands": []
      },
      "layout": {
        "min": 16028416,
        "max": 16028672,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62611,
        "prefix_str": "F493"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null c:Cell k:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "k",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIREMMIN": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTREMMIN`, but computes the minimal key `i` under the assumption that all keys are big-endian signed `n`-bit integers. Notice that the key and value returned may differ from those computed by `DICTREMMIN` and `DICTUREMMIN`.",
        "operands": []
      },
      "layout": {
        "min": 16028672,
        "max": 16028928,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62612,
        "prefix_str": "F494"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null x:Slice i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIREMMINREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTIREMMIN`, but returns the only reference in the value.",
        "operands": []
      },
      "layout": {
        "min": 16028928,
        "max": 16029184,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62613,
        "prefix_str": "F495"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null c:Cell i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUREMMIN": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTREMMIN`, but returns the key as an unsigned `n`-bit _Integer_ `i`.",
        "operands": []
      },
      "layout": {
        "min": 16029184,
        "max": 16029440,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62614,
        "prefix_str": "F496"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null x:Slice i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUREMMINREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTUREMMIN`, but returns the only reference in the value.",
        "operands": []
      },
      "layout": {
        "min": 16029440,
        "max": 16029696,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62615,
        "prefix_str": "F497"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null c:Cell i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTREMMAX": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Computes the maximal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, removes `k` from the dictionary, and returns `k` along with the associated value `x` and the modified dictionary `D'`.",
        "operands": []
      },
      "layout": {
        "min": 16030208,
        "max": 16030464,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62618,
        "prefix_str": "F49A"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null x:Slice k:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "k",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTREMMAXREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTREMMAX`, but returns the only reference in the value as a _Cell_ `c`.",
        "operands": []
      },
      "layout": {
        "min": 16030464,
        "max": 16030720,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62619,
        "prefix_str": "F49B"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null c:Cell k:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "k",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIREMMAX": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTREMMAX`, but computes the minimal key `i` under the assumption that all keys are big-endian signed `n`-bit integers. Notice that the key and value returned may differ from those computed by `DICTREMMAX` and `DICTUREMMAX`.",
        "operands": []
      },
      "layout": {
        "min": 16030720,
        "max": 16030976,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62620,
        "prefix_str": "F49C"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null x:Slice i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIREMMAXREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTIREMMAX`, but returns the only reference in the value.",
        "operands": []
      },
      "layout": {
        "min": 16030976,
        "max": 16031232,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62621,
        "prefix_str": "F49D"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null c:Cell i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUREMMAX": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTREMMAX`, but returns the key as an unsigned `n`-bit _Integer_ `i`.",
        "operands": []
      },
      "layout": {
        "min": 16031232,
        "max": 16031488,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62622,
        "prefix_str": "F49E"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null x:Slice i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUREMMAXREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTUREMMAX`, but returns the only reference in the value.",
        "operands": []
      },
      "layout": {
        "min": 16031488,
        "max": 16031744,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getmin",
        "kind": "simple",
        "prefix": 62623,
        "prefix_str": "F49F"
      },
      "signature": {
        "stack_string": "D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null c:Cell i:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    },
                    {
                      "type": "simple",
                      "name": "c",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "i",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTSETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16007424,
        "max": 16007680,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Set, 'SET', true)",
        "kind": "simple",
        "prefix": 62529,
        "prefix_str": "F441"
      },
      "signature": {
        "stack_string": "b:Builder k:Slice D:Cell|Null n:Int -> D2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "DICTISETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16007680,
        "max": 16007936,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Set, 'SET', true)",
        "kind": "simple",
        "prefix": 62530,
        "prefix_str": "F442"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> D2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "DICTUSETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16007936,
        "max": 16008192,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Set, 'SET', true)",
        "kind": "simple",
        "prefix": 62531,
        "prefix_str": "F443"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> D2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "DICTSETGETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16008448,
        "max": 16008704,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Set, 'SETGET', true)",
        "kind": "simple",
        "prefix": 62533,
        "prefix_str": "F445"
      },
      "signature": {
        "stack_string": "b:Builder k:Slice D:Cell|Null n:Int -> (D2:Cell 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTISETGETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16008704,
        "max": 16008960,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Set, 'SETGET', true)",
        "kind": "simple",
        "prefix": 62534,
        "prefix_str": "F446"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> (D2:Cell 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUSETGETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16008960,
        "max": 16009216,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Set, 'SETGET', true)",
        "kind": "simple",
        "prefix": 62535,
        "prefix_str": "F447"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> (D2:Cell 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTREPLACEB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16009472,
        "max": 16009728,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Replace, 'REPLACE', true)",
        "kind": "simple",
        "prefix": 62537,
        "prefix_str": "F449"
      },
      "signature": {
        "stack_string": "b:Builder k:Slice D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIREPLACEB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16009728,
        "max": 16009984,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Replace, 'REPLACE', true)",
        "kind": "simple",
        "prefix": 62538,
        "prefix_str": "F44A"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUREPLACEB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16009984,
        "max": 16010240,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Replace, 'REPLACE', true)",
        "kind": "simple",
        "prefix": 62539,
        "prefix_str": "F44B"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTREPLACEGETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16010496,
        "max": 16010752,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Replace, 'REPLACEGET', true)",
        "kind": "simple",
        "prefix": 62541,
        "prefix_str": "F44D"
      },
      "signature": {
        "stack_string": "b:Builder k:Slice D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIREPLACEGETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16010752,
        "max": 16011008,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Replace, 'REPLACEGET', true)",
        "kind": "simple",
        "prefix": 62542,
        "prefix_str": "F44E"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUREPLACEGETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16011008,
        "max": 16011264,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Replace, 'REPLACEGET', true)",
        "kind": "simple",
        "prefix": 62543,
        "prefix_str": "F44F"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell y:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTADDB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16011520,
        "max": 16011776,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Add, 'ADD', true)",
        "kind": "simple",
        "prefix": 62545,
        "prefix_str": "F451"
      },
      "signature": {
        "stack_string": "b:Builder k:Slice D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIADDB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16011776,
        "max": 16012032,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Add, 'ADD', true)",
        "kind": "simple",
        "prefix": 62546,
        "prefix_str": "F452"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUADDB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16012032,
        "max": 16012288,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_set(_1, _2, Add, 'ADD', true)",
        "kind": "simple",
        "prefix": 62547,
        "prefix_str": "F453"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> (D:Cell 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTADDGETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16012544,
        "max": 16012800,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Add, 'ADDGET', true)",
        "kind": "simple",
        "prefix": 62549,
        "prefix_str": "F455"
      },
      "signature": {
        "stack_string": "b:Builder k:Slice D:Cell|Null n:Int -> (D:Cell y:Slice 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIADDGETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16012800,
        "max": 16013056,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Add, 'ADDGET', true)",
        "kind": "simple",
        "prefix": 62550,
        "prefix_str": "F456"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> (D:Cell y:Slice 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUADDGETB": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16013056,
        "max": 16013312,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget(_1, _2, Add, 'ADDGET', true)",
        "kind": "simple",
        "prefix": 62551,
        "prefix_str": "F457"
      },
      "signature": {
        "stack_string": "b:Builder i:Int D:Cell|Null n:Int -> (D:Cell y:Slice 0)|(D2:Cell -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Cell"]
                    },
                    {
                      "type": "simple",
                      "name": "y",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Cell"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTDEL": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D'` and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`.",
        "operands": []
      },
      "layout": {
        "min": 16013568,
        "max": 16013824,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_delete",
        "kind": "simple",
        "prefix": 62553,
        "prefix_str": "F459"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIDEL": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A version of `DICTDEL` with the key represented by a signed `n`-bit _Integer_ `i`. If `i` does not fit into `n` bits, simply returns `D` `0` (''key not found, dictionary unmodified'').",
        "operands": []
      },
      "layout": {
        "min": 16013824,
        "max": 16014080,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_delete",
        "kind": "simple",
        "prefix": 62554,
        "prefix_str": "F45A"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUDEL": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTIDEL`, but with `i` an unsigned `n`-bit integer.",
        "operands": []
      },
      "layout": {
        "min": 16014080,
        "max": 16014336,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_delete",
        "kind": "simple",
        "prefix": 62555,
        "prefix_str": "F45B"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (D:Slice|Null 0)|(D2:Slice|Null -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "D2",
                      "value_types": ["Slice", "Null"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTGETOPTREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A variant of `DICTGETREF` that returns _Null_ instead of the value `c^?` if the key `k` is absent from dictionary `D`.",
        "operands": []
      },
      "layout": {
        "min": 16017664,
        "max": 16017920,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_optref",
        "kind": "simple",
        "prefix": 62569,
        "prefix_str": "F469"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> c:Cell|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell", "Null"]
            }
          ]
        }
      }
    },
    "DICTIGETOPTREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTGETOPTREF`, but with `i` a signed `n`-bit integer. If the key `i` is out of range, also returns _Null_.",
        "operands": []
      },
      "layout": {
        "min": 16017920,
        "max": 16018176,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_optref",
        "kind": "simple",
        "prefix": 62570,
        "prefix_str": "F46A"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> c:Cell|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell", "Null"]
            }
          ]
        }
      }
    },
    "DICTUGETOPTREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`DICTGETOPTREF`, but with `i` an unsigned `n`-bit integer. If the key `i` is out of range, also returns _Null_.",
        "operands": []
      },
      "layout": {
        "min": 16018176,
        "max": 16018432,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_get_optref",
        "kind": "simple",
        "prefix": 62571,
        "prefix_str": "F46B"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> c:Cell|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell", "Null"]
            }
          ]
        }
      }
    },
    "DICTSETGETOPTREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "A variant of both `DICTGETOPTREF` and `DICTSETGETREF` that sets the value corresponding to key `k` in dictionary `D` to `c^?` (if `c^?` is _Null_, then the key is deleted instead), and returns the old value `~c^?` (if the key `k` was absent before, returns _Null_ instead).",
        "operands": []
      },
      "layout": {
        "min": 16018688,
        "max": 16018944,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget_optref",
        "kind": "simple",
        "prefix": 62573,
        "prefix_str": "F46D"
      },
      "signature": {
        "stack_string": "c:Cell|Null k:Slice D:Cell|Null n:Int -> D2:Slice|Null c2:Cell|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice", "Null"]
            },
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Cell", "Null"]
            }
          ]
        }
      }
    },
    "DICTISETGETOPTREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to primitive `DICTSETGETOPTREF`, but using signed `n`-bit _Integer_ `i` as a key. If `i` does not fit into `n` bits, throws a range checking exception.",
        "operands": []
      },
      "layout": {
        "min": 16018944,
        "max": 16019200,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget_optref",
        "kind": "simple",
        "prefix": 62574,
        "prefix_str": "F46E"
      },
      "signature": {
        "stack_string": "c:Cell|Null i:Int D:Cell|Null n:Int -> D2:Slice|Null c2:Cell|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice", "Null"]
            },
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Cell", "Null"]
            }
          ]
        }
      }
    },
    "DICTUSETGETOPTREF": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to primitive `DICTSETGETOPTREF`, but using unsigned `n`-bit _Integer_ `i` as a key.",
        "operands": []
      },
      "layout": {
        "min": 16019200,
        "max": 16019456,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_setget_optref",
        "kind": "simple",
        "prefix": 62575,
        "prefix_str": "F46F"
      },
      "signature": {
        "stack_string": "c:Cell|Null i:Int D:Cell|Null n:Int -> D2:Slice|Null c2:Cell|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice", "Null"]
            },
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Cell", "Null"]
            }
          ]
        }
      }
    },
    "SUBDICTGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Constructs a subdictionary consisting of all keys beginning with prefix `k` (represented by a _Slice_, the first `0 <= l <= n <= 1023` data bits of which are used as a key) of length `l` in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys. On success, returns the new subdictionary of the same type `HashmapE(n,X)` as a _Slice_ `D'`.",
        "operands": []
      },
      "layout": {
        "min": 16036096,
        "max": 16036352,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_subdict_get",
        "kind": "simple",
        "prefix": 62641,
        "prefix_str": "F4B1"
      },
      "signature": {
        "stack_string": "k:Slice l:Int D:Cell|Null n:Int -> D2:Slice|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice", "Null"]
            }
          ]
        }
      }
    },
    "SUBDICTIGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Variant of `SUBDICTGET` with the prefix represented by a signed big-endian `l`-bit _Integer_ `x`, where necessarily `l <= 257`.",
        "operands": []
      },
      "layout": {
        "min": 16036352,
        "max": 16036608,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_subdict_get",
        "kind": "simple",
        "prefix": 62642,
        "prefix_str": "F4B2"
      },
      "signature": {
        "stack_string": "x:Int l:Int D:Cell|Null n:Int -> D2:Slice|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice", "Null"]
            }
          ]
        }
      }
    },
    "SUBDICTUGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Variant of `SUBDICTGET` with the prefix represented by an unsigned big-endian `l`-bit _Integer_ `x`, where necessarily `l <= 256`.",
        "operands": []
      },
      "layout": {
        "min": 16036608,
        "max": 16036864,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_subdict_get",
        "kind": "simple",
        "prefix": 62643,
        "prefix_str": "F4B3"
      },
      "signature": {
        "stack_string": "x:Int l:Int D:Cell|Null n:Int -> D2:Slice|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice", "Null"]
            }
          ]
        }
      }
    },
    "SUBDICTRPGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `SUBDICTGET`, but removes the common prefix `k` from all keys of the new dictionary `D'`, which becomes of type `HashmapE(n-l,X)`.",
        "operands": []
      },
      "layout": {
        "min": 16037120,
        "max": 16037376,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_subdict_get",
        "kind": "simple",
        "prefix": 62645,
        "prefix_str": "F4B5"
      },
      "signature": {
        "stack_string": "k:Slice l:Int D:Cell|Null n:Int -> D2:Slice|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice", "Null"]
            }
          ]
        }
      }
    },
    "SUBDICTIRPGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Variant of `SUBDICTRPGET` with the prefix represented by a signed big-endian `l`-bit _Integer_ `x`, where necessarily `l <= 257`.",
        "operands": []
      },
      "layout": {
        "min": 16037376,
        "max": 16037632,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_subdict_get",
        "kind": "simple",
        "prefix": 62646,
        "prefix_str": "F4B6"
      },
      "signature": {
        "stack_string": "x:Int l:Int D:Cell|Null n:Int -> D2:Slice|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice", "Null"]
            }
          ]
        }
      }
    },
    "SUBDICTURPGET": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Variant of `SUBDICTRPGET` with the prefix represented by an unsigned big-endian `l`-bit _Integer_ `x`, where necessarily `l <= 256`.",
        "operands": []
      },
      "layout": {
        "min": 16037632,
        "max": 16037888,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_subdict_get",
        "kind": "simple",
        "prefix": 62647,
        "prefix_str": "F4B7"
      },
      "signature": {
        "stack_string": "x:Int l:Int D:Cell|Null n:Int -> D2:Slice|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "l",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D2",
              "value_types": ["Slice", "Null"]
            }
          ]
        }
      }
    },
    "THROWANY": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Throws an exception with error code `n` and parameter set to zero. Parameter represents the additional information passed to the exception handler.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "other_implementations": [
          {
            "exact": false,
            "instructions": ["ZERO", "SWAP", "THROWARGANY"]
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 15921152,
        "max": 15921408,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_throw_any",
        "kind": "simple",
        "prefix": 62192,
        "prefix_str": "F2F0"
      },
      "effects": [
        {
          "$": "AlwaysThrow",
          "costs": [50]
        }
      ],
      "signature": {
        "stack_string": "n:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "THROWARGANY": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Throws an exception with error code `n` and parameter set to `x`. Parameter represents the additional information passed to the exception handler.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "other_implementations": [
          {
            "exact": false,
            "instructions": ["PUSHCTR 2", "JMPXARGS 2"]
          }
        ],
        "operands": []
      },
      "layout": {
        "min": 15921408,
        "max": 15921664,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_throw_any",
        "kind": "simple",
        "prefix": 62193,
        "prefix_str": "F2F1"
      },
      "effects": [
        {
          "$": "AlwaysThrow",
          "costs": [50]
        }
      ],
      "signature": {
        "stack_string": "x:Int n:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "THROWANYIFNOT": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Throws an exception with error code `n` and parameter set to zero only if `f` is EQUAL to 0. Parameter represents the additional information passed to the exception handler.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": []
      },
      "layout": {
        "min": 15922176,
        "max": 15922432,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_throw_any",
        "kind": "simple",
        "prefix": 62196,
        "prefix_str": "F2F4"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "n:Int f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "THROWARGANYIFNOT": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Throws an exception with error code `n` and parameter set to `x` taken from the stack only if `f` is EQUAL to 0. Parameter represents the additional information passed to the exception handler.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": []
      },
      "layout": {
        "min": 15922432,
        "max": 15922688,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_throw_any",
        "kind": "simple",
        "prefix": 62197,
        "prefix_str": "F2F5"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "x:Int n:Int f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTGETNEXT": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Computes the minimal key `k'` in dictionary `D` that is lexicographically greater than `k`, and returns `k'` (represented by a _Slice_) along with associated value `x'` (also represented by a _Slice_).",
        "operands": []
      },
      "layout": {
        "min": 16020480,
        "max": 16020736,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62580,
        "prefix_str": "F474"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice k2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "k2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTGETNEXTEQ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETNEXT`, but computes the minimal key `k'` that is lexicographically greater than or equal to `k`.",
        "operands": []
      },
      "layout": {
        "min": 16020736,
        "max": 16020992,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62581,
        "prefix_str": "F475"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice k2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "k2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTGETPREV": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETNEXT`, but computes the maximal key `k'` lexicographically smaller than `k`.",
        "operands": []
      },
      "layout": {
        "min": 16020992,
        "max": 16021248,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62582,
        "prefix_str": "F476"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice k2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "k2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTGETPREVEQ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETPREV`, but computes the maximal key `k'` lexicographically smaller than or equal to `k`.",
        "operands": []
      },
      "layout": {
        "min": 16021248,
        "max": 16021504,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62583,
        "prefix_str": "F477"
      },
      "signature": {
        "stack_string": "k:Slice D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice k2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "k",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "k2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIGETNEXT": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETNEXT`, but interprets all keys in dictionary `D` as big-endian signed `n`-bit integers, and computes the minimal key `i'` that is larger than _Integer_ `i` (which does not necessarily fit into `n` bits).",
        "operands": []
      },
      "layout": {
        "min": 16021504,
        "max": 16021760,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62584,
        "prefix_str": "F478"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice i2:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIGETNEXTEQ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETNEXTEQ`, but interprets keys as signed `n`-bit integers.",
        "operands": []
      },
      "layout": {
        "min": 16021760,
        "max": 16022016,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62585,
        "prefix_str": "F479"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice i2:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIGETPREV": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETPREV`, but interprets keys as signed `n`-bit integers.",
        "operands": []
      },
      "layout": {
        "min": 16022016,
        "max": 16022272,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62586,
        "prefix_str": "F47A"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice i2:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTIGETPREVEQ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETPREVEQ`, but interprets keys as signed `n`-bit integers.",
        "operands": []
      },
      "layout": {
        "min": 16022272,
        "max": 16022528,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62587,
        "prefix_str": "F47B"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice i2:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUGETNEXT": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETNEXT`, but interprets all keys in dictionary `D` as big-endian unsigned `n`-bit integers, and computes the minimal key `i'` that is larger than _Integer_ `i` (which does not necessarily fit into `n` bits, and is not necessarily non-negative).",
        "operands": []
      },
      "layout": {
        "min": 16022528,
        "max": 16022784,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62588,
        "prefix_str": "F47C"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice i2:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUGETNEXTEQ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETNEXTEQ`, but interprets keys as unsigned `n`-bit integers.",
        "operands": []
      },
      "layout": {
        "min": 16022784,
        "max": 16023040,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62589,
        "prefix_str": "F47D"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice i2:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUGETPREV": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETPREV`, but interprets keys as unsigned `n`-bit integers.",
        "operands": []
      },
      "layout": {
        "min": 16023040,
        "max": 16023296,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62590,
        "prefix_str": "F47E"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice i2:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTUGETPREVEQ": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `DICTGETPREVEQ`, but interprets keys a unsigned `n`-bit integers.",
        "operands": []
      },
      "layout": {
        "min": 16023296,
        "max": 16023552,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dict_getnear",
        "kind": "simple",
        "prefix": 62591,
        "prefix_str": "F47F"
      },
      "signature": {
        "stack_string": "i:Int D:Cell|Null n:Int -> (âˆ… 0)|(x2:Slice i2:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "i",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x2",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "i2",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "ADDINT": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 10878976,
        "max": 10944512,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_add_tinyint8(_1, _2, false)",
        "kind": "fixed",
        "prefix": 166,
        "prefix_str": "A6"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULINT": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 10944512,
        "max": 11010048,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_mul_tinyint8(_1, _2, false)",
        "kind": "fixed",
        "prefix": 167,
        "prefix_str": "A7"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QADDINT": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12035584,
        "max": 12035840,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_add_tinyint8(_1, _2, true)",
        "kind": "fixed",
        "prefix": 47014,
        "prefix_str": "B7A6"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QMULINT": {
      "category": "arithmetic",
      "subCategory": "add_mul",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12035840,
        "max": 12036096,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_mul_tinyint8(_1, _2, true)",
        "kind": "fixed",
        "prefix": 47015,
        "prefix_str": "B7A7"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "EQINT": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "Compares `x` from stack and `y` from arguments for equality and returns `-1` if equal and `0` otherwise.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 1 element."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          }
        ],
        "operands": ["y"]
      },
      "layout": {
        "min": 12582912,
        "max": 12648448,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_cmp_int(_1, _2, 0x878, false, 'EQ')",
        "kind": "fixed",
        "prefix": 192,
        "prefix_str": "C0"
      },
      "signature": {
        "stack_string": "x:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "LESSINT": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "Compares `x` from stack and `y` from arguments for less than and returns `-1` if true and `0` otherwise.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 1 element."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          }
        ],
        "operands": ["y"]
      },
      "layout": {
        "min": 12648448,
        "max": 12713984,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_cmp_int(_1, _2, 0x887, false, 'LESS')",
        "kind": "fixed",
        "prefix": 193,
        "prefix_str": "C1"
      },
      "signature": {
        "stack_string": "x:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "GTINT": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "Compares `x` from stack and `y` from arguments for greater than and returns `-1` if true and `0` otherwise.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 1 element."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          }
        ],
        "operands": ["y"]
      },
      "layout": {
        "min": 12713984,
        "max": 12779520,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_cmp_int(_1, _2, 0x788, false, 'GT')",
        "kind": "fixed",
        "prefix": 194,
        "prefix_str": "C2"
      },
      "signature": {
        "stack_string": "x:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "NEQINT": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "Compares `x` from stack and `y` from arguments for inequality and returns `-1` if true and `0` otherwise.",
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 1 element."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          }
        ],
        "operands": ["y"]
      },
      "layout": {
        "min": 12779520,
        "max": 12845056,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_cmp_int(_1, _2, 0x787, false, 'NEQ')",
        "kind": "fixed",
        "prefix": 195,
        "prefix_str": "C3"
      },
      "signature": {
        "stack_string": "x:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "QEQINT": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12042240,
        "max": 12042496,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_cmp_int(_1, _2, 0x878, true, 'QEQ')",
        "kind": "fixed",
        "prefix": 47040,
        "prefix_str": "B7C0"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QLESSINT": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12042496,
        "max": 12042752,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_cmp_int(_1, _2, 0x887, true, 'QLESS')",
        "kind": "fixed",
        "prefix": 47041,
        "prefix_str": "B7C1"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QGTINT": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12042752,
        "max": 12043008,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_cmp_int(_1, _2, 0x788, true, 'QGT')",
        "kind": "fixed",
        "prefix": 47042,
        "prefix_str": "B7C2"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QNEQINT": {
      "category": "arithmetic",
      "subCategory": "int_cmp",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12043008,
        "max": 12043264,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_cmp_int(_1, _2, 0x787, true, 'QNEQ')",
        "kind": "fixed",
        "prefix": 47043,
        "prefix_str": "B7C3"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PUSHPOW2DEC": {
      "category": "arithmetic",
      "subCategory": "int_const",
      "description": {
        "short": "",
        "long": "Pushes `2^(xx+1)-1` for `0 <= xx <= 255`.",
        "operands": ["x"]
      },
      "layout": {
        "min": 8650752,
        "max": 8716288,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_push_pow2dec",
        "kind": "fixed",
        "prefix": 132,
        "prefix_str": "84"
      },
      "signature": {
        "stack_string": "âˆ… -> result:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PUSHNEGPOW2": {
      "category": "arithmetic",
      "subCategory": "int_const",
      "description": {
        "short": "",
        "long": "Pushes `-2^(xx+1)` for `0 <= xx <= 255`.",
        "operands": ["x"]
      },
      "layout": {
        "min": 8716288,
        "max": 8781824,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_push_negpow2",
        "kind": "fixed",
        "prefix": 133,
        "prefix_str": "85"
      },
      "signature": {
        "stack_string": "âˆ… -> result:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "FITS": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "Checks whether `x` is a `cc+1`-bit signed integer for `0 <= cc <= 255` (i.e., whether `-2^cc <= x < 2^cc`).\nIf not, either triggers an integer overflow exception, or replaces `x` with a `NaN` (quiet version).",
        "operands": ["c"]
      },
      "layout": {
        "min": 11796480,
        "max": 11862016,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_fits_tinyint8(_1, _2, false)",
        "kind": "fixed",
        "prefix": 180,
        "prefix_str": "B4"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "x:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "UFITS": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "Checks whether `x` is a `cc+1`-bit unsigned integer for `0 <= cc <= 255` (i.e., whether `0 <= x < 2^(cc+1)`).",
        "operands": ["c"]
      },
      "layout": {
        "min": 11862016,
        "max": 11927552,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_ufits_tinyint8(_1, _2, false)",
        "kind": "fixed",
        "prefix": 181,
        "prefix_str": "B5"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "x:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QFITS": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "Replaces `x` with a `NaN` if x is not a `cc+1`-bit signed integer, leaves it intact otherwise.",
        "operands": ["c"]
      },
      "layout": {
        "min": 12039168,
        "max": 12039424,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_fits_tinyint8(_1, _2, true)",
        "kind": "fixed",
        "prefix": 47028,
        "prefix_str": "B7B4"
      },
      "signature": {
        "stack_string": "x:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QUFITS": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "Replaces `x` with a `NaN` if x is not a `cc+1`-bit unsigned integer, leaves it intact otherwise.",
        "operands": ["c"]
      },
      "layout": {
        "min": 12039424,
        "max": 12039680,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_ufits_tinyint8(_1, _2, true)",
        "kind": "fixed",
        "prefix": 47029,
        "prefix_str": "B7B5"
      },
      "signature": {
        "stack_string": "x:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SETCONTCTRMANY": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 15590144,
        "max": 15590400,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_setcont_ctr_many",
        "version": 9,
        "kind": "fixed",
        "prefix": 60899,
        "prefix_str": "EDE3"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "CALLCCARGS": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Similar to `CALLXARGS`, but pushes the old value of `cc` (along with the top `0 <= p <= 15` values from the original stack) into the stack of newly-invoked continuation `c`, setting `cc.nargs` to `-1 <= r <= 14`.",
        "operands": ["p", "r"]
      },
      "layout": {
        "min": 14366208,
        "max": 14366464,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_callcc_args",
        "kind": "fixed",
        "prefix": 56118,
        "prefix_str": "DB36"
      },
      "signature": {
        "stack_string": "x_1...x_p c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "p",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "arg"
                }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "TRYARGS": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Similar to `TRY`, but with `[p] [r] CALLXARGS` internally used instead of `EXECUTE`.\nIn this way, all but the top `0 <= p <= 15` stack elements will be saved into current continuation's stack, and then restored upon return from either `c` or `c'`, with the top `0 <= r <= 15` values of the resulting stack of `c` or `c'` copied as return values.",
        "tags": ["exception_handling", "control_flow"],
        "operands": ["p", "r"]
      },
      "layout": {
        "min": 15925248,
        "max": 15990784,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_try",
        "kind": "fixed",
        "prefix": 243,
        "prefix_str": "F3"
      },
      "signature": {
        "stack_string": "x_1...x_r body:Continuation handler:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "r",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "arg"
                }
              ]
            },
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            },
            {
              "type": "simple",
              "name": "handler",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "PLDREFIDX": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the `n`-th cell reference of _Slice_ `s`, where `0 <= n <= 3`.",
        "tags": ["slice parsing"],
        "operands": ["n"]
      },
      "layout": {
        "min": 14109696,
        "max": 14110720,
        "checkLen": 14,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 2,
              "range": {
                "min": "0",
                "max": "3"
              }
            }
          ]
        },
        "exec": "exec_preload_ref_fixed",
        "kind": "fixed",
        "prefix": 13779,
        "prefix_str": "35D3"
      },
      "signature": {
        "stack_string": "s:Slice -> c:Cell",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            }
          ]
        }
      }
    },
    "CHASHI": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns `i`th hash of the cell.",
        "operands": ["n"]
      },
      "layout": {
        "min": 14116864,
        "max": 14117888,
        "checkLen": 14,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 2,
              "range": {
                "min": "0",
                "max": "3"
              }
            }
          ]
        },
        "exec": "exec_cell_hash_i(_1, _2, false)",
        "version": 6,
        "kind": "fixed",
        "prefix": 13786,
        "prefix_str": "35DA"
      },
      "signature": {
        "stack_string": "cell:Cell -> hash:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cell",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "hash",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CDEPTHI": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns `i`th depth of the cell.",
        "operands": ["n"]
      },
      "layout": {
        "min": 14117888,
        "max": 14118912,
        "checkLen": 14,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 2,
              "range": {
                "min": "0",
                "max": "3"
              }
            }
          ]
        },
        "exec": "exec_cell_depth_i(_1, _2, false)",
        "version": 6,
        "kind": "fixed",
        "prefix": 13787,
        "prefix_str": "35DB"
      },
      "signature": {
        "stack_string": "cell:Cell -> depth:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "cell",
              "value_types": ["Cell"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "depth",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "JMPDICT": {
      "category": "continuation",
      "subCategory": "continuation_dict_jump",
      "description": {
        "short": "",
        "long": "Jumps to the continuation in `c3`, pushing integer `0 <= n < 2^14` as its argument.\nApproximately equivalent to `n PUSHINT` `c3 PUSHCTR` `JMPX`.",
        "operands": ["n"]
      },
      "layout": {
        "min": 15810560,
        "max": 15826944,
        "checkLen": 10,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 14,
              "range": {
                "min": "0",
                "max": "16383"
              }
            }
          ]
        },
        "exec": "exec_jmpdict",
        "kind": "fixed",
        "prefix": 965,
        "prefix_str": "3C5"
      },
      "signature": {
        "stack_string": "âˆ… -> n:Int",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 3
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PREPAREDICT": {
      "category": "continuation",
      "subCategory": "continuation_dict_jump",
      "description": {
        "short": "",
        "long": "Equivalent to `n PUSHINT` `c3 PUSHCTR`, for `0 <= n < 2^14`.\nIn this way, `[n] CALL` is approximately equivalent to `[n] PREPARE` `EXECUTE`, and `[n] JMP` is approximately equivalent to `[n] PREPARE` `JMPX`.\nOne might use, for instance, `CALLXARGS` or `CALLCC` instead of `EXECUTE` here.",
        "operands": ["n"]
      },
      "layout": {
        "min": 15826944,
        "max": 15843328,
        "checkLen": 10,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 14,
              "range": {
                "min": "0",
                "max": "16383"
              }
            }
          ]
        },
        "exec": "exec_preparedict",
        "kind": "fixed",
        "prefix": 966,
        "prefix_str": "3C6"
      },
      "signature": {
        "stack_string": "âˆ… -> n:Int c:Continuation",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 3
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "THROWARG": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Throws an exception with exit code `x` taken from the stack.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": ["n"]
      },
      "layout": {
        "min": 15910912,
        "max": 15912960,
        "checkLen": 13,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 11,
              "range": {
                "min": "0",
                "max": "2047"
              }
            }
          ]
        },
        "exec": "exec_throw_arg_fixed(_1, _2, 0x7ff, 0)",
        "kind": "fixed",
        "prefix": 7769,
        "prefix_str": "1E59"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "x:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "THROWARGIF": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Conditionally throws an exception with error code `x` taken from stack if `f` is NOT EQUAL to 0.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": ["n"]
      },
      "layout": {
        "min": 15915008,
        "max": 15917056,
        "checkLen": 13,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 11,
              "range": {
                "min": "0",
                "max": "2047"
              }
            }
          ]
        },
        "exec": "exec_throw_arg_fixed(_1, _2, 0x7ff, 3)",
        "kind": "fixed",
        "prefix": 7771,
        "prefix_str": "1E5B"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "x:Int f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "THROWARGIFNOT": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Conditionally throws an exception with error code `x` taken from stack if `f` is EQUAL to 0.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": ["n"]
      },
      "layout": {
        "min": 15919104,
        "max": 15921152,
        "checkLen": 13,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 11,
              "range": {
                "min": "0",
                "max": "2047"
              }
            }
          ]
        },
        "exec": "exec_throw_arg_fixed(_1, _2, 0x7ff, 2)",
        "kind": "fixed",
        "prefix": 7773,
        "prefix_str": "1E5D"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "x:Int f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "JMPXARGS": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "_Jumps_ to continuation `c`, passing only the top `0 <= p <= 15` values from the current stack to it (the remainder of the current stack is discarded).",
        "operands": ["p"]
      },
      "layout": {
        "min": 14356480,
        "max": 14360576,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_jmpx_args",
        "kind": "fixed",
        "prefix": 3505,
        "prefix_str": "DB1"
      },
      "signature": {
        "stack_string": "x_1...x_p c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "p",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "arg"
                }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "RETARGS": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "_Returns_ to `c0`, with `0 <= r <= 15` return values taken from the current stack.",
        "operands": ["r"]
      },
      "layout": {
        "min": 14360576,
        "max": 14364672,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_ret_args",
        "kind": "fixed",
        "prefix": 3506,
        "prefix_str": "DB2"
      },
      "signature": {
        "stack_string": "x_1...x_p -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "p",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "arg"
                }
              ]
            }
          ]
        }
      }
    },
    "RETURNARGS": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Leaves only the top `0 <= p <= 15` values in the current stack (somewhat similarly to `ONLYTOPX`), with all the unused bottom values not discarded, but saved into continuation `c0` in the same way as `SETCONTARGS` does.",
        "operands": ["p"]
      },
      "layout": {
        "min": 15532032,
        "max": 15536128,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_return_args",
        "kind": "fixed",
        "prefix": 3792,
        "prefix_str": "ED0"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "BLKDROP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `DROP` performed `i` times.",
        "operands": ["i"]
      },
      "layout": {
        "min": 6225920,
        "max": 6230016,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_blkdrop",
        "kind": "fixed",
        "prefix": 1520,
        "prefix_str": "5F0"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "TUPLE": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Creates a new _Tuple_ `t=(x_1, ... ,x_n)` containing `n` values `x_1`,..., `x_n`.",
        "operands": ["n"]
      },
      "layout": {
        "min": 7274496,
        "max": 7278592,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_mktuple",
        "kind": "fixed",
        "prefix": 1776,
        "prefix_str": "6F0"
      },
      "effects": [
        {
          "$": "Tuple",
          "costs": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        }
      ],
      "signature": {
        "stack_string": "x_1...x_n -> t:Tuple",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        }
      }
    },
    "INDEX": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns the `$k`-th element of a _Tuple_ `$t`.\nThrows if `$t` is not a tuple.",
        "operands": ["k"]
      },
      "layout": {
        "min": 7278592,
        "max": 7282688,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_tuple_index",
        "kind": "fixed",
        "prefix": 1777,
        "prefix_str": "6F1"
      },
      "signature": {
        "stack_string": "t:Tuple -> x:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "UNTUPLE": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Unpacks a _Tuple_ `t=(x_1,...,x_n)` of length equal to `0 <= n <= 15`.\nIf `t` is not a _Tuple_, or if `|t| != n`, a type check exception is thrown.",
        "operands": ["n"]
      },
      "layout": {
        "min": 7282688,
        "max": 7286784,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_untuple",
        "kind": "fixed",
        "prefix": 1778,
        "prefix_str": "6F2"
      },
      "effects": [
        {
          "$": "Tuple",
          "costs": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        }
      ],
      "signature": {
        "stack_string": "t:Tuple -> x_1...x_n",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "n",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            }
          ]
        }
      }
    },
    "UNPACKFIRST": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Unpacks first `k` elements of a _Tuple_ `t`.\nIf `|t|<k`, throws a type check exception.",
        "operands": ["k"]
      },
      "layout": {
        "min": 7286784,
        "max": 7290880,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_untuple_first",
        "kind": "fixed",
        "prefix": 1779,
        "prefix_str": "6F3"
      },
      "effects": [
        {
          "$": "Tuple",
          "costs": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        }
      ],
      "signature": {
        "stack_string": "t:Tuple -> x_1...x_k",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "k",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            }
          ]
        }
      }
    },
    "EXPLODE": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Unpacks a _Tuple_ `$t=(x_1,...,x_$m)` and returns its length `$m`, but only if `$m <= $n <= 15`. Otherwise throws a type check exception.",
        "operands": ["n"]
      },
      "layout": {
        "min": 7290880,
        "max": 7294976,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_explode_tuple",
        "kind": "fixed",
        "prefix": 1780,
        "prefix_str": "6F4"
      },
      "effects": [
        {
          "$": "Tuple",
          "costs": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        }
      ],
      "signature": {
        "stack_string": "t:Tuple -> x_1...x_m m:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "array",
              "name": "tuple_elements",
              "length_var": "m",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            },
            {
              "type": "simple",
              "name": "m",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SETINDEX": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Computes _Tuple_ `t'` that differs from `t` only at position `t'_{k+1}`, which is set to `x`.\nIf `k >= |t|`, throws a range check exception.",
        "operands": ["k"]
      },
      "layout": {
        "min": 7294976,
        "max": 7299072,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_tuple_set_index",
        "kind": "fixed",
        "prefix": 1781,
        "prefix_str": "6F5"
      },
      "effects": [
        {
          "$": "Tuple",
          "costs": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        }
      ],
      "signature": {
        "stack_string": "t:Tuple x:Any -> t2:Tuple",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            },
            {
              "type": "simple",
              "name": "x"
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": ["Tuple"]
            }
          ]
        }
      }
    },
    "INDEXQ": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns the `k`-th element of a _Tuple_ `t`. In other words, returns `x_{k+1}` if `t=(x_1,...,x_n)`. If `k>=n`, or if `t` is _Null_, returns a _Null_ instead of `x`.",
        "operands": ["k"]
      },
      "layout": {
        "min": 7299072,
        "max": 7303168,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_tuple_quiet_index",
        "kind": "fixed",
        "prefix": 1782,
        "prefix_str": "6F6"
      },
      "signature": {
        "stack_string": "t:Tuple|Null -> x:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple", "Null"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "SETINDEXQ": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Sets the `k`-th component of _Tuple_ `t` to `x`, and returns the resulting _Tuple_ `t'`.\nIf `|t| <= k`, first extends the original _Tuple_ to length `n'=k+1` by setting all new components to _Null_. If the original value of `t` is _Null_, treats it as an empty _Tuple_. If `t` is not _Null_ or _Tuple_, throws an exception. If `x` is _Null_ and either `|t| <= k` or `t` is _Null_, then always returns `t'=t` (and does not consume tuple creation gas).",
        "operands": ["k"]
      },
      "layout": {
        "min": 7303168,
        "max": 7307264,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_tuple_quiet_set_index",
        "kind": "fixed",
        "prefix": 1783,
        "prefix_str": "6F7"
      },
      "effects": [
        {
          "$": "Tuple",
          "costs": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        }
      ],
      "signature": {
        "stack_string": "t:Tuple|Null x:Any -> t2:Tuple|Null",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple", "Null"]
            },
            {
              "type": "simple",
              "name": "x"
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t2",
              "value_types": ["Tuple", "Null"]
            }
          ]
        }
      }
    },
    "XC2PU": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s[i] s[j] XCHG2` `s[k] PUSH`.",
        "operands": ["i", "j", "k"]
      },
      "layout": {
        "min": 5509120,
        "max": 5513216,
        "checkLen": 12,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_xc2pu",
        "kind": "fixed",
        "prefix": 1345,
        "prefix_str": "541"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "XCPU2": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s[i] XCHG0` `s[j] s[k] PUSH2`.",
        "operands": ["i", "j", "k"]
      },
      "layout": {
        "min": 5517312,
        "max": 5521408,
        "checkLen": 12,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_xcpu2",
        "kind": "fixed",
        "prefix": 1347,
        "prefix_str": "543"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PUSH3": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s[i] PUSH` `s[j+1] s[k+1] PUSH2`.",
        "operands": ["i", "j", "k"]
      },
      "layout": {
        "min": 5533696,
        "max": 5537792,
        "checkLen": 12,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_push3",
        "kind": "fixed",
        "prefix": 1351,
        "prefix_str": "547"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "XCHG2": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s1 s[i] XCHG` `s[j] XCHG0`.",
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 5242880,
        "max": 5308416,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_xchg2",
        "kind": "fixed",
        "prefix": 80,
        "prefix_str": "50"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "XCPU": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s[i] XCHG0` `s[j] PUSH`.",
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 5308416,
        "max": 5373952,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_xcpu",
        "kind": "fixed",
        "prefix": 81,
        "prefix_str": "51"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PUSH2": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s[i] PUSH` `s[j+1] PUSH`.",
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 5439488,
        "max": 5505024,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_push2",
        "kind": "fixed",
        "prefix": 83,
        "prefix_str": "53"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PUXC": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s[i] PUSH` `SWAP` `s[j] XCHG0`.",
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 5373952,
        "max": 5439488,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "delta",
              "delta": -1,
              "arg": {
                "$": "stack",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            }
          ]
        },
        "exec": "exec_puxc",
        "kind": "fixed",
        "prefix": 82,
        "prefix_str": "52"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "XCPUXC": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s1 s[i] XCHG` `s[j] s[k-1] PUXC`.",
        "operands": ["i", "j", "k"]
      },
      "layout": {
        "min": 5513216,
        "max": 5517312,
        "checkLen": 12,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "delta",
              "delta": -1,
              "arg": {
                "$": "stack",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            }
          ]
        },
        "exec": "exec_xcpuxc",
        "kind": "fixed",
        "prefix": 1346,
        "prefix_str": "542"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PUXC2": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s[i] PUSH` `s2 XCHG0` `s[j] s[k] XCHG2`.",
        "operands": ["i", "j", "k"]
      },
      "layout": {
        "min": 5521408,
        "max": 5525504,
        "checkLen": 12,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "delta",
              "delta": -1,
              "arg": {
                "$": "stack",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            },
            {
              "$": "delta",
              "delta": -1,
              "arg": {
                "$": "stack",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            }
          ]
        },
        "exec": "exec_puxc2",
        "kind": "fixed",
        "prefix": 1348,
        "prefix_str": "544"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PUXCPU": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s[i] s[j-1] PUXC` `s[k] PUSH`.",
        "operands": ["i", "j", "k"]
      },
      "layout": {
        "min": 5525504,
        "max": 5529600,
        "checkLen": 12,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "delta",
              "delta": -1,
              "arg": {
                "$": "stack",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            },
            {
              "$": "delta",
              "delta": -1,
              "arg": {
                "$": "stack",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            }
          ]
        },
        "exec": "exec_puxcpu",
        "kind": "fixed",
        "prefix": 1349,
        "prefix_str": "545"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PU2XC": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s[i] PUSH` `SWAP` `s[j] s[k-1] PUXC`.",
        "operands": ["i", "j", "k"]
      },
      "layout": {
        "min": 5529600,
        "max": 5533696,
        "checkLen": 12,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "delta",
              "delta": -1,
              "arg": {
                "$": "stack",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            },
            {
              "$": "delta",
              "delta": -2,
              "arg": {
                "$": "stack",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            }
          ]
        },
        "exec": "exec_pu2xc",
        "kind": "fixed",
        "prefix": 1350,
        "prefix_str": "546"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "BLKSWAP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Permutes two blocks `s[j+i+1] ... s[j+1]` and `s[j] ... s0`.\nEquivalent to `[i+1] [j+1] REVERSE` `[j+1] 0 REVERSE` `[i+j+2] 0 REVERSE`.",
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 5570560,
        "max": 5636096,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            },
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            }
          ]
        },
        "exec": "exec_blkswap",
        "kind": "fixed",
        "prefix": 85,
        "prefix_str": "55"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "REVERSE": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Reverses the order of `s[j+i+1] ... s[j]`.",
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 6160384,
        "max": 6225920,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 2,
              "arg": {
                "$": "uint",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            },
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_reverse",
        "kind": "fixed",
        "prefix": 94,
        "prefix_str": "5E"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "SETCONTARGS": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 15466496,
        "max": 15532032,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "delta",
              "delta": -1,
              "arg": {
                "$": "uint",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            }
          ]
        },
        "exec": "exec_setcontargs",
        "kind": "fixed",
        "prefix": 236,
        "prefix_str": "EC"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "BLESSARGS": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Equivalent to `BLESS` `[r] [n] SETCONTARGS`.\nThe value of `n` is represented inside the instruction by the 4-bit integer `n mod 16`.",
        "operands": ["r", "n"]
      },
      "layout": {
        "min": 15597568,
        "max": 15663104,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "delta",
              "delta": -1,
              "arg": {
                "$": "uint",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            }
          ]
        },
        "exec": "exec_bless_args",
        "kind": "fixed",
        "prefix": 238,
        "prefix_str": "EE"
      },
      "signature": {
        "stack_string": "x_1...x_r s:Slice -> c:Continuation",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "r",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "x"
                }
              ]
            },
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "STIR": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Equivalent to `SWAP` `[cc+1] STI`.",
        "tags": ["builder building"],
        "operands": ["c"]
      },
      "layout": {
        "min": 13568512,
        "max": 13568768,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_store_int_fixed",
        "kind": "fixed",
        "prefix": 53002,
        "prefix_str": "CF0A"
      },
      "signature": {
        "stack_string": "b:Builder x:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "amount_arg": 0
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "STUR": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Equivalent to `SWAP` `[cc+1] STU`.",
        "tags": ["builder building"],
        "operands": ["c"]
      },
      "layout": {
        "min": 13568768,
        "max": 13569024,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_store_int_fixed",
        "kind": "fixed",
        "prefix": 53003,
        "prefix_str": "CF0B"
      },
      "signature": {
        "stack_string": "b:Builder x:Int -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "amount_arg": 0
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "STIQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A quiet version of `STI`.",
        "tags": ["builder building"],
        "operands": ["c"]
      },
      "layout": {
        "min": 13569024,
        "max": 13569280,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_store_int_fixed",
        "kind": "fixed",
        "prefix": 53004,
        "prefix_str": "CF0C"
      },
      "signature": {
        "stack_string": "x:Int b:Builder -> (b2:Builder 0)|(x:Int b:Builder -1)|(x:Int b:Builder 1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": 1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STUQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A quiet version of `STU`.",
        "tags": ["builder building"],
        "operands": ["c"]
      },
      "layout": {
        "min": 13569280,
        "max": 13569536,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_store_int_fixed",
        "kind": "fixed",
        "prefix": 53005,
        "prefix_str": "CF0D"
      },
      "signature": {
        "stack_string": "x:Int b:Builder -> (b2:Builder 0)|(x:Int b:Builder -1)|(x:Int b:Builder 1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": 1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STIRQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A quiet version of `STIR`.",
        "tags": ["builder building"],
        "operands": ["c"]
      },
      "layout": {
        "min": 13569536,
        "max": 13569792,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_store_int_fixed",
        "kind": "fixed",
        "prefix": 53006,
        "prefix_str": "CF0E"
      },
      "signature": {
        "stack_string": "b:Builder x:Int -> (b2:Builder 0)|(b:Builder x:Int -1)|(b:Builder x:Int 1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                },
                {
                  "value": 1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STURQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A quiet version of `STUR`.",
        "tags": ["builder building"],
        "operands": ["c"]
      },
      "layout": {
        "min": 13569792,
        "max": 13570048,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_store_int_fixed",
        "kind": "fixed",
        "prefix": 53007,
        "prefix_str": "CF0F"
      },
      "signature": {
        "stack_string": "b:Builder x:Int -> (b2:Builder 0)|(b:Builder x:Int -1)|(b:Builder x:Int 1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b2",
                      "value_types": ["Builder"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                },
                {
                  "value": 1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "b",
                      "value_types": ["Builder"]
                    },
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDI": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Preloads a signed `cc+1`-bit integer from _Slice_ `s`.",
        "tags": ["slice parsing", "preload"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14092800,
        "max": 14093056,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_int_fixed2",
        "kind": "fixed",
        "prefix": 55050,
        "prefix_str": "D70A"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDU": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Preloads an unsigned `cc+1`-bit integer from `s`.",
        "tags": ["slice parsing", "preload"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14093056,
        "max": 14093312,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_int_fixed2",
        "kind": "fixed",
        "prefix": 55051,
        "prefix_str": "D70B"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDIQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `LDI`.",
        "tags": ["slice parsing"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14093312,
        "max": 14093568,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_int_fixed2",
        "kind": "fixed",
        "prefix": 55052,
        "prefix_str": "D70C"
      },
      "signature": {
        "stack_string": "s:Slice -> (s:Slice 0)|(x:Int s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LDUQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `LDU`.",
        "tags": ["slice parsing"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14093568,
        "max": 14093824,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_int_fixed2",
        "kind": "fixed",
        "prefix": 55053,
        "prefix_str": "D70D"
      },
      "signature": {
        "stack_string": "s:Slice -> (s:Slice 0)|(x:Int s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDIQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `PLDI`.",
        "tags": ["slice parsing", "preload"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14093824,
        "max": 14094080,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_int_fixed2",
        "kind": "fixed",
        "prefix": 55054,
        "prefix_str": "D70E"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(x:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDUQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `PLDU`.",
        "tags": ["slice parsing", "preload"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14094080,
        "max": 14094336,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_int_fixed2",
        "kind": "fixed",
        "prefix": 55055,
        "prefix_str": "D70F"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(x:Int -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "x",
                      "value_types": ["Int"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDUZ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Preloads the first `32(c+1)` bits of _Slice_ `s` into an unsigned integer `x`, for `0 <= c <= 7`. If `s` is shorter than necessary, missing bits are assumed to be zero. This operation is intended to be used along with `IFBITJMP` and similar instructions.",
        "tags": ["slice parsing", "preload"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14094336,
        "max": 14096384,
        "checkLen": 13,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "plduzArg",
              "range": {
                "min": "0",
                "max": "7"
              }
            }
          ]
        },
        "exec": "exec_preload_uint_fixed_0e",
        "kind": "fixed",
        "prefix": 6882,
        "prefix_str": "1AE2"
      },
      "signature": {
        "stack_string": "s:Slice -> s:Slice x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDSLICE": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Returns the first `0 < cc+1 <= 256` bits of `s` as `s''`.",
        "tags": ["slice parsing", "preload"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14097664,
        "max": 14097920,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_slice_fixed2",
        "kind": "fixed",
        "prefix": 55069,
        "prefix_str": "D71D"
      },
      "signature": {
        "stack_string": "s:Slice -> s3:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDSLICEQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `LDSLICE`.",
        "tags": ["slice parsing"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14097920,
        "max": 14098176,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_slice_fixed2",
        "kind": "fixed",
        "prefix": 55070,
        "prefix_str": "D71E"
      },
      "signature": {
        "stack_string": "s:Slice -> (s:Slice 0)|(s3:Slice s2:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": ["Slice"]
                    },
                    {
                      "type": "simple",
                      "name": "s2",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PLDSLICEQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `PLDSLICE`.",
        "tags": ["slice parsing", "preload"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14098176,
        "max": 14098432,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_slice_fixed2",
        "kind": "fixed",
        "prefix": 55071,
        "prefix_str": "D71F"
      },
      "signature": {
        "stack_string": "s:Slice -> (âˆ… 0)|(s3:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": []
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IFBITJMP": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Checks whether bit `0 <= n <= 31` is set in integer `x`, and if so, performs `JMPX` to continuation `c`. Value `x` is left in the stack.",
        "operands": ["n"]
      },
      "layout": {
        "min": 14909440,
        "max": 14917632,
        "checkLen": 11,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 5,
              "range": {
                "min": "0",
                "max": "31"
              }
            }
          ]
        },
        "exec": "exec_if_bit_jmp",
        "kind": "fixed",
        "prefix": 1820,
        "prefix_str": "71C"
      },
      "signature": {
        "stack_string": "x:Int body:Continuation -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IFNBITJMP": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Jumps to `c` if bit `0 <= n <= 31` is not set in integer `x`.",
        "operands": ["n"]
      },
      "layout": {
        "min": 14917632,
        "max": 14925824,
        "checkLen": 11,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 5,
              "range": {
                "min": "0",
                "max": "31"
              }
            }
          ]
        },
        "exec": "exec_if_bit_jmp",
        "kind": "fixed",
        "prefix": 1821,
        "prefix_str": "71D"
      },
      "signature": {
        "stack_string": "x:Int body:Continuation -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "INDEX2": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns `t[i][j]`.\nThrows if `t[i]` is not a tuple.\nEquivalent to `[i] INDEX` `[j] INDEX`.",
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 7319552,
        "max": 7323648,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 2,
              "range": {
                "min": "0",
                "max": "3"
              }
            },
            {
              "$": "uint",
              "len": 2,
              "range": {
                "min": "0",
                "max": "3"
              }
            }
          ]
        },
        "exec": "exec_tuple_index2",
        "kind": "fixed",
        "prefix": 1787,
        "prefix_str": "6FB"
      },
      "signature": {
        "stack_string": "t:Tuple -> x:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "INDEX3": {
      "category": "tuple",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns `t[i][j][k]`.\nThrows if `t[i]` or `t[i][j]` is not a tuple.\nEquivalent to `[i] [j] INDEX2` `[k] INDEX`.",
        "operands": ["i", "j", "k"]
      },
      "layout": {
        "min": 7323648,
        "max": 7340032,
        "checkLen": 10,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 2,
              "range": {
                "min": "0",
                "max": "3"
              }
            },
            {
              "$": "uint",
              "len": 2,
              "range": {
                "min": "0",
                "max": "3"
              }
            },
            {
              "$": "uint",
              "len": 2,
              "range": {
                "min": "0",
                "max": "3"
              }
            }
          ]
        },
        "exec": "exec_tuple_index3",
        "kind": "fixed",
        "prefix": 447,
        "prefix_str": "1BF"
      },
      "signature": {
        "stack_string": "t:Tuple -> x:Any",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "t",
              "value_types": ["Tuple"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "PUSHPOW2": {
      "category": "arithmetic",
      "subCategory": "int_const",
      "description": {
        "short": "",
        "long": "(Quietly) pushes `2^(xx+1)` for `0 <= xx <= 255`.\n`2^256` is a `NaN`.",
        "operands": ["x"]
      },
      "layout": {
        "min": 8585216,
        "max": 8650496,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_push_pow2",
        "kind": "fixed-range",
        "prefix": 33536,
        "prefix_str": "8300"
      },
      "signature": {
        "stack_string": "âˆ… -> result:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BLKPUSH": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSH s(j)` performed `i` times.\n`1 <= i <= 15`, `0 <= j <= 15`.",
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 6230016,
        "max": 6291456,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_blkpush",
        "kind": "fixed-range",
        "prefix": 24336,
        "prefix_str": "5F10"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "BLKDROP2": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Drops `i` stack elements under the top `j` elements.\n`1 <= i <= 15`, `0 <= j <= 15`\nEquivalent to `[i+j] 0 REVERSE` `[i] BLKDROP` `[j] 0 REVERSE`.",
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 7081984,
        "max": 7143424,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_blkdrop2",
        "kind": "fixed-range",
        "prefix": 27664,
        "prefix_str": "6C10"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "GETGLOB": {
      "category": "globals",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns the `k`-th global variable for `1 <= k <= 31`.\nEquivalent to `c7 PUSHCTR` `[k] INDEXQ`.",
        "operands": ["k"]
      },
      "layout": {
        "min": 16269568,
        "max": 16277504,
        "checkLen": 11,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 5,
              "range": {
                "min": "0",
                "max": "31"
              }
            }
          ]
        },
        "exec": "exec_get_global",
        "kind": "fixed-range",
        "prefix": 63553,
        "prefix_str": "F841"
      },
      "signature": {
        "stack_string": "âˆ… -> x:Any",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "SETGLOB": {
      "category": "globals",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Assigns `x` to the `k`-th global variable for `1 <= k <= 31`.\nEquivalent to `c7 PUSHCTR` `SWAP` `k SETINDEXQ` `c7 POPCTR`.",
        "operands": ["k"]
      },
      "layout": {
        "min": 16277760,
        "max": 16285696,
        "checkLen": 11,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 5,
              "range": {
                "min": "0",
                "max": "31"
              }
            }
          ]
        },
        "exec": "exec_set_global",
        "kind": "fixed-range",
        "prefix": 63585,
        "prefix_str": "F861"
      },
      "signature": {
        "stack_string": "x:Any -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        }
      }
    },
    "GETPARAM": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Returns the `i`-th parameter from the _Tuple_ provided at `c7`. Equivalent to `c7 PUSHCTR` `FIRST` `[i] INDEX`.\nIf one of these internal operations fails, throws an appropriate type checking or range checking exception.",
        "operands": ["i"]
      },
      "layout": {
        "min": 16261120,
        "max": 16261888,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_get_var_param",
        "kind": "fixed-range",
        "prefix": 63520,
        "prefix_str": "F820"
      },
      "signature": {
        "stack_string": "âˆ… -> x:Int",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 7
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PUSHREF": {
      "category": "cell",
      "subCategory": "cell_const",
      "description": {
        "short": "",
        "long": "Pushes the reference `ref` into the stack.\n_Details:_ Pushes the first reference of `cc.code` into the stack as a _Cell_ (and removes this reference from the current continuation).",
        "operands": ["c"]
      },
      "layout": {
        "min": 8912896,
        "max": 8978432,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_push_ref(_1, _2, 0, _4)",
        "kind": "ext",
        "prefix": 136,
        "prefix_str": "88"
      },
      "signature": {
        "stack_string": "âˆ… -> result:Cell",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Cell"]
            }
          ]
        }
      }
    },
    "PUSHREFSLICE": {
      "category": "cell",
      "subCategory": "cell_const",
      "description": {
        "short": "",
        "long": "Similar to `PUSHREF`, but converts the cell into a _Slice_.",
        "operands": ["c"]
      },
      "layout": {
        "min": 8978432,
        "max": 9043968,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_push_ref(_1, _2, 1, _4)",
        "kind": "ext",
        "prefix": 137,
        "prefix_str": "89"
      },
      "effects": [
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "âˆ… -> result:Slice",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "PUSHREFCONT": {
      "category": "cell",
      "subCategory": "cell_const",
      "description": {
        "short": "",
        "long": "Similar to `PUSHREFSLICE`, but makes a simple ordinary _Continuation_ out of the cell.",
        "operands": ["c"]
      },
      "layout": {
        "min": 9043968,
        "max": 9109504,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_push_ref(_1, _2, 2, _4)",
        "kind": "ext",
        "prefix": 138,
        "prefix_str": "8A"
      },
      "effects": [
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "âˆ… -> result:Continuation",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "CALLREF": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREFCONT` `CALLX`.",
        "operands": ["c"]
      },
      "layout": {
        "min": 14367744,
        "max": 14368000,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_do_with_ref(_1, _2, _4, (st, cont) => st.call((cont)), 'CALLREF')",
        "kind": "ext",
        "prefix": 56124,
        "prefix_str": "DB3C"
      },
      "effects": [
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "JMPREF": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREFCONT` `JMPX`.",
        "operands": ["c"]
      },
      "layout": {
        "min": 14368000,
        "max": 14368256,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_do_with_ref(_1, _2, _4, (st, cont) => st.jump((cont)), 'JMPREF')",
        "kind": "ext",
        "prefix": 56125,
        "prefix_str": "DB3D"
      },
      "effects": [
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "JMPREFDATA": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREFCONT` `JMPXDATA`.",
        "operands": ["c"]
      },
      "layout": {
        "min": 14368256,
        "max": 14368512,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_do_with_ref(_1, _2, _4, (st, cont) => { st.push_code(); return st.jump((cont)) }, 'JMPREFDATA')",
        "kind": "ext",
        "prefix": 56126,
        "prefix_str": "DB3E"
      },
      "effects": [
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "IFREF": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREFCONT` `IF`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`.\nGas consumption of this primitive depends on whether `f=0` and whether the reference was loaded before.\nSimilar remarks apply other primitives that accept a continuation as a reference.",
        "operands": ["c"]
      },
      "layout": {
        "min": 14876672,
        "max": 14876928,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_do_with_cell(1, _2, _4, (st, cell) => st.get_stack().pop_bool() ? st.call(st.ref_to_cont((cell))) : 0, 'IFREF')",
        "kind": "ext",
        "prefix": 58112,
        "prefix_str": "E300"
      },
      "effects": [
        {
          "$": "ImplicitJumpRef",
          "costs": [0, 10]
        },
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IFNOTREF": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREFCONT` `IFNOT`.",
        "operands": ["c"]
      },
      "layout": {
        "min": 14876928,
        "max": 14877184,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_do_with_cell(1, _2, _4, (st, cell) => st.get_stack().pop_bool() ? 0 : st.call(st.ref_to_cont((cell))), 'IFNOTREF')",
        "kind": "ext",
        "prefix": 58113,
        "prefix_str": "E301"
      },
      "effects": [
        {
          "$": "ImplicitJumpRef",
          "costs": [0, 10]
        },
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IFJMPREF": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREFCONT` `IFJMP`.",
        "operands": ["c"]
      },
      "layout": {
        "min": 14877184,
        "max": 14877440,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_do_with_cell(1, _2, _4, (st, cell) => st.get_stack().pop_bool() ? st.jump(st.ref_to_cont((cell))) : 0, 'IFJMPREF')",
        "kind": "ext",
        "prefix": 58114,
        "prefix_str": "E302"
      },
      "effects": [
        {
          "$": "ImplicitJumpRef",
          "costs": [0, 10]
        },
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IFNOTJMPREF": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREFCONT` `IFNOTJMP`.",
        "operands": ["c"]
      },
      "layout": {
        "min": 14877440,
        "max": 14877696,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_do_with_cell(1, _2, _4, (st, cell) => st.get_stack().pop_bool() ? 0 : st.jump(st.ref_to_cont((cell))), 'IFNOTJMPREF')",
        "kind": "ext",
        "prefix": 58115,
        "prefix_str": "E303"
      },
      "effects": [
        {
          "$": "ImplicitJumpRef",
          "costs": [0, 10]
        },
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IFREFELSE": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREFCONT` `SWAP` `IFELSE`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`. Similar remarks apply to the next two primitives: cells are converted into continuations only when necessary.",
        "operands": ["c"]
      },
      "layout": {
        "min": 14880000,
        "max": 14880256,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_ifelse_ref(_1, _2, _4, true)",
        "kind": "ext",
        "prefix": 58125,
        "prefix_str": "E30D"
      },
      "effects": [
        {
          "$": "ImplicitJumpRef",
          "costs": [0, 10]
        },
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "f:Int body:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "IFELSEREF": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREFCONT` `IFELSE`.",
        "operands": ["c"]
      },
      "layout": {
        "min": 14880256,
        "max": 14880512,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "(_1, _2, _3, _4) => exec_ifelse_ref(_1, _2, _4, false)",
        "kind": "ext",
        "prefix": 58126,
        "prefix_str": "E30E"
      },
      "effects": [
        {
          "$": "ImplicitJumpRef",
          "costs": [0, 10]
        },
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "f:Int body:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "body",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "IFREFELSEREF": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREFCONT` `PUSHREFCONT` `IFELSE`.",
        "operands": ["c1", "c2"]
      },
      "layout": {
        "min": 14880512,
        "max": 14880768,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            },
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "exec_ifref_elseref",
        "kind": "ext",
        "prefix": 58127,
        "prefix_str": "E30F"
      },
      "effects": [
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IFBITJMPREF": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Performs a `JMPREF` if bit `0 <= n <= 31` is set in integer `x`.",
        "operands": ["n", "c"]
      },
      "layout": {
        "min": 14925824,
        "max": 14934016,
        "checkLen": 11,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 5,
              "range": {
                "min": "0",
                "max": "31"
              }
            },
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "exec_if_bit_jmpref",
        "kind": "ext",
        "prefix": 1822,
        "prefix_str": "71E"
      },
      "effects": [
        {
          "$": "ImplicitJumpRef",
          "costs": [0, 10]
        },
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "x:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "IFNBITJMPREF": {
      "category": "continuation",
      "subCategory": "continuation_cond",
      "description": {
        "short": "",
        "long": "Performs a `JMPREF` if bit `0 <= n <= 31` is not set in integer `x`.",
        "operands": ["n", "c"]
      },
      "layout": {
        "min": 14934016,
        "max": 14942208,
        "checkLen": 11,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 5,
              "range": {
                "min": "0",
                "max": "31"
              }
            },
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "exec_if_bit_jmpref",
        "kind": "ext",
        "prefix": 1823,
        "prefix_str": "71F"
      },
      "effects": [
        {
          "$": "ImplicitJumpRef",
          "costs": [0, 10]
        },
        {
          "$": "CellLoad",
          "costs": [100, 25]
        }
      ],
      "signature": {
        "stack_string": "x:Int -> x:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DICTPUSHCONST": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Pushes a non-empty constant dictionary `D` (as a `Cell^?`) along with its key length `0 <= n <= 1023`, stored as a part of the instruction. The dictionary itself is created from the first of remaining references of the current continuation. In this way, the complete `DICTPUSHCONST` instruction can be obtained by first serializing `xF4A4_`, then the non-empty dictionary itself (one `1` bit and a cell reference), and then the unsigned 10-bit integer `n` (as if by a `STU 10` instruction). An empty dictionary can be pushed by a `NEWDICT` primitive instead.",
        "operands": ["d", "n"]
      },
      "layout": {
        "min": 16032768,
        "max": 16033792,
        "checkLen": 14,
        "skipLen": 24,
        "args": {
          "$": "dictpush"
        },
        "exec": "exec_push_const_dict",
        "kind": "fixed",
        "prefix": 15657,
        "prefix_str": "3D29"
      },
      "signature": {
        "stack_string": "âˆ… -> D:Cell|Null n:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "D",
              "value_types": ["Cell", "Null"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PFXDICTSWITCH": {
      "category": "dictionary",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16034816,
        "max": 16035840,
        "checkLen": 14,
        "skipLen": 24,
        "args": {
          "$": "dictpush"
        },
        "exec": "exec_const_pfx_dict_switch",
        "kind": "fixed",
        "prefix": 15659,
        "prefix_str": "3D2B"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "SDBEGINSX": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Checks whether `s` begins with (the data bits of) `s'`, and removes `s'` from `s` on success. On failure throws a cell deserialization exception. Primitive `SDPFXREV` can be considered a quiet version of `SDBEGINSX`.",
        "operands": []
      },
      "layout": {
        "min": 14099968,
        "max": 14100224,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_slice_begins_with(_1, false)",
        "kind": "simple",
        "prefix": 55078,
        "prefix_str": "D726"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> s3:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SDBEGINSXQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `SDBEGINSX`.",
        "operands": []
      },
      "layout": {
        "min": 14100224,
        "max": 14100480,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_slice_begins_with(_1, true)",
        "kind": "simple",
        "prefix": 55079,
        "prefix_str": "D727"
      },
      "signature": {
        "stack_string": "s:Slice s2:Slice -> (s:Slice 0)|(s3:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SDBEGINS": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Checks whether `s` begins with constant bitstring `sss` of length `8x+3` (with continuation bit assumed), where `0 <= x <= 127`, and removes `sss` from `s` on success.",
        "operands": ["s"]
      },
      "layout": {
        "min": 14100480,
        "max": 14101504,
        "checkLen": 14,
        "skipLen": 21,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "slice",
              "refs": {
                "$": "refs",
                "count": 0
              },
              "bits": {
                "$": "uint",
                "len": 7,
                "range": {
                  "min": "0",
                  "max": "127"
                }
              },
              "pad": 3
            }
          ]
        },
        "exec": "exec_slice_begins_with_const",
        "kind": "ext",
        "prefix": 13770,
        "prefix_str": "35CA"
      },
      "signature": {
        "stack_string": "s:Slice -> s3:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "SDBEGINSQ": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A quiet version of `SDBEGINS`.",
        "operands": ["s"]
      },
      "layout": {
        "min": 14101504,
        "max": 14102528,
        "checkLen": 14,
        "skipLen": 21,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "slice",
              "refs": {
                "$": "refs",
                "count": 0
              },
              "bits": {
                "$": "uint",
                "len": 7,
                "range": {
                  "min": "0",
                  "max": "127"
                }
              },
              "pad": 3
            }
          ]
        },
        "exec": "exec_slice_begins_with_const",
        "kind": "ext",
        "prefix": 13771,
        "prefix_str": "35CB"
      },
      "signature": {
        "stack_string": "s:Slice -> (s:Slice 0)|(s3:Slice -1) status:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "conditional",
              "name": "status",
              "match": [
                {
                  "value": 0,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s",
                      "value_types": ["Slice"]
                    }
                  ]
                },
                {
                  "value": -1,
                  "stack": [
                    {
                      "type": "simple",
                      "name": "s3",
                      "value_types": ["Slice"]
                    }
                  ]
                }
              ]
            },
            {
              "type": "simple",
              "name": "status",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "STREFCONST": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Equivalent to `PUSHREF` `STREFR`.",
        "tags": ["builder building"],
        "operands": ["c"]
      },
      "layout": {
        "min": 13574144,
        "max": 13574400,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "exec_store_const_ref",
        "kind": "ext-range",
        "prefix": 53024,
        "prefix_str": "CF20"
      },
      "signature": {
        "stack_string": "b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STREF2CONST": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Equivalent to `STREFCONST` `STREFCONST`.",
        "tags": ["builder building"],
        "operands": ["c1", "c2"]
      },
      "layout": {
        "min": 13574400,
        "max": 13574656,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "refCodeSlice"
            },
            {
              "$": "refCodeSlice"
            }
          ]
        },
        "exec": "exec_store_const_ref",
        "kind": "ext-range",
        "prefix": 53025,
        "prefix_str": "CF21"
      },
      "signature": {
        "stack_string": "b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "THROWANYIF": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Throws an exception with error code `n` and parameter set to zero only if `f` is NOT EQUAL to 0. Parameter represents the additional information passed to the exception handler.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": []
      },
      "layout": {
        "min": 15921664,
        "max": 15921920,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_throw_any",
        "kind": "simple",
        "prefix": 62194,
        "prefix_str": "F2F2"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "n:Int f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "THROWARGANYIF": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Throws an exception with error code `n` and parameter set to `x` taken from the stack only if `f` is NOT EQUAL to 0. Parameter represents the additional information passed to the exception handler.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": []
      },
      "layout": {
        "min": 15921920,
        "max": 15922176,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_throw_any",
        "kind": "simple",
        "prefix": 62195,
        "prefix_str": "F2F3"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "x:Int n:Int f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "DEBUGSTR": {
      "category": "debug",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "`0 <= n < 16`. Length of `ssss` is `n+1` bytes.\n`{string}` is a [string literal](https://github.com/Piterden/TON-docs/blob/master/Fift.%20A%20Brief%20Introduction.md#user-content-29-string-literals).\n`DEBUGSTR`: `ssss` is the given string.\n`DEBUGSTRI`: `ssss` is one-byte integer `0 <= x <= 255` followed by the given string.",
        "operands": ["s"]
      },
      "layout": {
        "min": 16707584,
        "max": 16711680,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "debugstr"
            }
          ]
        },
        "exec": "exec_dummy_debug_str",
        "kind": "ext",
        "prefix": 4079,
        "prefix_str": "FEF"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "SETCONTCTR": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Stores `x` into the savelist of continuation `c` as `c(i)`, and returns the resulting continuation `c'`. Almost all operations with continuations may be expressed in terms of `SETCONTCTR`, `POPCTR`, and `PUSHCTR`.",
        "operands": ["i"]
      },
      "layout": {
        "min": 15556608,
        "max": 15558656,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "control",
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_setcont_ctr",
        "kind": "fixed-range",
        "prefix": 60768,
        "prefix_str": "ED60"
      },
      "signature": {
        "stack_string": "x:Any c:Continuation -> c2:Continuation",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c2",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "SETRETCTR": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Equivalent to `c0 PUSHCTR` `c[i] SETCONTCTR` `c0 POPCTR`.",
        "operands": ["i"]
      },
      "layout": {
        "min": 15560704,
        "max": 15562752,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "control",
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_setret_ctr",
        "kind": "fixed-range",
        "prefix": 60784,
        "prefix_str": "ED70"
      },
      "signature": {
        "stack_string": "x:Any -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 0
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 0
            }
          ]
        }
      }
    },
    "SETALTCTR": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Equivalent to `c1 PUSHCTR` `c[i] SETCONTCTR` `c1 POPCTR`.",
        "operands": ["i"]
      },
      "layout": {
        "min": 15564800,
        "max": 15566848,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "control",
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_setalt_ctr",
        "kind": "fixed-range",
        "prefix": 60800,
        "prefix_str": "ED80"
      },
      "signature": {
        "stack_string": "x:Any -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ],
          "registers": [
            {
              "type": "constant",
              "index": 1
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 1
            }
          ]
        }
      }
    },
    "POPSAVE": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Similar to `c[i] POPCTR`, but also saves the old value of `c[i]` into continuation `c0`.\nEquivalent (up to exceptions) to `c[i] SAVECTR` `c[i] POPCTR`.",
        "operands": ["i"]
      },
      "layout": {
        "min": 15568896,
        "max": 15570944,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "control",
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_popsave_ctr",
        "kind": "fixed-range",
        "prefix": 60816,
        "prefix_str": "ED90"
      },
      "signature": {
        "stack_string": "x:Any -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ],
          "registers": [
            {
              "type": "variable",
              "var_name": "i"
            },
            {
              "type": "constant",
              "index": 0
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 0
            }
          ]
        }
      }
    },
    "SAVECTR": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 15572992,
        "max": 15575040,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "control",
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_save_ctr",
        "kind": "fixed-range",
        "prefix": 60832,
        "prefix_str": "EDA0"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "SAVEALTCTR": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 15577088,
        "max": 15579136,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "control",
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_savealt_ctr",
        "kind": "fixed-range",
        "prefix": 60848,
        "prefix_str": "EDB0"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "SAVEBOTHCTR": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 15581184,
        "max": 15583232,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "control",
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_saveboth_ctr",
        "kind": "fixed-range",
        "prefix": 60864,
        "prefix_str": "EDC0"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RUNVM": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "Runs child VM with code `code` and stack `x_1...x_n`. Returns the resulting stack `x'_1...x'_m` and exitcode. Other arguments and return values are enabled by flags.",
        "operands": ["flags"]
      },
      "layout": {
        "min": 14368768,
        "max": 14372864,
        "checkLen": 12,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "runvmArg"
            }
          ]
        },
        "exec": "exec_runvm",
        "version": 4,
        "kind": "fixed",
        "prefix": 3508,
        "prefix_str": "DB4"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "2SWAP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 5898240,
        "max": 5963776,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_2swap",
        "kind": "simple",
        "prefix": 90,
        "prefix_str": "5A"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "2DROP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 5963776,
        "max": 6029312,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_2drop",
        "kind": "simple",
        "prefix": 91,
        "prefix_str": "5B"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "2DUP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 6029312,
        "max": 6094848,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_2dup",
        "kind": "simple",
        "prefix": 92,
        "prefix_str": "5C"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "2OVER": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 6094848,
        "max": 6160384,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_2over",
        "kind": "simple",
        "prefix": 93,
        "prefix_str": "5D"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "ADDRSHIFT#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11087872,
        "max": 11088128,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "version": 4,
        "kind": "fixed",
        "prefix": 43312,
        "prefix_str": "A930"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "ADDRSHIFTR#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11088128,
        "max": 11088384,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "version": 4,
        "kind": "fixed",
        "prefix": 43313,
        "prefix_str": "A931"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "ADDRSHIFTC#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11088384,
        "max": 11088640,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "version": 4,
        "kind": "fixed",
        "prefix": 43314,
        "prefix_str": "A932"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RSHIFT#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11088896,
        "max": 11089152,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43316,
        "prefix_str": "A934"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RSHIFTR#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11089152,
        "max": 11089408,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43317,
        "prefix_str": "A935"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RSHIFTC#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11089408,
        "max": 11089664,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43318,
        "prefix_str": "A936"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MODPOW2#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11089920,
        "max": 11090176,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43320,
        "prefix_str": "A938"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MODPOW2R#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11090176,
        "max": 11090432,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43321,
        "prefix_str": "A939"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MODPOW2C#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11090432,
        "max": 11090688,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43322,
        "prefix_str": "A93A"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RSHIFT#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11090944,
        "max": 11091200,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43324,
        "prefix_str": "A93C"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RSHIFTR#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11091200,
        "max": 11091456,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43325,
        "prefix_str": "A93D"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "RSHIFTC#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11091456,
        "max": 11091712,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43326,
        "prefix_str": "A93E"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULADDRSHIFT#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11120640,
        "max": 11120896,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "version": 4,
        "kind": "fixed",
        "prefix": 43440,
        "prefix_str": "A9B0"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULADDRSHIFTR#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11120896,
        "max": 11121152,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "version": 4,
        "kind": "fixed",
        "prefix": 43441,
        "prefix_str": "A9B1"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULADDRSHIFTC#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11121152,
        "max": 11121408,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "version": 4,
        "kind": "fixed",
        "prefix": 43442,
        "prefix_str": "A9B2"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULRSHIFT#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11121664,
        "max": 11121920,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43444,
        "prefix_str": "A9B4"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULRSHIFTR#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11121920,
        "max": 11122176,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43445,
        "prefix_str": "A9B5"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULRSHIFTC#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11122176,
        "max": 11122432,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43446,
        "prefix_str": "A9B6"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULMODPOW2#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11122688,
        "max": 11122944,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43448,
        "prefix_str": "A9B8"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULMODPOW2R#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11122944,
        "max": 11123200,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43449,
        "prefix_str": "A9B9"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULMODPOW2C#": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11123200,
        "max": 11123456,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43450,
        "prefix_str": "A9BA"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULRSHIFT#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11123712,
        "max": 11123968,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43452,
        "prefix_str": "A9BC"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULRSHIFTR#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11123968,
        "max": 11124224,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43453,
        "prefix_str": "A9BD"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "MULRSHIFTC#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11124224,
        "max": 11124480,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_mulshrmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43454,
        "prefix_str": "A9BE"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#ADDDIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11128832,
        "max": 11129088,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "version": 4,
        "kind": "fixed",
        "prefix": 43472,
        "prefix_str": "A9D0"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#ADDDIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11129088,
        "max": 11129344,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "version": 4,
        "kind": "fixed",
        "prefix": 43473,
        "prefix_str": "A9D1"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#ADDDIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11129344,
        "max": 11129600,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "version": 4,
        "kind": "fixed",
        "prefix": 43474,
        "prefix_str": "A9D2"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#DIV": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11129856,
        "max": 11130112,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43476,
        "prefix_str": "A9D4"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#DIVR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11130112,
        "max": 11130368,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43477,
        "prefix_str": "A9D5"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#DIVC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11130368,
        "max": 11130624,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43478,
        "prefix_str": "A9D6"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#MOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11130880,
        "max": 11131136,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43480,
        "prefix_str": "A9D8"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#MODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11131136,
        "max": 11131392,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43481,
        "prefix_str": "A9D9"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#MODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11131392,
        "max": 11131648,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43482,
        "prefix_str": "A9DA"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#DIVMOD": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11131904,
        "max": 11132160,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43484,
        "prefix_str": "A9DC"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#DIVMODR": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11132160,
        "max": 11132416,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43485,
        "prefix_str": "A9DD"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "LSHIFT#DIVMODC": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11132416,
        "max": 11132672,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_shldivmod(_1, _2, 2)",
        "kind": "fixed",
        "prefix": 43486,
        "prefix_str": "A9DE"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "HASHEXT": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16319488,
        "max": 16319744,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "hash"
            }
          ]
        },
        "exec": "exec_hash_ext",
        "version": 4,
        "kind": "fixed",
        "prefix": 63748,
        "prefix_str": "F904"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "HASHEXTR": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16319744,
        "max": 16320000,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "hash"
            }
          ]
        },
        "exec": "exec_hash_ext",
        "version": 4,
        "kind": "fixed",
        "prefix": 63749,
        "prefix_str": "F905"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "HASHEXTA": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16320000,
        "max": 16320256,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "hash"
            }
          ]
        },
        "exec": "exec_hash_ext",
        "version": 4,
        "kind": "fixed",
        "prefix": 63750,
        "prefix_str": "F906"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "HASHEXTAR": {
      "category": "crypto",
      "subCategory": "crypto_common",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16320256,
        "max": 16320512,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "hash"
            }
          ]
        },
        "exec": "exec_hash_ext",
        "version": 4,
        "kind": "fixed",
        "prefix": 63751,
        "prefix_str": "F907"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "STREF": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores a reference to _Cell_ `c` into _Builder_ `b`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13369344,
        "max": 13434880,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_ref(_1, false)",
        "kind": "simple",
        "prefix": 204,
        "prefix_str": "CC"
      },
      "signature": {
        "stack_string": "c:Cell b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STREF_ALT": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A longer version of `STREF`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13570048,
        "max": 13570304,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_ref(_1, false)",
        "kind": "simple",
        "prefix": 53008,
        "prefix_str": "CF10"
      },
      "signature": {
        "stack_string": "c:Cell b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Cell"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "STSLICE": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores _Slice_ `s` into _Builder_ `b`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13500416,
        "max": 13565952,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_slice(_1, false)",
        "kind": "simple",
        "prefix": 206,
        "prefix_str": "CE"
      },
      "signature": {
        "stack_string": "s:Slice b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "stack_amount_arg": 1
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "STSLICE_ALT": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A longer version of `STSLICE`.",
        "tags": ["builder building"],
        "operands": []
      },
      "layout": {
        "min": 13570560,
        "max": 13570816,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_store_slice(_1, false)",
        "kind": "simple",
        "prefix": 53010,
        "prefix_str": "CF12"
      },
      "signature": {
        "stack_string": "s:Slice b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "stack_amount_arg": 1
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "XCHG3": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Equivalent to `s2 s[i] XCHG` `s1 s[j] XCHG` `s[k] XCHG0`.",
        "operands": ["i", "j", "k"]
      },
      "layout": {
        "min": 4194304,
        "max": 5242880,
        "checkLen": 4,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_xchg3",
        "kind": "fixed",
        "prefix": 4,
        "prefix_str": "4"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "XCHG3_ALT": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Long form of `XCHG3`.",
        "operands": ["i", "j", "k"]
      },
      "layout": {
        "min": 5505024,
        "max": 5509120,
        "checkLen": 12,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_xchg3",
        "kind": "fixed",
        "prefix": 1344,
        "prefix_str": "540"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "STI": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "Stores a signed `cc`-bit integer `x` into _Builder_ `b` and returns the resulting _Builder_ `b'`.",
        "tags": ["builder building"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "5",
            "condition": "Integer is too large to fit into `cc` bits."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          },
          {
            "errno": "7",
            "condition": "Second element is not a Builder."
          }
        ],
        "operands": ["c"]
      },
      "layout": {
        "min": 13238272,
        "max": 13303808,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_store_int(_1, _2, true)",
        "kind": "fixed",
        "prefix": 202,
        "prefix_str": "CA"
      },
      "signature": {
        "stack_string": "x:Int b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "amount_arg": 0
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "STI_ALT": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A longer version of `[cc+1] STI`.",
        "tags": ["builder building"],
        "operands": ["c"]
      },
      "layout": {
        "min": 13568000,
        "max": 13568256,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_store_int_fixed",
        "kind": "fixed",
        "prefix": 53000,
        "prefix_str": "CF08"
      },
      "signature": {
        "stack_string": "x:Int b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "amount_arg": 0
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "STU": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "Stores an unsigned `cc`-bit integer `x` into _Builder_ `b` and returns the resulting _Builder_ `b'`.",
        "tags": ["builder building"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "5",
            "condition": "Integer is too large to fit into `cc` bits."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          },
          {
            "errno": "7",
            "condition": "Second element is not a Builder."
          }
        ],
        "operands": ["c"]
      },
      "layout": {
        "min": 13303808,
        "max": 13369344,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_store_int(_1, _2, false)",
        "kind": "fixed",
        "prefix": 203,
        "prefix_str": "CB"
      },
      "signature": {
        "stack_string": "x:Int b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "amount_arg": 0
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "STU_ALT": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "A longer version of `[cc+1] STU`.",
        "tags": ["builder building"],
        "operands": ["c"]
      },
      "layout": {
        "min": 13568256,
        "max": 13568512,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_store_int_fixed",
        "kind": "fixed",
        "prefix": 53001,
        "prefix_str": "CF09"
      },
      "signature": {
        "stack_string": "x:Int b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"],
              "mutations": [
                {
                  "length": {
                    "amount_arg": 0
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "LDI": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "Loads a signed `cc`-bit integer `x` from _Slice_ `s` and pushes loaded value on stack along with _Slice_ with remainder data.",
        "tags": ["slice parsing"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          },
          {
            "errno": "7",
            "condition": "Second element is not a Slice."
          },
          {
            "errno": "9",
            "condition": "Slice doesn't contain enough bits."
          }
        ],
        "examples": [
          {
            "instructions": [
              {
                "instruction": "PUSHINT_4 -1"
              },
              {
                "instruction": "NEWC"
              },
              {
                "instruction": "STI 4",
                "comment": "store -1 as signed 4-bit number"
              },
              {
                "instruction": "ENDC"
              },
              {
                "instruction": "CTOS",
                "comment": "convert Cell to Slice"
              },
              {
                "instruction": "LDI 4",
                "comment": "load previously stored 4-bit number"
              }
            ],
            "stack": {
              "input": ["Slice{-1}"],
              "output": ["Slice{empty}", "-1"]
            }
          }
        ],
        "operands": ["c"]
      },
      "layout": {
        "min": 13762560,
        "max": 13828096,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_int_fixed(_1, _2, 0)",
        "kind": "fixed",
        "prefix": 210,
        "prefix_str": "D2"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDI_ALT": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A longer encoding for `LDI`.",
        "tags": ["slice parsing"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14092288,
        "max": 14092544,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_int_fixed2",
        "kind": "fixed",
        "prefix": 55048,
        "prefix_str": "D708"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDU": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "Loads an unsigned `cc`-bit integer `x` from _Slice_ `s` and pushes loaded value on stack along with _Slice_ with remainder data.",
        "tags": ["slice parsing"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack contains less than 2 elements."
          },
          {
            "errno": "7",
            "condition": "Top element is not an Int."
          },
          {
            "errno": "7",
            "condition": "Second element is not a Slice."
          },
          {
            "errno": "9",
            "condition": "Slice doesn't contain enough bits."
          }
        ],
        "examples": [
          {
            "instructions": [
              {
                "instruction": "PUSHINT_4 10"
              },
              {
                "instruction": "NEWC"
              },
              {
                "instruction": "STU 4",
                "comment": "store 10 as unsigned 4-bit number"
              },
              {
                "instruction": "ENDC"
              },
              {
                "instruction": "CTOS",
                "comment": "convert Cell to Slice"
              },
              {
                "instruction": "LDU 4",
                "comment": "load previously stored 4-bit number"
              }
            ],
            "stack": {
              "input": ["Slice{10}"],
              "output": ["Slice{empty}", "10"]
            }
          }
        ],
        "operands": ["c"]
      },
      "layout": {
        "min": 13828096,
        "max": 13893632,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_int_fixed(_1, _2, 1)",
        "kind": "fixed",
        "prefix": 211,
        "prefix_str": "D3"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDU_ALT": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A longer encoding for `LDU`.",
        "tags": ["slice parsing"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14092544,
        "max": 14092800,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_int_fixed2",
        "kind": "fixed",
        "prefix": 55049,
        "prefix_str": "D709"
      },
      "signature": {
        "stack_string": "s:Slice -> x:Int s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDSLICE": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "Cuts the next `cc+1` bits of `s` into a separate _Slice_ `s''`.",
        "tags": ["slice parsing"],
        "operands": ["c"]
      },
      "layout": {
        "min": 14024704,
        "max": 14090240,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_slice_fixed",
        "kind": "fixed",
        "prefix": 214,
        "prefix_str": "D6"
      },
      "signature": {
        "stack_string": "s:Slice -> s3:Slice s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LDSLICE_ALT": {
      "category": "cell",
      "subCategory": "cell_deserialize",
      "description": {
        "short": "",
        "long": "A longer encoding for `LDSLICE`.",
        "operands": ["c"]
      },
      "layout": {
        "min": 14097408,
        "max": 14097664,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_load_slice_fixed2",
        "kind": "fixed",
        "prefix": 55068,
        "prefix_str": "D71C"
      },
      "signature": {
        "stack_string": "s:Slice -> s3:Slice s2:Slice",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s",
              "value_types": ["Slice"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "s3",
              "value_types": ["Slice"]
            },
            {
              "type": "simple",
              "name": "s2",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "LSHIFT_VAR": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11272192,
        "max": 11337728,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_lshift(_1, false)",
        "kind": "simple",
        "prefix": 172,
        "prefix_str": "AC"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "range": {
                "min": 0,
                "max": 1023,
                "todo": "check"
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "LSHIFT": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": ["c"]
      },
      "layout": {
        "min": 11141120,
        "max": 11206656,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_lshift_tinyint8(_1, _2, false)",
        "kind": "fixed",
        "prefix": 170,
        "prefix_str": "AA"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFT_VAR": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12037120,
        "max": 12037376,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_lshift(_1, true)",
        "kind": "simple",
        "prefix": 47020,
        "prefix_str": "B7AC"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QLSHIFT": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": ["c"]
      },
      "layout": {
        "min": 12036608,
        "max": 12036864,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_lshift_tinyint8(_1, _2, true)",
        "kind": "fixed",
        "prefix": 47018,
        "prefix_str": "B7AA"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BCHKBITS_VAR": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Checks whether `x` bits can be stored into `b`, `0 <= x <= 1023`. If there is no space for `x` more bits in `b`, or if `x` is not within the range `0...1023`, throws an exception.",
        "operands": []
      },
      "layout": {
        "min": 13580544,
        "max": 13580800,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_builder_chk_bits_refs(_1, 1)",
        "kind": "simple",
        "prefix": 53049,
        "prefix_str": "CF39"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "b:Builder x:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "BCHKBITS": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Checks whether `cc+1` bits can be stored into `b`, where `0 <= cc <= 255`.",
        "operands": ["c"]
      },
      "layout": {
        "min": 13580288,
        "max": 13580544,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_builder_chk_bits(_1, _2, false)",
        "kind": "fixed",
        "prefix": 53048,
        "prefix_str": "CF38"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "b:Builder -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "BCHKBITSQ_VAR": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Checks whether `x` bits can be stored into `b`, `0 <= x <= 1023`.",
        "operands": []
      },
      "layout": {
        "min": 13581568,
        "max": 13581824,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_builder_chk_bits_refs(_1, 5)",
        "kind": "simple",
        "prefix": 53053,
        "prefix_str": "CF3D"
      },
      "signature": {
        "stack_string": "b:Builder x:Int -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            },
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "BCHKBITSQ": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Checks whether `cc+1` bits can be stored into `b`, where `0 <= cc <= 255`.",
        "operands": ["c"]
      },
      "layout": {
        "min": 13581312,
        "max": 13581568,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_builder_chk_bits(_1, _2, true)",
        "kind": "fixed",
        "prefix": 53052,
        "prefix_str": "CF3C"
      },
      "signature": {
        "stack_string": "b:Builder -> result:Bool",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Bool"]
            }
          ]
        }
      }
    },
    "RSHIFT_VAR": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 11337728,
        "max": 11403264,
        "checkLen": 8,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_rshift(_1, false)",
        "kind": "simple",
        "prefix": 173,
        "prefix_str": "AD"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "range": {
                "min": 0,
                "max": 1023,
                "todo": "check"
              },
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RSHIFT": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": ["c"]
      },
      "layout": {
        "min": 11206656,
        "max": 11272192,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_rshift_tinyint8(_1, _2, false)",
        "kind": "fixed",
        "prefix": 171,
        "prefix_str": "AB"
      },
      "signature": {
        "stack_string": "x:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "RSHIFT_ALT": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 11084800,
        "max": 11085056,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 0)",
        "kind": "simple",
        "prefix": 43300,
        "prefix_str": "A924"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "QRSHIFT_VAR": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 12037376,
        "max": 12037632,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "(_1) => exec_rshift(_1, true)",
        "kind": "simple",
        "prefix": 47021,
        "prefix_str": "B7AD"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QRSHIFT": {
      "category": "arithmetic",
      "subCategory": "shift_logic",
      "description": {
        "short": "",
        "long": "",
        "operands": ["c"]
      },
      "layout": {
        "min": 12036864,
        "max": 12037120,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": 1,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_rshift_tinyint8(_1, _2, true)",
        "kind": "fixed",
        "prefix": 47019,
        "prefix_str": "B7AB"
      },
      "signature": {
        "stack_string": "x:Int y:Int -> result:Int",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            },
            {
              "type": "simple",
              "name": "y",
              "value_types": ["Int"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "QRSHIFT_ALT": {
      "category": "arithmetic",
      "subCategory": "div",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 12036388,
        "max": 12036389,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_shrmod(_1, _2, 1)",
        "kind": "simple",
        "prefix": 12036388,
        "prefix_str": "B7A924"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "CALLDICT": {
      "category": "continuation",
      "subCategory": "continuation_dict_jump",
      "description": {
        "short": "",
        "long": "Calls the continuation in `c3`, pushing integer `0 <= nn <= 255` into its stack as an argument.\nApproximately equivalent to `[nn] PUSHINT` `c3 PUSHCTR` `EXECUTE`.",
        "operands": ["n"]
      },
      "layout": {
        "min": 15728640,
        "max": 15794176,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 8,
              "range": {
                "min": "0",
                "max": "255"
              }
            }
          ]
        },
        "exec": "exec_calldict_short",
        "kind": "fixed",
        "prefix": 240,
        "prefix_str": "F0"
      },
      "signature": {
        "stack_string": "âˆ… -> n:Int",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 3
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "CALLDICT_LONG": {
      "category": "continuation",
      "subCategory": "continuation_dict_jump",
      "description": {
        "short": "",
        "long": "For `0 <= n < 2^14`, an encoding of `[n] CALL` for larger values of `n`.",
        "operands": ["n"]
      },
      "layout": {
        "min": 15794176,
        "max": 15810560,
        "checkLen": 10,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 14,
              "range": {
                "min": "0",
                "max": "16383"
              }
            }
          ]
        },
        "exec": "exec_calldict",
        "kind": "fixed",
        "prefix": 964,
        "prefix_str": "3C4"
      },
      "signature": {
        "stack_string": "âˆ… -> n:Int",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "constant",
              "index": 3
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "n",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "THROW_SHORT": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Throws an exception with error code `n`.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": ["n"]
      },
      "layout": {
        "min": 15859712,
        "max": 15876096,
        "checkLen": 10,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 6,
              "range": {
                "min": "0",
                "max": "63"
              }
            }
          ]
        },
        "exec": "exec_throw_fixed(_1, _2, 63, 0)",
        "kind": "fixed",
        "prefix": 968,
        "prefix_str": "3C8"
      },
      "effects": [
        {
          "$": "AlwaysThrow",
          "costs": [50]
        }
      ],
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "THROW": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Throws an exception with error code `n`.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": ["n"]
      },
      "layout": {
        "min": 15908864,
        "max": 15910912,
        "checkLen": 13,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 11,
              "range": {
                "min": "0",
                "max": "2047"
              }
            }
          ]
        },
        "exec": "exec_throw_fixed(_1, _2, 0x7ff, 0)",
        "kind": "fixed",
        "prefix": 7768,
        "prefix_str": "1E58"
      },
      "effects": [
        {
          "$": "AlwaysThrow",
          "costs": [50]
        }
      ],
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "THROWIF_SHORT": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Conditionally throws an exception with error code `n` if `f` is NOT EQUAL to 0.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": ["n"]
      },
      "layout": {
        "min": 15876096,
        "max": 15892480,
        "checkLen": 10,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 6,
              "range": {
                "min": "0",
                "max": "63"
              }
            }
          ]
        },
        "exec": "exec_throw_fixed(_1, _2, 63, 3)",
        "kind": "fixed",
        "prefix": 969,
        "prefix_str": "3C9"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "THROWIF": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Conditionally throws an exception with error code `n` if `f` is NOT EQUAL to 0.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": ["n"]
      },
      "layout": {
        "min": 15912960,
        "max": 15915008,
        "checkLen": 13,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 11,
              "range": {
                "min": "0",
                "max": "2047"
              }
            }
          ]
        },
        "exec": "exec_throw_fixed(_1, _2, 0x7ff, 3)",
        "kind": "fixed",
        "prefix": 7770,
        "prefix_str": "1E5A"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "THROWIFNOT_SHORT": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Conditionally throws an exception with error code `n` if `f` is EQUAL to 0.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": ["n"]
      },
      "layout": {
        "min": 15892480,
        "max": 15908864,
        "checkLen": 10,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 6,
              "range": {
                "min": "0",
                "max": "63"
              }
            }
          ]
        },
        "exec": "exec_throw_fixed(_1, _2, 63, 2)",
        "kind": "fixed",
        "prefix": 970,
        "prefix_str": "3CA"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "THROWIFNOT": {
      "category": "exception",
      "subCategory": "",
      "description": {
        "short": "Conditionally throws an exception with error code `n` if `f` is EQUAL to 0.",
        "tags": ["exception_handling", "throw", "control_flow"],
        "operands": ["n"]
      },
      "layout": {
        "min": 15917056,
        "max": 15919104,
        "checkLen": 13,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 11,
              "range": {
                "min": "0",
                "max": "2047"
              }
            }
          ]
        },
        "exec": "exec_throw_fixed(_1, _2, 0x7ff, 2)",
        "kind": "fixed",
        "prefix": 7772,
        "prefix_str": "1E5C"
      },
      "effects": [
        {
          "$": "CanThrow",
          "costs": [0, 50]
        }
      ],
      "signature": {
        "stack_string": "f:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "f",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PUSHINT_4": {
      "category": "arithmetic",
      "subCategory": "int_const",
      "description": {
        "short": "Pushes tiny signed integer `x` (`-5 <= x <= 10`) into the stack.",
        "exit_codes": [],
        "operands": ["i"]
      },
      "layout": {
        "min": 7340032,
        "max": 8388608,
        "checkLen": 4,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "tinyInt",
              "range": {
                "min": "-5",
                "max": "10"
              }
            }
          ]
        },
        "exec": "exec_push_tinyint4",
        "kind": "fixed",
        "prefix": 7,
        "prefix_str": "7"
      },
      "signature": {
        "stack_string": "âˆ… -> x:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PUSHINT_8": {
      "category": "arithmetic",
      "subCategory": "int_const",
      "description": {
        "short": "Pushes small signed integer `xx` (`-128 <= xx <= 127`) into the stack.",
        "exit_codes": [],
        "operands": ["x"]
      },
      "layout": {
        "min": 8388608,
        "max": 8454144,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 8,
              "range": {
                "min": "-128",
                "max": "127"
              }
            }
          ]
        },
        "exec": "exec_push_tinyint8",
        "kind": "fixed",
        "prefix": 128,
        "prefix_str": "80"
      },
      "signature": {
        "stack_string": "âˆ… -> x:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PUSHINT_16": {
      "category": "arithmetic",
      "subCategory": "int_const",
      "description": {
        "short": "Pushes signed integer `xxxx` (`-32768 <= xxxx <= 32767`) into the stack.",
        "exit_codes": [],
        "operands": ["x"]
      },
      "layout": {
        "min": 8454144,
        "max": 8519680,
        "checkLen": 8,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "int",
              "len": 16,
              "range": {
                "min": "-65536",
                "max": "65535"
              }
            }
          ]
        },
        "exec": "exec_push_smallint",
        "kind": "fixed",
        "prefix": 129,
        "prefix_str": "81"
      },
      "signature": {
        "stack_string": "âˆ… -> x:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "PUSHINT_LONG": {
      "category": "arithmetic",
      "subCategory": "int_const",
      "description": {
        "short": "Pushes big signed integer `xxx`.",
        "exit_codes": [],
        "operands": ["x"]
      },
      "layout": {
        "min": 8519680,
        "max": 8583168,
        "checkLen": 8,
        "skipLen": 13,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "largeInt",
              "range": {
                "min": "-237142198758023568227473377297792835283496928595231875152809132048206089502588928",
                "max": "237142198758023568227473377297792835283496928595231875152809132048206089502588927"
              }
            }
          ]
        },
        "exec": "exec_push_int",
        "kind": "ext-range",
        "prefix": 4160,
        "prefix_str": "1040"
      },
      "signature": {
        "stack_string": "âˆ… -> x:Int",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "XCHG_01_LONG": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 1114112,
        "max": 1179648,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 8,
              "range": {
                "min": "1",
                "max": "255"
              }
            }
          ]
        },
        "exec": "exec_xchg0_l",
        "kind": "fixed",
        "prefix": 17,
        "prefix_str": "11"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "XCHG_0I": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "Interchanges top element with element at index `i`.",
        "related_instructions": ["XCHG_0I_LONG"],
        "tags": ["stack"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Count of elements on the stack is less or equal to `i`"
          }
        ],
        "operands": ["i"]
      },
      "layout": {
        "min": 131072,
        "max": 1048576,
        "checkLen": 4,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "1",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_xchg0",
        "kind": "fixed-range",
        "prefix": 2,
        "prefix_str": "2"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "XCHG_IJ": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "Interchanges elements at indices `i` and `j`.",
        "tags": ["stack"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Count of elements on the stack is less or equal to `i` or `j`"
          }
        ],
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 1048576,
        "max": 1114112,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "xchgArgs",
          "range": {
            "min": "1",
            "max": "16"
          }
        },
        "exec": "exec_xchg",
        "kind": "fixed",
        "prefix": 16,
        "prefix_str": "10"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "XCHG_1I": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "Interchanges second element with element at index `i`.",
        "tags": ["stack"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Stack is empty."
          },
          {
            "errno": "2",
            "condition": "Count of elements on the stack is less or equal to `i`"
          }
        ],
        "operands": ["i"]
      },
      "layout": {
        "min": 1179648,
        "max": 2097152,
        "checkLen": 4,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "s1"
            },
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "2",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_xchg1",
        "kind": "fixed-range",
        "prefix": 18,
        "prefix_str": "12"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DUMPSTK": {
      "category": "debug",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16646144,
        "max": 16646400,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dump_stack",
        "kind": "simple",
        "prefix": 65024,
        "prefix_str": "FE00"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DEBUG": {
      "category": "debug",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": ["i", "j"]
      },
      "layout": {
        "min": 16646400,
        "max": 16651264,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 8,
              "range": {
                "min": "0",
                "max": "255"
              }
            }
          ]
        },
        "exec": "exec_dummy_debug",
        "kind": "fixed-range",
        "prefix": 65025,
        "prefix_str": "FE01"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "STRDUMP": {
      "category": "debug",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16651264,
        "max": 16651520,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_dump_string",
        "kind": "simple",
        "prefix": 65044,
        "prefix_str": "FE14"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DEBUG_1": {
      "category": "debug",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16651520,
        "max": 16654336,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 8,
              "range": {
                "min": "0",
                "max": "255"
              }
            }
          ]
        },
        "exec": "exec_dummy_debug",
        "kind": "fixed-range",
        "prefix": 65045,
        "prefix_str": "FE15"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DUMP": {
      "category": "debug",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16654336,
        "max": 16658432,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_dump_value",
        "kind": "fixed",
        "prefix": 4066,
        "prefix_str": "FE2"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "DEBUG_2": {
      "category": "debug",
      "subCategory": "",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 16658432,
        "max": 16707584,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 8,
              "range": {
                "min": "0",
                "max": "255"
              }
            }
          ]
        },
        "exec": "exec_dummy_debug",
        "kind": "fixed-range",
        "prefix": 65072,
        "prefix_str": "FE30"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PUSHCTR": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Pushes the current value of control register `c(i)`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered.",
        "operands": ["i"]
      },
      "layout": {
        "min": 15548416,
        "max": 15550464,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "control",
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_push_ctr",
        "kind": "fixed-range",
        "prefix": 60736,
        "prefix_str": "ED40"
      },
      "signature": {
        "stack_string": "âˆ… -> x:Any",
        "inputs": {
          "stack": [],
          "registers": [
            {
              "type": "variable",
              "var_name": "i"
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        }
      }
    },
    "PUSH": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "Copy value of `s[i]` and pushes it onto the stack.",
        "tags": ["stack"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Count of elements on the stack is less or equal to `i`"
          }
        ],
        "examples": [
          {
            "instructions": [
              {
                "instruction": "PUSHINT_4 1"
              },
              {
                "instruction": "PUSHINT_4 2"
              },
              {
                "instruction": "PUSH s1",
                "comment": "Pushes 1 onto the stack."
              }
            ],
            "stack": {
              "input": ["1", "2"],
              "output": ["1", "2", "1"]
            }
          },
          {
            "instructions": [
              {
                "instruction": "PUSHINT_4 1"
              },
              {
                "instruction": "PUSHINT_4 2"
              },
              {
                "instruction": "PUSH s10",
                "comment": "Trying to push a value from an index that is out of bounds."
              }
            ],
            "exit_code": 2,
            "stack": {
              "input": ["1", "2"],
              "output": ["1", "2"]
            }
          }
        ],
        "related_instructions": ["PUSH_LONG"],
        "operands": ["i"]
      },
      "layout": {
        "min": 2228224,
        "max": 3145728,
        "checkLen": 4,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_push",
        "kind": "fixed-range",
        "prefix": 34,
        "prefix_str": "22"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PUSH_LONG": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "Copy value of `s[i]` and pushes it onto the stack.",
        "long": "Copy value of `s[i]` and pushes it onto the stack. This instruction is equivalent to `PUSH` except that it operates on a integer value with bigger range.",
        "tags": ["stack"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Count of elements on the stack is less or equal to `i`"
          }
        ],
        "related_instructions": ["PUSH"],
        "operands": ["i"]
      },
      "layout": {
        "min": 5636096,
        "max": 5701632,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 8,
              "range": {
                "min": "0",
                "max": "255"
              }
            }
          ]
        },
        "exec": "exec_push_l",
        "kind": "fixed",
        "prefix": 86,
        "prefix_str": "56"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "POPCTR": {
      "category": "continuation",
      "subCategory": "continuation_change",
      "description": {
        "short": "",
        "long": "Pops a value `x` from the stack and stores it into control register `c(i)`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur.",
        "operands": ["i"]
      },
      "layout": {
        "min": 15552512,
        "max": 15554560,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "control",
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_pop_ctr",
        "kind": "fixed-range",
        "prefix": 60752,
        "prefix_str": "ED50"
      },
      "signature": {
        "stack_string": "x:Any -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "x"
            }
          ]
        },
        "outputs": {
          "stack": [],
          "registers": [
            {
              "type": "variable",
              "var_name": "i"
            }
          ]
        }
      }
    },
    "POP": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "Removes the top element from the stack and stores it in `s[i]`. If `i` equal to 0, POP is effectively a `DROP`, i.e. the top element is removed from the stack.",
        "tags": ["stack"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Count of elements on the stack is less or equal to `i`"
          }
        ],
        "related_instructions": ["POP_LONG"],
        "operands": ["i"]
      },
      "layout": {
        "min": 3276800,
        "max": 4194304,
        "checkLen": 4,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_pop",
        "kind": "fixed-range",
        "prefix": 50,
        "prefix_str": "32"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "POP_LONG": {
      "category": "stack",
      "subCategory": "",
      "description": {
        "short": "Removes the top element from the stack and stores it in `s[i]`",
        "long": "Removes the top element from the stack and stores it in `s[i]`. If `i` equal to 0, POP is effectively a `DROP`, i.e. the top element is removed from the stack. This instruction is equivalent to `POP` except that it operates on a integer value with bigger range.",
        "tags": ["stack"],
        "exit_codes": [
          {
            "errno": "2",
            "condition": "Count of elements on the stack is less or equal to `i`"
          }
        ],
        "related_instructions": ["POP"],
        "operands": ["i"]
      },
      "layout": {
        "min": 5701632,
        "max": 5767168,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "stack",
              "len": 8,
              "range": {
                "min": "0",
                "max": "255"
              }
            }
          ]
        },
        "exec": "exec_pop_l",
        "kind": "fixed",
        "prefix": 87,
        "prefix_str": "57"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "CALLXARGS": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": "_Calls_ continuation `c` with `p` parameters and expecting `r` return values\n`0 <= p <= 15`, `0 <= r <= 15`",
        "operands": ["p", "r"]
      },
      "layout": {
        "min": 14352384,
        "max": 14356480,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "minusOne"
            }
          ]
        },
        "exec": "exec_callx_args_p",
        "kind": "fixed",
        "prefix": 3504,
        "prefix_str": "DB0"
      },
      "signature": {
        "stack_string": "x_1...x_p c:Continuation -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "array",
              "name": "args",
              "length_var": "p",
              "array_entry": [
                {
                  "type": "simple",
                  "name": "arg"
                }
              ]
            },
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "CALLXARGS_1": {
      "category": "continuation",
      "subCategory": "continuation_jump",
      "description": {
        "short": "",
        "long": ""
      },
      "layout": {
        "min": 14286848,
        "max": 14352384,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            },
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_callx_args",
        "kind": "fixed",
        "prefix": 218,
        "prefix_str": "DA"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": [],
          "registers": []
        },
        "outputs": {
          "stack": [],
          "registers": []
        }
      }
    },
    "PUSHSLICE": {
      "category": "cell",
      "subCategory": "cell_const",
      "description": {
        "short": "",
        "long": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the (prefix) subslice of `cc.code` consisting of its first `8x+4` bits and no references (i.e., essentially a bitstring), where `0 <= x <= 15`.\nA completion tag is assumed, meaning that all trailing zeroes and the last binary one (if present) are removed from this bitstring.\nIf the original bitstring consists only of zeroes, an empty slice will be pushed.",
        "operands": ["s"]
      },
      "layout": {
        "min": 9109504,
        "max": 9175040,
        "checkLen": 8,
        "skipLen": 12,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "slice",
              "refs": {
                "$": "refs",
                "count": 0
              },
              "bits": {
                "$": "uint",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              },
              "pad": 4
            }
          ]
        },
        "exec": "exec_push_slice",
        "kind": "ext",
        "prefix": 139,
        "prefix_str": "8B"
      },
      "signature": {
        "stack_string": "âˆ… -> result:Slice",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "PUSHSLICE_REFS": {
      "category": "cell",
      "subCategory": "cell_const",
      "description": {
        "short": "",
        "long": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the (prefix) subslice of `cc.code` consisting of its first `1 <= r+1 <= 4` references and up to first `8xx+1` bits of data, with `0 <= xx <= 31`.\nA completion tag is also assumed.",
        "operands": ["slice"]
      },
      "layout": {
        "min": 9175040,
        "max": 9240576,
        "checkLen": 8,
        "skipLen": 15,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "slice",
              "refs": {
                "$": "delta",
                "delta": 1,
                "arg": {
                  "$": "uint",
                  "len": 2,
                  "range": {
                    "min": "0",
                    "max": "3"
                  }
                }
              },
              "bits": {
                "$": "uint",
                "len": 5,
                "range": {
                  "min": "0",
                  "max": "31"
                }
              },
              "pad": 1
            }
          ]
        },
        "exec": "exec_push_slice_r",
        "kind": "ext",
        "prefix": 140,
        "prefix_str": "8C"
      },
      "signature": {
        "stack_string": "âˆ… -> result:Slice",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "PUSHSLICE_LONG": {
      "category": "cell",
      "subCategory": "cell_const",
      "description": {
        "short": "",
        "long": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the subslice of `cc.code` consisting of `0 <= r <= 4` references and up to `8xx+6` bits of data, with `0 <= xx <= 127`.\nA completion tag is assumed.",
        "operands": ["slice"]
      },
      "layout": {
        "min": 9240576,
        "max": 9281536,
        "checkLen": 8,
        "skipLen": 18,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "slice",
              "refs": {
                "$": "uint",
                "len": 3,
                "range": {
                  "min": "0",
                  "max": "7"
                }
              },
              "bits": {
                "$": "uint",
                "len": 7,
                "range": {
                  "min": "0",
                  "max": "127"
                }
              },
              "pad": 6
            }
          ]
        },
        "exec": "exec_push_slice_r2",
        "kind": "ext-range",
        "prefix": 144384,
        "prefix_str": "23400"
      },
      "signature": {
        "stack_string": "âˆ… -> result:Slice",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Slice"]
            }
          ]
        }
      }
    },
    "PUSHCONT": {
      "category": "cell",
      "subCategory": "cell_const",
      "description": {
        "short": "Pushes a continuation onto the stack.",
        "long": "Fetches a simple ordinary continuation from the current code slice and pushes it onto the stack. The length of the continuation is at most 127 * 8 bits and 3 references.",
        "tags": ["stack", "continuation"],
        "exit_codes": [],
        "related_instructions": ["PUSHCONT_SHORT"],
        "operands": ["c"]
      },
      "layout": {
        "min": 9306112,
        "max": 9437184,
        "checkLen": 7,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "codeSlice",
              "refs": {
                "$": "uint",
                "len": 2,
                "range": {
                  "min": "0",
                  "max": "3"
                }
              },
              "bits": {
                "$": "uint",
                "len": 7,
                "range": {
                  "min": "0",
                  "max": "127"
                }
              }
            }
          ]
        },
        "exec": "exec_push_cont",
        "kind": "ext",
        "prefix": 71,
        "prefix_str": "47"
      },
      "signature": {
        "stack_string": "âˆ… -> result:Continuation",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "result",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "PUSHCONT_SHORT": {
      "category": "cell",
      "subCategory": "cell_const",
      "description": {
        "short": "Pushes a short continuation onto the stack.",
        "long": "Fetches a simple ordinary continuation from the current code slice and pushes it onto the stack. The length of the continuation is at most 15 * 8 bits.",
        "tags": ["stack", "continuation"],
        "exit_codes": [],
        "related_instructions": ["PUSHCONT"],
        "operands": ["c"]
      },
      "layout": {
        "min": 9437184,
        "max": 10485760,
        "checkLen": 4,
        "skipLen": 8,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "inlineCodeSlice",
              "bits": {
                "$": "uint",
                "len": 4,
                "range": {
                  "min": "0",
                  "max": "15"
                }
              }
            }
          ]
        },
        "exec": "exec_push_cont_simple",
        "kind": "ext",
        "prefix": 9,
        "prefix_str": "9"
      },
      "signature": {
        "stack_string": "âˆ… -> c:Continuation",
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Continuation"]
            }
          ]
        }
      }
    },
    "STSLICECONST": {
      "category": "cell",
      "subCategory": "cell_serialize",
      "description": {
        "short": "",
        "long": "Stores a constant subslice `sss`.\n_Details:_ `sss` consists of `0 <= x <= 3` references and up to `8y+2` data bits, with `0 <= y <= 7`. Completion bit is assumed.\nNote that the assembler can replace `STSLICECONST` with `PUSHSLICE` `STSLICER` if the slice is too big.",
        "tags": ["builder building"],
        "operands": ["s"]
      },
      "layout": {
        "min": 13598720,
        "max": 13631488,
        "checkLen": 9,
        "skipLen": 14,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "slice",
              "refs": {
                "$": "uint",
                "len": 2,
                "range": {
                  "min": "0",
                  "max": "3"
                }
              },
              "bits": {
                "$": "uint",
                "len": 3,
                "range": {
                  "min": "0",
                  "max": "7"
                }
              },
              "pad": 2
            }
          ]
        },
        "exec": "exec_store_const_slice",
        "kind": "ext",
        "prefix": 415,
        "prefix_str": "19F"
      },
      "signature": {
        "stack_string": "b:Builder -> b2:Builder",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b",
              "value_types": ["Builder"]
            }
          ]
        },
        "outputs": {
          "stack": [
            {
              "type": "simple",
              "name": "b2",
              "value_types": ["Builder"]
            }
          ]
        }
      }
    },
    "SETCP": {
      "category": "codepage",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Selects TVM codepage `0 <= nn < 240`. If the codepage is not supported, throws an invalid opcode exception.",
        "operands": ["n"]
      },
      "layout": {
        "min": 16711680,
        "max": 16773120,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 8,
              "range": {
                "min": "0",
                "max": "255"
              }
            }
          ]
        },
        "exec": "exec_set_cp",
        "kind": "fixed-range",
        "prefix": 65280,
        "prefix_str": "FF00"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": []
        }
      }
    },
    "SETCPX": {
      "category": "codepage",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Selects codepage `c` with `-2^15 <= c < 2^15` passed in the top of the stack.",
        "operands": []
      },
      "layout": {
        "min": 16773120,
        "max": 16773376,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_set_cp_any",
        "kind": "simple",
        "prefix": 65520,
        "prefix_str": "FFF0"
      },
      "signature": {
        "stack_string": "c:Int -> âˆ…",
        "inputs": {
          "stack": [
            {
              "type": "simple",
              "name": "c",
              "value_types": ["Int"]
            }
          ]
        }
      }
    },
    "SETCP_SHORT": {
      "category": "codepage",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "Selects TVM codepage `z-16` for `1 <= z <= 15`. Negative codepages `-13...-1` are reserved for restricted versions of TVM needed to validate runs of TVM in other codepages. Negative codepage `-14` is reserved for experimental codepages, not necessarily compatible between different TVM implementations, and should be disabled in the production versions of TVM."
      },
      "layout": {
        "min": 16773376,
        "max": 16777216,
        "checkLen": 8,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "delta",
              "delta": -256,
              "arg": {
                "$": "uint",
                "len": 8,
                "range": {
                  "min": "0",
                  "max": "255"
                }
              }
            }
          ]
        },
        "exec": "exec_set_cp",
        "kind": "fixed-range",
        "prefix": 65521,
        "prefix_str": "FFF1"
      },
      "signature": {
        "stack_string": "",
        "inputs": {
          "stack": []
        }
      }
    },
    "GETPARAMLONG": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16285952,
        "max": 16285969,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 8,
              "range": {
                "min": "0",
                "max": "255"
              }
            }
          ]
        },
        "exec": "exec_get_var_param_long",
        "version": 11,
        "kind": "fixed-range",
        "prefix": 16285952,
        "prefix_str": "F88100"
      },
      "signature": {}
    },
    "INMSGPARAMS": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16285969,
        "max": 16285970,
        "checkLen": 24,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_param",
        "version": 11,
        "kind": "simple",
        "prefix": 16285969,
        "prefix_str": "F88111"
      },
      "signature": {}
    },
    "GETPARAMLONG2": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16285970,
        "max": 16286207,
        "checkLen": 16,
        "skipLen": 24,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 8,
              "range": {
                "min": "0",
                "max": "255"
              }
            }
          ]
        },
        "exec": "exec_get_var_param_long",
        "version": 11,
        "kind": "fixed-range",
        "prefix": 16285970,
        "prefix_str": "F88112"
      },
      "signature": {}
    },
    "INMSG_BOUNCE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16289792,
        "max": 16290048,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_in_msg_param",
        "version": 11,
        "kind": "simple",
        "prefix": 63632,
        "prefix_str": "F890"
      },
      "signature": {}
    },
    "INMSG_BOUNCED": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16290048,
        "max": 16290304,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_in_msg_param",
        "version": 11,
        "kind": "simple",
        "prefix": 63633,
        "prefix_str": "F891"
      },
      "signature": {}
    },
    "INMSG_SRC": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16290304,
        "max": 16290560,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_in_msg_param",
        "version": 11,
        "kind": "simple",
        "prefix": 63634,
        "prefix_str": "F892"
      },
      "signature": {}
    },
    "INMSG_FWDFEE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16290560,
        "max": 16290816,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_in_msg_param",
        "version": 11,
        "kind": "simple",
        "prefix": 63635,
        "prefix_str": "F893"
      },
      "signature": {}
    },
    "INMSG_LT": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16290816,
        "max": 16291072,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_in_msg_param",
        "version": 11,
        "kind": "simple",
        "prefix": 63636,
        "prefix_str": "F894"
      },
      "signature": {}
    },
    "INMSG_UTIME": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16291072,
        "max": 16291328,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_in_msg_param",
        "version": 11,
        "kind": "simple",
        "prefix": 63637,
        "prefix_str": "F895"
      },
      "signature": {}
    },
    "INMSG_ORIGVALUE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16291328,
        "max": 16291584,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_in_msg_param",
        "version": 11,
        "kind": "simple",
        "prefix": 63638,
        "prefix_str": "F896"
      },
      "signature": {}
    },
    "INMSG_VALUE": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16291584,
        "max": 16291840,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_in_msg_param",
        "version": 11,
        "kind": "simple",
        "prefix": 63639,
        "prefix_str": "F897"
      },
      "signature": {}
    },
    "INMSG_VALUEEXTRA": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16291840,
        "max": 16292096,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_in_msg_param",
        "version": 11,
        "kind": "simple",
        "prefix": 63640,
        "prefix_str": "F898"
      },
      "signature": {}
    },
    "INMSG_STATEINIT": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16292096,
        "max": 16292352,
        "checkLen": 16,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": []
        },
        "exec": "exec_get_in_msg_param",
        "version": 11,
        "kind": "simple",
        "prefix": 63641,
        "prefix_str": "F899"
      },
      "signature": {}
    },
    "INMSGPARAM": {
      "category": "config",
      "subCategory": "",
      "description": {
        "short": "",
        "long": "",
        "operands": []
      },
      "layout": {
        "min": 16292352,
        "max": 16293888,
        "checkLen": 12,
        "skipLen": 16,
        "args": {
          "$": "simpleArgs",
          "children": [
            {
              "$": "uint",
              "len": 4,
              "range": {
                "min": "0",
                "max": "15"
              }
            }
          ]
        },
        "exec": "exec_get_var_in_msg_param",
        "version": 11,
        "kind": "fixed-range",
        "prefix": 63642,
        "prefix_str": "F89A"
      },
      "signature": {}
    }
  }
}
